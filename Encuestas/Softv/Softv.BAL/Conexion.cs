
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : ConexionBussines
/// File                    : ConexionBussines.cs
/// Creation date           : 04/05/2016
/// Creation time           : 01:21 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class Conexion
    {

        #region Constructors
        public Conexion() { }
        #endregion

        /// <summary>
        ///Adds Conexion
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(ConexionEntity objConexion)
        {
            int result = ProviderSoftv.Conexion.AddConexion(objConexion);
            return result;
        }

        /// <summary>
        ///Delete Conexion
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdConexion)
        {
            int resultado = ProviderSoftv.Conexion.DeleteConexion(IdConexion);
            return resultado;
        }

        /// <summary>
        ///Update Conexion
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(ConexionEntity objConexion)
        {
            int result = ProviderSoftv.Conexion.EditConexion(objConexion);
            return result;
        }

        /// <summary>
        ///Get Conexion
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<ConexionEntity> GetAll()
        {
            List<ConexionEntity> entities = new List<ConexionEntity>();
            entities = ProviderSoftv.Conexion.GetConexion();

            //List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.IdConexion.HasValue).Select(x => x.IdConexion.Value).ToList());
            //lLlamada.ForEach(XLlamada => entities.Where(x => x.IdConexion.HasValue).Where(x => x.IdConexion == XLlamada.IdConexion).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new List<ConexionEntity>();
        }

        /// <summary>
        ///Get Conexion List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<ConexionEntity> GetAll(List<int> lid)
        {
            List<ConexionEntity> entities = new List<ConexionEntity>();
            entities = ProviderSoftv.Conexion.GetConexion(lid);
            return entities ?? new List<ConexionEntity>();
        }

        /// <summary>
        ///Get Conexion By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static ConexionEntity GetOne(int? IdConexion)
        {
            ConexionEntity result = ProviderSoftv.Conexion.GetConexionById(IdConexion);

            if (result.IdConexion != null)
                result.Llamada = ProviderSoftv.Llamada.GetLlamadaById(result.IdConexion);

            return result;
        }

        /// <summary>
        ///Get Conexion By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static ConexionEntity GetOneDeep(int? IdConexion)
        {
            ConexionEntity result = ProviderSoftv.Conexion.GetConexionById(IdConexion);

            if (result.IdConexion != null)
                result.Llamada = ProviderSoftv.Llamada.GetLlamadaById(result.IdConexion);

            return result;
        }

        public static List<ConexionEntity> GetConexionByIdConexion(int? IdConexion)
        {
            List<ConexionEntity> entities = new List<ConexionEntity>();
            entities = ProviderSoftv.Conexion.GetConexionByIdConexion(IdConexion);
            return entities ?? new List<ConexionEntity>();
        }



        /// <summary>
        ///Get Conexion
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<ConexionEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<ConexionEntity> entities = new SoftvList<ConexionEntity>();
            entities = ProviderSoftv.Conexion.GetPagedList(pageIndex, pageSize);

            List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.IdConexion.HasValue).Select(x => x.IdConexion.Value).Distinct().ToList());
            lLlamada.ForEach(XLlamada => entities.Where(x => x.IdConexion.HasValue).Where(x => x.IdConexion == XLlamada.IdConexion).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new SoftvList<ConexionEntity>();
        }

        /// <summary>
        ///Get Conexion
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<ConexionEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<ConexionEntity> entities = new SoftvList<ConexionEntity>();
            entities = ProviderSoftv.Conexion.GetPagedList(pageIndex, pageSize, xml);

            List<LlamadaEntity> lLlamada = ProviderSoftv.Llamada.GetLlamada(entities.Where(x => x.IdConexion.HasValue).Select(x => x.IdConexion.Value).Distinct().ToList());
            lLlamada.ForEach(XLlamada => entities.Where(x => x.IdConexion.HasValue).Where(x => x.IdConexion == XLlamada.IdConexion).ToList().ForEach(y => y.Llamada = XLlamada));

            return entities ?? new SoftvList<ConexionEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
