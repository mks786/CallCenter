
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : CALLEBussines
/// File                    : CALLEBussines.cs
/// Creation date           : 20/05/2016
/// Creation time           : 06:40 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class CALLE
    {

        #region Constructors
        public CALLE() { }
        #endregion

        /// <summary>
        ///Adds CALLE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(CALLEEntity objCALLE)
        {
            int result = ProviderSoftv.CALLE.AddCALLE(objCALLE);
            return result;
        }

        /// <summary>
        ///Delete CALLE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? Clv_Calle)
        {
            int resultado = ProviderSoftv.CALLE.DeleteCALLE(Clv_Calle);
            return resultado;
        }

        /// <summary>
        ///Update CALLE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(CALLEEntity objCALLE)
        {
            int result = ProviderSoftv.CALLE.EditCALLE(objCALLE);
            return result;
        }

        /// <summary>
        ///Get CALLE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<CALLEEntity> GetAll()
        {
            List<CALLEEntity> entities = new List<CALLEEntity>();
            entities = ProviderSoftv.CALLE.GetCALLE();

            //List<CLIENTEEntity> lCLIENTE = ProviderSoftv.CLIENTE.GetCLIENTE(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).ToList());
            //lCLIENTE.ForEach(XCLIENTE => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCLIENTE.Clv_Calle).ToList().ForEach(y => y.CLIENTE = XCLIENTE));

           //List<CVECAROLEntity> lCVECAROL = ProviderSoftv.CVECAROL.GetCVECAROL(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).ToList());
            //lCVECAROL.ForEach(XCVECAROL => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCVECAROL.Clv_Calle).ToList().ForEach(y => y.CVECAROL = XCVECAROL));

            return entities ?? new List<CALLEEntity>();
        }

        /// <summary>
        ///Get CALLE List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<CALLEEntity> GetAll(List<int> lid)
        {
            List<CALLEEntity> entities = new List<CALLEEntity>();
            entities = ProviderSoftv.CALLE.GetCALLE(lid);
            return entities ?? new List<CALLEEntity>();
        }

        /// <summary>
        ///Get CALLE By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static CALLEEntity GetOne(int? Clv_Calle)
        {
            CALLEEntity result = ProviderSoftv.CALLE.GetCALLEById(Clv_Calle);

            if (result.Clv_Calle != null)
                result.CLIENTE = ProviderSoftv.CLIENTE.GetCLIENTEById(result.Clv_Calle);

            if (result.Clv_Calle != null)
                result.CVECAROL = ProviderSoftv.CVECAROL.GetCVECAROLByCalle(result.Clv_Calle);


            return result;
        }

        /// <summary>
        ///Get CALLE By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static CALLEEntity GetOneDeep(int? Clv_Calle)
        {
            CALLEEntity result = ProviderSoftv.CALLE.GetCALLEById(Clv_Calle);

            if (result.Clv_Calle != null)
                result.CLIENTE = ProviderSoftv.CLIENTE.GetCLIENTEById(result.Clv_Calle);

            if (result.Clv_Calle != null)
                result.CVECAROL = ProviderSoftv.CVECAROL.GetCVECAROLByCalle(result.Clv_Calle);


            return result;
        }

        public static List<CALLEEntity> GetCALLEByClv_Calle(int? Clv_Calle)
        {
            List<CALLEEntity> entities = new List<CALLEEntity>();
            entities = ProviderSoftv.CALLE.GetCALLEByClv_Calle(Clv_Calle);
            return entities ?? new List<CALLEEntity>();
        }


        public static List<CALLEEntity> GetCALLEByIdCalle(int? Clv_Calle)
        {
            List<CALLEEntity> entities = new List<CALLEEntity>();
            entities = ProviderSoftv.CALLE.GetCALLEByIdCalle(Clv_Calle);
            return entities ?? new List<CALLEEntity>();
        }



        /// <summary>
        ///Get CALLE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<CALLEEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<CALLEEntity> entities = new SoftvList<CALLEEntity>();
            entities = ProviderSoftv.CALLE.GetPagedList(pageIndex, pageSize);

            //List<CLIENTEEntity> lCLIENTE = ProviderSoftv.CLIENTE.GetCLIENTE(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).Distinct().ToList());
            //lCLIENTE.ForEach(XCLIENTE => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCLIENTE.Clv_Calle).ToList().ForEach(y => y.CLIENTE = XCLIENTE));

            List<CVECAROLEntity> lCVECAROL = ProviderSoftv.CVECAROL.GetCVECAROL(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).Distinct().ToList());
            lCVECAROL.ForEach(XCVECAROL => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCVECAROL.Clv_Calle).ToList().ForEach(y => y.CVECAROL = XCVECAROL));


            return entities ?? new SoftvList<CALLEEntity>();
        }

        /// <summary>
        ///Get CALLE
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<CALLEEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<CALLEEntity> entities = new SoftvList<CALLEEntity>();
            entities = ProviderSoftv.CALLE.GetPagedList(pageIndex, pageSize, xml);

            //List<CLIENTEEntity> lCLIENTE = ProviderSoftv.CLIENTE.GetCLIENTE(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).Distinct().ToList());
            //lCLIENTE.ForEach(XCLIENTE => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCLIENTE.Clv_Calle).ToList().ForEach(y => y.CLIENTE = XCLIENTE));

            List<CVECAROLEntity> lCVECAROL = ProviderSoftv.CVECAROL.GetCVECAROL(entities.Where(x => x.Clv_Calle.HasValue).Select(x => x.Clv_Calle.Value).Distinct().ToList());
            lCVECAROL.ForEach(XCVECAROL => entities.Where(x => x.Clv_Calle.HasValue).Where(x => x.Clv_Calle == XCVECAROL.Clv_Calle).ToList().ForEach(y => y.CVECAROL = XCVECAROL));


            return entities ?? new SoftvList<CALLEEntity>();
        }


    }




    #region Customs Methods

    #endregion
}
