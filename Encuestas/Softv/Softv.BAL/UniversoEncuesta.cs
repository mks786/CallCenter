
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : UniversoEncuestaBussines
/// File                    : UniversoEncuestaBussines.cs
/// Creation date           : 12/08/2016
/// Creation time           : 12:44 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class UniversoEncuesta
    {

        #region Constructors
        public UniversoEncuesta() { }
        #endregion

        /// <summary>
        ///Adds UniversoEncuesta
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(UniversoEncuestaEntity objUniversoEncuesta)
        {
            int result = ProviderSoftv.UniversoEncuesta.AddUniversoEncuesta(objUniversoEncuesta);
            return result;
        }

        /// <summary>
        ///Delete UniversoEncuesta
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? Id)
        {
            int resultado = ProviderSoftv.UniversoEncuesta.DeleteUniversoEncuesta(Id);
            return resultado;
        }

        /// <summary>
        ///Update UniversoEncuesta
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(UniversoEncuestaEntity objUniversoEncuesta)
        {
            int result = ProviderSoftv.UniversoEncuesta.EditUniversoEncuesta(objUniversoEncuesta);
            return result;
        }

        /// <summary>
        ///Get UniversoEncuesta
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<UniversoEncuestaEntity> GetAll()
        {
            List<UniversoEncuestaEntity> entities = new List<UniversoEncuestaEntity>();
            entities = ProviderSoftv.UniversoEncuesta.GetUniversoEncuesta();

            //List<ProcesoEncuestaEntity> lProcesoEncuesta = ProviderSoftv.ProcesoEncuesta.GetProcesoEncuesta(entities.Where(x => x.IdProcesoEnc.HasValue).Select(x => x.IdProcesoEnc.Value).ToList());
            //lProcesoEncuesta.ForEach(XProcesoEncuesta => entities.Where(x => x.IdProcesoEnc.HasValue).Where(x => x.IdProcesoEnc == XProcesoEncuesta.IdProcesoEnc).ToList().ForEach(y => y.Id = XProcesoEncuesta));

            return entities ?? new List<UniversoEncuestaEntity>();
        }

        /// <summary>
        ///Get UniversoEncuesta List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<UniversoEncuestaEntity> GetAll(List<int> lid)
        {
            List<UniversoEncuestaEntity> entities = new List<UniversoEncuestaEntity>();
            entities = ProviderSoftv.UniversoEncuesta.GetUniversoEncuesta(lid);
            return entities ?? new List<UniversoEncuestaEntity>();
        }

        /// <summary>
        ///Get UniversoEncuesta By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static UniversoEncuestaEntity GetOne(int? Id)
        {
            UniversoEncuestaEntity result = ProviderSoftv.UniversoEncuesta.GetUniversoEncuestaById(Id);

            //if (result.IdProcesoEnc != null)
            //    result.ProcesoEncuesta = ProviderSoftv.ProcesoEncuesta.GetProcesoEncuestaById(result.IdProcesoEnc);

            return result;
        }

        /// <summary>
        ///Get UniversoEncuesta By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static UniversoEncuestaEntity GetOneDeep(int? Id)
        {
            UniversoEncuestaEntity result = ProviderSoftv.UniversoEncuesta.GetUniversoEncuestaById(Id);

            //if (result.IdProcesoEnc != null)
            //    result.ProcesoEncuesta = ProviderSoftv.ProcesoEncuesta.GetProcesoEncuestaById(result.IdProcesoEnc);

            return result;
        }

        public static List<UniversoEncuestaEntity> GetUniversoEncuestaByIdProcesoEnc(int? IdProcesoEnc)
        {
            List<UniversoEncuestaEntity> entities = new List<UniversoEncuestaEntity>();
            entities = ProviderSoftv.UniversoEncuesta.GetUniversoEncuestaByIdProcesoEnc(IdProcesoEnc);
            return entities ?? new List<UniversoEncuestaEntity>();
        }



        /// <summary>
        ///Get UniversoEncuesta
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<UniversoEncuestaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<UniversoEncuestaEntity> entities = new SoftvList<UniversoEncuestaEntity>();
            entities = ProviderSoftv.UniversoEncuesta.GetPagedList(pageIndex, pageSize);

            //List<ProcesoEncuestaEntity> lProcesoEncuesta = ProviderSoftv.ProcesoEncuesta.GetProcesoEncuesta(entities.Where(x => x.IdProcesoEnc.HasValue).Select(x => x.IdProcesoEnc.Value).Distinct().ToList());
            //lProcesoEncuesta.ForEach(XProcesoEncuesta => entities.Where(x => x.IdProcesoEnc.HasValue).Where(x => x.IdProcesoEnc == XProcesoEncuesta.IdProcesoEnc).ToList().ForEach(y => y.ProcesoEncuesta = XProcesoEncuesta));

            return entities ?? new SoftvList<UniversoEncuestaEntity>();
        }

        /// <summary>
        ///Get UniversoEncuesta
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<UniversoEncuestaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<UniversoEncuestaEntity> entities = new SoftvList<UniversoEncuestaEntity>();
            entities = ProviderSoftv.UniversoEncuesta.GetPagedList(pageIndex, pageSize, xml);

            //List<ProcesoEncuestaEntity> lProcesoEncuesta = ProviderSoftv.ProcesoEncuesta.GetProcesoEncuesta(entities.Where(x => x.IdProcesoEnc.HasValue).Select(x => x.IdProcesoEnc.Value).Distinct().ToList());
            //lProcesoEncuesta.ForEach(XProcesoEncuesta => entities.Where(x => x.IdProcesoEnc.HasValue).Where(x => x.IdProcesoEnc == XProcesoEncuesta.IdProcesoEnc).ToList().ForEach(y => y.ProcesoEncuesta = XProcesoEncuesta));

            return entities ?? new SoftvList<UniversoEncuestaEntity>();
        }






        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int ActualizarUniverso(int? Id)
        {
            int result = ProviderSoftv.UniversoEncuesta.ActualizarUniverso(Id);
            return result;
        }




    }




    #region Customs Methods

    #endregion
}
