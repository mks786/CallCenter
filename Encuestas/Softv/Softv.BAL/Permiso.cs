
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.ComponentModel;
using System.Linq;
using Softv.Providers;
using Softv.Entities;
using Globals;

/// <summary>
/// Class                   : Softv.BAL.Client.cs
/// Generated by            : Class Generator (c) 2014
/// Description             : PermisoBussines
/// File                    : PermisoBussines.cs
/// Creation date           : 30/05/2016
/// Creation time           : 05:17 p. m.
///</summary>
namespace Softv.BAL
{

    [DataObject]
    [Serializable]
    public class Permiso
    {

        #region Constructors
        public Permiso() { }
        #endregion

        /// <summary>
        ///Adds Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int Add(PermisoEntity objPermiso)
        {
            int result = ProviderSoftv.Permiso.AddPermiso(objPermiso);
            return result;
        }

        /// <summary>
        ///Delete Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public static int Delete(int? IdPermiso)
        {
            int resultado = ProviderSoftv.Permiso.DeletePermiso(IdPermiso);
            return resultado;
        }

        /// <summary>
        ///Update Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public static int Edit(PermisoEntity objPermiso)
        {
            int result = ProviderSoftv.Permiso.EditPermiso(objPermiso);
            return result;
        }

        /// <summary>
        ///Get Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<PermisoEntity> GetAll()
        {
            List<PermisoEntity> entities = new List<PermisoEntity>();
            entities = ProviderSoftv.Permiso.GetPermiso();

            //List<RoleEntity> lRole = ProviderSoftv.Role.GetRole(entities.Where(x => x.IdRol.HasValue).Select(x => x.IdRol.Value).ToList());
            //lRole.ForEach(XRole => entities.Where(x => x.IdRol.HasValue).Where(x => x.IdRol == XRole.IdRol).ToList().ForEach(y => y.Role = XRole));

            //List<ModuleEntity> lModule = ProviderSoftv.Module.GetModule(entities.Where(x => x.IdModule.HasValue).Select(x => x.IdModule.Value).ToList());
            //lModule.ForEach(XModule => entities.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XModule.IdModule).ToList().ForEach(y => y.Module = XModule));

            return entities ?? new List<PermisoEntity>();
        }

        /// <summary>
        ///Get Permiso List<lid>
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static List<PermisoEntity> GetAll(List<int> lid)
        {
            List<PermisoEntity> entities = new List<PermisoEntity>();
            entities = ProviderSoftv.Permiso.GetPermiso(lid);
            return entities ?? new List<PermisoEntity>();
        }

        /// <summary>
        ///Get Permiso By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static PermisoEntity GetOne(int? IdPermiso)
        {
            PermisoEntity result = ProviderSoftv.Permiso.GetPermisoById(IdPermiso);

            if (result.IdRol != null)
                result.Role = ProviderSoftv.Role.GetRoleById(result.IdRol);

            if (result.IdModule != null)
                result.Module = ProviderSoftv.Module.GetModuleById(result.IdModule);

            return result;
        }

        /// <summary>
        ///Get Permiso By Id
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select)]
        public static PermisoEntity GetOneDeep(int? IdPermiso)
        {
            PermisoEntity result = ProviderSoftv.Permiso.GetPermisoById(IdPermiso);

            if (result.IdRol != null)
                result.Role = ProviderSoftv.Role.GetRoleById(result.IdRol);

            if (result.IdModule != null)
                result.Module = ProviderSoftv.Module.GetModuleById(result.IdModule);

            return result;
        }

        public static List<PermisoEntity> GetPermisoByIdRol(int? IdRol)
        {
            List<PermisoEntity> entities = new List<PermisoEntity>();
            entities = ProviderSoftv.Permiso.GetPermisoByIdRol(IdRol);
            return entities ?? new List<PermisoEntity>();
        }

        public static List<PermisoEntity> GetPermisoByIdModule(int? IdModule)
        {
            List<PermisoEntity> entities = new List<PermisoEntity>();
            entities = ProviderSoftv.Permiso.GetPermisoByIdModule(IdModule);
            return entities ?? new List<PermisoEntity>();
        }



        /// <summary>
        ///Get Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<PermisoEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<PermisoEntity> entities = new SoftvList<PermisoEntity>();
            entities = ProviderSoftv.Permiso.GetPagedList(pageIndex, pageSize);

            List<RoleEntity> lRole = ProviderSoftv.Role.GetRole(entities.Where(x => x.IdRol.HasValue).Select(x => x.IdRol.Value).Distinct().ToList());
            lRole.ForEach(XRole => entities.Where(x => x.IdRol.HasValue).Where(x => x.IdRol == XRole.IdRol).ToList().ForEach(y => y.Role = XRole));

            List<ModuleEntity> lModule = ProviderSoftv.Module.GetModule(entities.Where(x => x.IdModule.HasValue).Select(x => x.IdModule.Value).Distinct().ToList());
            lModule.ForEach(XModule => entities.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XModule.IdModule).ToList().ForEach(y => y.Module = XModule));

            return entities ?? new SoftvList<PermisoEntity>();
        }

        /// <summary>
        ///Get Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<PermisoEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<PermisoEntity> entities = new SoftvList<PermisoEntity>();
            entities = ProviderSoftv.Permiso.GetPagedList(pageIndex, pageSize, xml);

            List<RoleEntity> lRole = ProviderSoftv.Role.GetRole(entities.Where(x => x.IdRol.HasValue).Select(x => x.IdRol.Value).Distinct().ToList());
            lRole.ForEach(XRole => entities.Where(x => x.IdRol.HasValue).Where(x => x.IdRol == XRole.IdRol).ToList().ForEach(y => y.Role = XRole));

            List<ModuleEntity> lModule = ProviderSoftv.Module.GetModule(entities.Where(x => x.IdModule.HasValue).Select(x => x.IdModule.Value).Distinct().ToList());
            lModule.ForEach(XModule => entities.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XModule.IdModule).ToList().ForEach(y => y.Module = XModule));

            return entities ?? new SoftvList<PermisoEntity>();
        }






        /// <summary>
        ///Adds Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public static int MargePermiso(String xml)
        {
            int result = ProviderSoftv.Permiso.MargePermiso(xml);
            return result;
        }

        /// <summary>
        ///Get Permiso
        ///</summary>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public static SoftvList<PermisoEntity> GetXml(String xml)
        {
            SoftvList<PermisoEntity> entities = new SoftvList<PermisoEntity>();
            entities = ProviderSoftv.Permiso.GetXml(xml);
            return entities ?? new SoftvList<PermisoEntity>();
        }















    }

    #region Customs Methods

    #endregion
}
