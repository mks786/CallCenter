
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;
using System.Data.SqlClient;
using SoftvMVC.Controllers;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CLIENTEController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CLIENTEController
    /// File                    : CLIENTEController.cs
    /// Creation date           : 02/05/2016
    /// Creation time           : 06:30 p. m.
    ///</summary>
    public partial class CLIENTEController : BaseController, IDisposable
    {
        private SoftvService.CLIENTEClient proxy = null;
        private SoftvService.ConexionClient proxycon = null;
        public CLIENTEController()
        {


            proxy = new SoftvService.CLIENTEClient();
            proxycon = new SoftvService.ConexionClient();
        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CLIENTE");
            List<ConexionEntity> conexiones = proxycon.GetConexionList();

            ViewData["Conexiones"] = conexiones;
            return View();


        }











        //Nuevas funciones 

        public ActionResult GetClienteByNombre(string Nombre)
        {

            List<CLIENTEEntity> Lista = proxy.GetCLIENTEList().Where(x => x.NOMBRE.Contains(Nombre)).ToList();
            return Json(Lista, JsonRequestBehavior.AllowGet);
        }



        public ActionResult ListaClientes()
        {
            List<CLIENTEEntity> Lista = proxy.GetCLIENTEList().ToList();
            return Json(Lista, JsonRequestBehavior.AllowGet);

        }



        public ActionResult FiltradoMasivo(int idplaza, int idtipser, int tipobusqueda, string contratado, string suspendidos, string cancelados, string temporales, string instalados, string desconectados, string fuera_servicio, string fecha, string finicio, string ftermino, int draw, int start, int length)
        {
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<TipServEntity> lista_servicio = new List<TipServEntity>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(idplaza));
            int recordFiltered = 0;
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {
                if (idtipser == 1)
                {
                    if (tipobusqueda == 1)
                    {
                        comandoSql = new SqlCommand("Select * from View_MasivaTvAnalogica where Status = '" + contratado + "' or Status = '" + suspendidos + "' or Status = '" + cancelados + "' or Status = '" + temporales + "'or Status = '" + instalados + "' or Status = '" + desconectados + "' or Status = '" + fuera_servicio + "'");
                    }
                    else
                    {
                        if (Int32.Parse(fecha) == 1)
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaTvAnalogica where Fecha_Contratacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                        else if (Int32.Parse(fecha) == 2)
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaTvAnalogica where Fecha_Instalacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                        else
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaTvAnalogica where Fecha_Cancelacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                    }
                }
                else if (idtipser == 2)
                {
                    if (tipobusqueda == 1)
                    {
                        comandoSql = new SqlCommand("Select * from View_MasivaNet where Status = '" + contratado + "' or Status = '" + suspendidos + "' or Status = '" + cancelados + "' or Status = '" + temporales + "'or Status = '" + instalados + "' or Status = '" + desconectados + "' or Status = '" + fuera_servicio + "'");
                    }
                    else
                    {
                        if (Int32.Parse(fecha) == 1)
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaNet where Fecha_Contratacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                        else if (Int32.Parse(fecha) == 2)
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaNet where Fecha_Instalacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                        else
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaNet where Fecha_Cancelacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                    }
                }
                else if (idtipser == 3)
                {
                    if (tipobusqueda == 1)
                    {
                        comandoSql = new SqlCommand("Select * from View_MasivaDigital where Status = '" + contratado + "' or Status = '" + suspendidos + "' or Status = '" + cancelados + "' or Status = '" + temporales + "'or Status = '" + instalados + "' or Status = '" + desconectados + "' or Status = '" + fuera_servicio + "'");
                    }
                    else
                    {
                        if (Int32.Parse(fecha) == 1)
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaDigital where Fecha_Contratacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                        else if (Int32.Parse(fecha) == 2)
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaDigital where Fecha_Instalacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                        else
                        {
                            comandoSql = new SqlCommand("Select * from View_MasivaDigital where Fecha_Cancelacion BETWEEN '" + finicio + "' AND '" + ftermino + "'");
                        }
                    }
                }
                else
                {
                    comandoSql = new SqlCommand("Select * from View_MasivaTvAnalogica");
                }

                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        CLIENTEEntity2 cliente = new CLIENTEEntity2();
                        cliente.CONTRATO = Int32.Parse(reader[0].ToString());
                        cliente.NOMBRE = reader[1].ToString();
                        cliente.TELEFONO = reader[2].ToString();
                        cliente.CELULAR = reader[3].ToString();
                        cliente.Calle = reader[4].ToString();
                        cliente.Colonia = reader[6].ToString();
                        cliente.NUMERO = reader[5].ToString();
                        cliente.Ciudad = reader[7].ToString();
                        lista.Add(cliente);
                    }
                }
            }
            catch { }
            recordFiltered = lista.Count;

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            dataTableData.data = lista.Skip(start).Take(length).ToList();
            dataTableData.recordsFiltered = recordFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetList(int plaza, string contrato, string cliente, string direccion, int draw, int start, int length)
        {
            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            dataTableData.data = FiltrarContenido(plaza, contrato, cliente, direccion, ref recordsFiltered, start, length);
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }




        private List<CLIENTEEntity2> FiltrarContenido(int plaza, string contrato, string cliente, string direccion, ref int recordFiltered, int start, int length)
        {
            recordFiltered = GetClientesporPlaza(plaza, contrato, cliente, direccion).Count;
            int rango = start + length;
            return GetClientesporPlaza(plaza, contrato, cliente, direccion).Skip(start).Take(length).ToList();
        }



        public ActionResult DetalleCliente(int id, string contrato)
        {
            List<CLIENTEEntity2> LISTA = GetClientesporPlaza(id, contrato, "", "");
            return Json(LISTA, JsonRequestBehavior.AllowGet);
        }


        public ActionResult GetClientesporPlazaJson(int id, string contrato, string cliente1, string direccion)
        {
            List<CLIENTEEntity2> lista = GetClientesporPlaza(id, contrato, cliente1, direccion);

            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetClientesPRUEBA(int IdPlaza, string contrato, string Nombrecliente, string ciudad, string colonia, string calle, string numero, string filtro)
        {

            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                if (contrato != "")
                {
                    comandoSql = new SqlCommand("Select * from [dbo].[View_BusquedaIndividual] where Contrato=" + contrato);
                }
                else if (Nombrecliente != "")
                {
                    comandoSql = new SqlCommand("Select * from [dbo].[View_BusquedaIndividual] where Nombre like '%" + Nombrecliente + "%' ");
                }
                else if (ciudad != "")
                {
                    comandoSql = new SqlCommand("Select * from [dbo].[View_BusquedaIndividual] where Ciudad like '%" + ciudad + "%' and Colonia like '%" + colonia + "%' and Calle  like'%" + calle + "%' and Numero like '%" + numero + "%'");
                }
                else
                {
                    comandoSql = new SqlCommand("Select * from [dbo].[View_BusquedaIndividual]");
                }


                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        CLIENTEEntity2 cliente = new CLIENTEEntity2();
                        cliente.CONTRATO = Int32.Parse(reader[0].ToString());
                        cliente.NOMBRE = reader[1].ToString();
                        cliente.TELEFONO = reader[2].ToString();
                        cliente.CELULAR = reader[3].ToString();
                        cliente.Calle = reader[4].ToString();
                        cliente.Colonia = reader[6].ToString();
                        cliente.NUMERO = reader[5].ToString();
                        cliente.Ciudad = reader[7].ToString();
                        lista.Add(cliente);
                    }
                }
            }
            catch { }

            lista = lista.Where(o => o.Ciudad == filtro).Take(15).ToList();

            
            return Json(lista, JsonRequestBehavior.AllowGet);

        }

        //public class DataTableDataClientes
        //{
        //    public int draw { get; set; }
        //    public int recordsTotal { get; set; }
        //    public int recordsFiltered { get; set; }
        //    public List<CLIENTEEntity2> data { get; set; }
        //}
        //public ActionResult GetClientesCiudad(int IdPlaza, int contrato, string Nombrecliente, string ciudad, string colonia, string calle, string numero, int draw, ref int recordFiltered, int start, int length)
        //{

        //    ConexionController c = new ConexionController();
        //    SqlCommand comandoSql;
        //    List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
        //    SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
        //    int total = 0;
        //    try
        //    {
        //        conexionSQL.Open();
        //    }
        //    catch
        //    { }

        //    try
        //    {
        //        comandoSql = new SqlCommand("Select * from [dbo].[View_BusquedaIndividual]");
        //        comandoSql.Connection = conexionSQL;
        //        SqlDataReader reader = comandoSql.ExecuteReader();
        //        if (reader.HasRows)
        //        {
        //            while (reader.Read())
        //            {
        //                CLIENTEEntity2 cliente = new CLIENTEEntity2();
        //                cliente.CONTRATO = Int32.Parse(reader[0].ToString());
        //                cliente.NOMBRE = reader[1].ToString();
        //                cliente.TELEFONO = reader[2].ToString();
        //                cliente.CELULAR = reader[3].ToString();
        //                cliente.Calle = reader[4].ToString();
        //                cliente.Colonia = reader[6].ToString();
        //                cliente.NUMERO = reader[5].ToString();
        //                cliente.Ciudad = reader[7].ToString();
        //                lista.Add(cliente);
        //            }
        //        }
        //    }
        //    catch { }
        //    if(contrato > 0){
        //        lista = lista.Where(o => o.Ciudad == ciudad && o.CONTRATO == contrato).Skip(start).Take(length).ToList();
        //        total = lista.Where(o => o.Ciudad == ciudad && o.CONTRATO == contrato).Count();
        //    }
        //    else if (Nombrecliente != null && Nombrecliente != "")
        //    {
        //        lista = lista.Where(o => o.Ciudad == ciudad && o.NOMBRE.ToLower().Contains(Nombrecliente.ToLower())).Skip(start).Take(length).ToList();
        //        total = lista.Where(o => o.Ciudad == ciudad && o.NOMBRE.ToLower().Contains(Nombrecliente.ToLower())).Count();
        //    }
        //    else if (colonia != null && colonia != "")
        //    {
        //        lista = lista.Where(o => o.Ciudad == ciudad && o.NOMBRE.ToLower().Contains(Nombrecliente.ToLower()) && o.Colonia.ToLower().Contains(colonia.ToLower()) && o.Calle.ToLower().Contains(calle.ToLower()) && o.NUMERO.ToLower().Contains(numero.ToLower())).Skip(start).Take(length).ToList();
        //        total = lista.Where(o => o.Ciudad == ciudad && o.NOMBRE.ToLower().Contains(Nombrecliente.ToLower()) && o.Colonia.ToLower().Contains(colonia.ToLower()) && o.Calle.ToLower().Contains(calle.ToLower()) && o.NUMERO.ToLower().Contains(numero.ToLower())).Count();
        //    }
        //    else
        //    {
        //        lista = lista.Where(o => o.Ciudad == ciudad).Skip(start).Take(length).ToList();
        //        total = lista.Where(o => o.Ciudad == ciudad).Count();
        //    }
            
        //    DataTableData dataTableData = new DataTableData();
        //    dataTableData.draw = draw;
        //    dataTableData.recordsTotal = 0;
        //    dataTableData.data = lista;
        //    dataTableData.recordsFiltered = total;

        //    return Json(dataTableData, JsonRequestBehavior.AllowGet);

        //}

        public ActionResult GetClientesLlamada(int IdPlaza, string contrato, string Nombrecliente, string ciudad, string colonia, string calle, string numero,int servicio,string filtro)
        {

            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            IList<ClientesFiltrado> TestList = null;
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                if (contrato != null)
                {
                    TestList = Dapper.SqlMapper.Query<ClientesFiltrado>(
                                conexionSQL, "exec ConsultaClientesTipServ " + servicio).Where(o => o.CONTRATO == Int32.Parse(contrato)).ToList();
                }
                else if (Nombrecliente != null)
                {
                    TestList = Dapper.SqlMapper.Query<ClientesFiltrado>(
                                conexionSQL, "exec ConsultaClientesTipServ " + servicio).Where(o => o.Nombre.ToUpper().Contains(Nombrecliente.ToUpper())).ToList();
                }
                else if (ciudad != "")
                {
                    TestList = Dapper.SqlMapper.Query<ClientesFiltrado>(
                                conexionSQL, "exec ConsultaClientesTipServ " + servicio).Where(o => o.Ciudad.ToUpper() == ciudad.ToUpper() && o.Colonia.ToUpper() == colonia.ToUpper() && o.calle.ToUpper() == calle.ToUpper() && o.Numero == numero).ToList();
                }
                else
                {
                    TestList = Dapper.SqlMapper.Query<ClientesFiltrado>(
                               conexionSQL, "exec ConsultaClientesTipServ " + servicio).ToList();
                }


                
            }
            catch { }
            TestList = TestList.Where(o => o.Ciudad == filtro).Take(10).ToList();
            return Json(TestList, JsonRequestBehavior.AllowGet);

        }
        public class ClientesFiltrado
        {
            public int CONTRATO { get; set; }
            public string Nombre { get; set; }
            public string Telefono { get; set; }
            public string Celular { get; set; }
            public string calle { get; set; }
            public string Numero { get; set; }
            public string Colonia { get; set; }
            public string Ciudad { get; set; }
            public string STATUS { get; set; }
        }
        public ActionResult getNombreCliente(int IdPlaza, int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<clientes_apellidos> lista_cliente = new List<clientes_apellidos>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {

                comandoSql = new SqlCommand("Select * from [dbo].[Clientes_Apellidos] where Contrato = '" + contrato + "'");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        clientes_apellidos cliente = new clientes_apellidos();
                        cliente.nombre = reader[1].ToString();
                        cliente.segundonombre = reader[2].ToString();
                        cliente.apaterno = reader[3].ToString();
                        cliente.amaterno = reader[4].ToString();
                        cliente.fnacimiento = reader[5].ToString();
                        lista_cliente.Add(cliente);
                    }
                }
            }
            catch { }
            return Json(lista_cliente, JsonRequestBehavior.AllowGet);
        }

        public class clientes_apellidos
        {
            public string nombre { get; set; }
            public string segundonombre { get; set; }

            public string apaterno { get; set; }
            public string amaterno { get; set; }

            public string fnacimiento { get; set; }
        }

        public ActionResult getTipoServicio(int IdPlaza)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<TipServEntity> lista_servicio = new List<TipServEntity>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {

                comandoSql = new SqlCommand("select * from TipServ where Habilitar=0");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        TipServEntity servicio = new TipServEntity();
                        servicio.Clv_TipSer = Int32.Parse(reader[0].ToString());
                        servicio.Concepto = reader[1].ToString();
                        lista_servicio.Add(servicio);
                    }
                }
            }
            catch { }
            return Json(lista_servicio, JsonRequestBehavior.AllowGet);
        }

        public List<CLIENTEEntity2> GetClientesporPlaza(int id, string contrato, string cliente1, string direccion)
        {

            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(id));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            if (contrato != "")
            {
                comandoSql = new SqlCommand("select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad where x1.contrato=" + contrato);
            }
            else if (cliente1 != "")
            {
                comandoSql = new SqlCommand(" select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad where x1.Nombre like '%" + cliente1 + "%' ");
            }
            else if (direccion != "")
            {
                comandoSql = new SqlCommand("select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad where x2.Nombre like '%" + direccion + "%'");
            }
            else
            {
                comandoSql = new SqlCommand("select * from CLIENTES x1 join CALLES x2 on x1.Clv_Calle=x2.Clv_Calle JOIN COLONIAS X3 ON X3.Clv_Colonia=x1.Clv_Colonia JOIN CIUDADES X4 ON X4.Clv_Ciudad=x1.Clv_Ciudad");
            }

            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    CLIENTEEntity2 cliente = new CLIENTEEntity2();
                    cliente.CONTRATO = Int32.Parse(reader[0].ToString());
                    cliente.NOMBRE = reader[1].ToString();
                    cliente.Clv_Calle = Int32.Parse(reader[2].ToString());
                    cliente.NUMERO = reader[3].ToString();
                    cliente.ENTRECALLES = reader[4].ToString();
                    cliente.Clv_Colonia = Int32.Parse(reader[5].ToString());
                    cliente.CodigoPostal = reader[6].ToString();
                    cliente.TELEFONO = reader[7].ToString();
                    cliente.CELULAR = reader[8].ToString();

                    cliente.DESGLOSA_Iva = bool.Parse(reader[9].ToString());
                    cliente.SoloInternet = bool.Parse(reader[10].ToString());
                    cliente.eshotel = bool.Parse(reader[11].ToString());
                    cliente.Clv_Ciudad = Int32.Parse(reader[12].ToString());
                    cliente.Email = reader[13].ToString();
                    try
                    {
                        cliente.clv_sector = Int32.Parse(reader[14].ToString());
                    }catch{
                        cliente.clv_sector = 0;
                    }
                    
                    cliente.Clv_Periodo = Int32.Parse(reader[15].ToString());
                    //cliente.Clv_Tap = Int32.Parse(reader[16].ToString());
                    cliente.Zona2 = bool.Parse(reader[17].ToString());
                    cliente.conexion = id;
                    cliente.Calle = reader[19].ToString();
                    cliente.Colonia = reader[21].ToString();
                    cliente.Ciudad = reader[23].ToString();

                    lista.Add(cliente);

                }
            }
            return lista;
        }


        public ActionResult GetDetalleFiscal(int contrato, int plaza)
        {

            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            DatoFiscalEntity datos = new DatoFiscalEntity();
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            comandoSql = new SqlCommand("exec ConsultarDatosFiscales " + contrato);


            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {

                    datos.Contrato = Int32.Parse(reader[0].ToString());
                    datos.RAZON_SOCIAL = reader[2].ToString();
                    datos.RFC = reader[3].ToString();
                    datos.CALLE_RS = reader[4].ToString();
                    datos.NUMERO_RS = reader[5].ToString();
                    datos.ENTRECALLES = reader[6].ToString();
                    datos.COLONIA_RS = reader[7].ToString();
                    datos.CIUDAD_RS = reader[8].ToString();
                    datos.ESTADO_RS = reader[9].ToString();
                    datos.CP_RS = reader[10].ToString();
                    datos.TELEFONO_RS = reader[11].ToString();
                    datos.FAX_RS = reader[12].ToString();
                    datos.IDENTIFICADOR = Int32.Parse(reader[14].ToString());
                    datos.CURP = reader[15].ToString();
                    datos.id_asociado = Int32.Parse(reader[16].ToString());
                    datos.Email = reader[17].ToString();
                    datos.Pais = reader[18].ToString();

                }
            }

            return Json(datos, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetClientesPorCoincidencia(int conexion)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<CLIENTEEntity2> lista = new List<CLIENTEEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(conexion));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            comandoSql = new SqlCommand("SELECT * FROM CLIENTES");
            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    CLIENTEEntity2 cliente = new CLIENTEEntity2();
                    cliente.CONTRATO = Int32.Parse(reader[0].ToString());
                    cliente.NOMBRE = reader[1].ToString();
                    cliente.Clv_Calle = Int32.Parse(reader[2].ToString());
                    cliente.NUMERO = reader[3].ToString();
                    cliente.ENTRECALLES = reader[4].ToString();
                    cliente.Clv_Colonia = Int32.Parse(reader[5].ToString());
                    cliente.CodigoPostal = reader[6].ToString();
                    cliente.TELEFONO = reader[7].ToString();
                    cliente.CELULAR = reader[8].ToString();

                    cliente.DESGLOSA_Iva = bool.Parse(reader[9].ToString());
                    cliente.SoloInternet = bool.Parse(reader[10].ToString());
                    cliente.eshotel = bool.Parse(reader[11].ToString());
                    cliente.Clv_Ciudad = Int32.Parse(reader[12].ToString());
                    cliente.Email = reader[13].ToString();
                    cliente.clv_sector = Int32.Parse(reader[14].ToString());
                    cliente.Clv_Periodo = Int32.Parse(reader[15].ToString());
                    cliente.Clv_Tap = Int32.Parse(reader[16].ToString());
                    cliente.Zona2 = bool.Parse(reader[17].ToString());
                    cliente.conexion = conexion;
                    lista.Add(cliente);

                }
            }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }


        public ActionResult UpdateCliente(CLIENTEEntity2 cliente, clientes_apellidos clienteNombres)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql2;
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(cliente.conexion));
            int result = 0;
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {
                comandoSql2 = new SqlCommand("UPDATE CLIENTES set Nombre='" + cliente.NOMBRE + "',Clv_Calle='" + cliente.Clv_Calle + "',Numero='" + cliente.NUMERO + "',EntreCalles='" + cliente.ENTRECALLES + "',Clv_Colonia='" + cliente.Clv_Colonia + "',Telefono='" + cliente.TELEFONO + "',Celular='" + cliente.CELULAR + "',Clv_Ciudad='" + cliente.Clv_Ciudad + "',Email='" + cliente.Email + "' where contrato=" + cliente.CONTRATO);
                comandoSql2.Connection = conexionSQL;
                comandoSql2.ExecuteNonQuery();
                result = 1;
            }
            catch { }
            try
            {
                comandoSql2 = new SqlCommand("UPDATE Clientes_Apellidos set Nombre='" + clienteNombres.nombre + "', SegundoNombre='" + clienteNombres.segundonombre + "',Apellido_Paterno='" + clienteNombres.apaterno + "',Apellido_Materno='" + clienteNombres.amaterno + "',FechaNacimiento='" + clienteNombres.fnacimiento + "' where contrato=" + cliente.CONTRATO);
                comandoSql2.Connection = conexionSQL;

                comandoSql2.ExecuteNonQuery();
            }
            catch { }

            return Json(result, JsonRequestBehavior.AllowGet);
        }



        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<CLIENTEEntity2> data { get; set; }
        }

        public class CLIENTEEntity2
        {

            public long? CONTRATO { get; set; }

            public String NOMBRE { get; set; }

            public int? Clv_Calle { get; set; }

            public String NUMERO { get; set; }

            public String ENTRECALLES { get; set; }

            public int? Clv_Colonia { get; set; }

            public String CodigoPostal { get; set; }


            public String TELEFONO { get; set; }

            public String CELULAR { get; set; }

            public bool? DESGLOSA_Iva { get; set; }

            public bool? SoloInternet { get; set; }

            public bool? eshotel { get; set; }

            public int? Clv_Ciudad { get; set; }

            public String Email { get; set; }

            public int? clv_sector { get; set; }

            public int? Clv_Periodo { get; set; }

            public int? Clv_Tap { get; set; }

            public bool? Zona2 { get; set; }

            public int conexion { get; set; }

            public string Calle { get; set; }

            public string Colonia { get; set; }

            public string Ciudad { get; set; }

        }



    }

}

