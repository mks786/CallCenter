
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using System.Data.SqlClient;
using Globals;
using System.Globalization;
using iTextSharp.text.pdf;
using System.IO;
using iTextSharp.text;
using System.Text;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.LlamadaController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : LlamadaController
    /// File                    : LlamadaController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:37 p. m.
    ///</summary>
    public partial class LlamadaController : BaseController, IDisposable
    {
        private SoftvService.LlamadaClient proxy = null;

        private SoftvService.UsuarioClient proxyUsuario = null;

        private SoftvService.TurnoClient proxyTurnos = null;

        private SoftvService.ConexionClient proxyConexion = null;

        private SoftvService.TrabajoClient proxyTrabajo = null;

        private SoftvService.TipServClient proxyTipServ = null;

        private SoftvService.CLIENTEClient proxyCLIENTE = null;

        private SoftvService.QuejaClient proxyQueja = null;

        private SoftvService.NoClienteClient prxyNoCliente = null;

        private SoftvService.ClasificacionProblemaClient proxyClass = null;
        public LlamadaController()
        {

            proxy = new SoftvService.LlamadaClient();

            proxyUsuario = new SoftvService.UsuarioClient();

            proxyTurnos = new SoftvService.TurnoClient();

            proxyConexion = new SoftvService.ConexionClient();

            proxyTrabajo = new SoftvService.TrabajoClient();

            proxyTipServ = new SoftvService.TipServClient();

            proxyCLIENTE = new SoftvService.CLIENTEClient();

            proxyQueja = new SoftvService.QuejaClient();

            prxyNoCliente = new SoftvService.NoClienteClient();

            proxyClass = new SoftvService.ClasificacionProblemaClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyUsuario = new SoftvService.UsuarioClient();
            if (proxyUsuario != null)
            {
                if (proxyUsuario.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyUsuario.Close();
                }
            }

            proxyTurnos = new SoftvService.TurnoClient();
            if (proxyTurnos != null)
            {
                if (proxyTurnos.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyTurnos.Close();
                }
            }

            proxyConexion = new SoftvService.ConexionClient();
            if (proxyConexion != null)
            {
                if (proxyConexion.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyConexion.Close();
                }
            }

            proxyTrabajo = new SoftvService.TrabajoClient();
            if (proxyTrabajo != null)
            {
                if (proxyTrabajo.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyTrabajo.Close();
                }
            }

            proxyTipServ = new SoftvService.TipServClient();
            if (proxyTipServ != null)
            {
                if (proxyTipServ.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyTipServ.Close();
                }
            }

            proxyCLIENTE = new SoftvService.CLIENTEClient();
            if (proxyCLIENTE != null)
            {
                if (proxyCLIENTE.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyCLIENTE.Close();
                }
            }

            proxyQueja = new SoftvService.QuejaClient();
            if (proxyQueja != null)
            {
                if (proxyQueja.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyQueja.Close();
                }
            }

        }

        string conexion = "Data Source=192.168.1.230;Initial Catalog=Encuestas;User ID =sa;Password=0601x-2L;";
        //string conexion = "Data Source=FABIAN-PC\\INSTANCIASQL2014;Initial Catalog=Encuestas;User ID =sa;Password=0601x-2Ñ;";

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Llamada");
            //ViewData["Title"] = "Llamada";
            //ViewData["Message"] = "Llamada";
            //int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            //int pageNumber = (page ?? 1);
            //SoftvList<LlamadaEntity> listResult = proxy.GetLlamadaPagedListXml(pageNumber, pSize, SerializeTool.Serialize<LlamadaEntity>(new LlamadaEntity()));


            //List<UsuarioEntity> lstUsuario = new List<UsuarioEntity>();
            //lstUsuario.Add(new UsuarioEntity() { IdUsuario = null, Nombre = "Todos" });
            //lstUsuario.AddRange(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()));
            //ViewBag.IdUsuariotxt = new SelectList(lstUsuario, "IdUsuario", "Nombre");

            //List<TurnoEntity> lstTurnos = new List<TurnoEntity>();
            //lstTurnos.Add(new TurnoEntity() { IdTurno = null, Turno = "Todos" });
            //lstTurnos.AddRange(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()));
            //ViewBag.IdTurnotxt = new SelectList(lstTurnos, "IdTurno", "Turno");

            //List<ConexionEntity> lstConexion = new List<ConexionEntity>();
            //lstConexion.Add(new ConexionEntity() { IdConexion = null, Plaza = "Todos" });
            //lstConexion.AddRange(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()));
            //ViewBag.IdConexiontxt = new SelectList(lstConexion, "IdConexion", "Plaza");

            //List<TrabajoEntity> lstTrabajo = new List<TrabajoEntity>();
            //lstTrabajo.Add(new TrabajoEntity() { Clv_Trabajo = null, TRABAJO = "Todos" });
            //lstTrabajo.AddRange(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()));
            //ViewBag.Clv_Trabajotxt = new SelectList(lstTrabajo, "Clv_Trabajo", "TRABAJO");

            //List<TipServEntity> lstTipServ = new List<TipServEntity>();
            //lstTipServ.Add(new TipServEntity() { Clv_TipSer = null, Concepto = "Todos" });
            //lstTipServ.AddRange(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()));
            //ViewBag.Clv_TipSertxt = new SelectList(lstTipServ, "Clv_TipSer", "Concepto");

            //List<CLIENTEEntity> lstCLIENTE = new List<CLIENTEEntity>();
            //lstCLIENTE.Add(new CLIENTEEntity() { CONTRATO = null, NOMBRE = "Todos" });
            //lstCLIENTE.AddRange(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()));
            //ViewBag.Contratotxt = new SelectList(lstCLIENTE, "Contrato", "NOMBRE");

            //List<QuejaEntity> lstQueja = new List<QuejaEntity>();
            //lstQueja.Add(new QuejaEntity() { Clv_Queja = null, Problema = "Todos" });
            //lstQueja.AddRange(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()));
            //ViewBag.Clv_Quejatxt = new SelectList(lstQueja, "Clv_Queja", "Problema");

            //CheckNotify();
            //ViewBag.CustomScriptsDefault = BuildScriptsDefault("Llamada");
            return View();
        }

        public ActionResult Details(int id = 0)
        {
            LlamadaEntity objLlamada = proxy.GetLlamada(id);
            if (objLlamada == null)
            {
                return HttpNotFound();
            }
            return PartialView(objLlamada);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Llamada");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre");

            ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno");

            ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza");

            ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO");

            ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto");

            ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE");

            ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema");

            return View();
        }

        [HttpPost]
        public ActionResult Create(LlamadaEntity objLlamada)
        {
            if (ModelState.IsValid)
            {

                objLlamada.BaseRemoteIp = RemoteIp;
                objLlamada.BaseIdUser = LoggedUserName;
                int result = proxy.AddLlamada(objLlamada);
                if (result == -1)
                {

                    ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre", objLlamada.IdUsuario);

                    ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno", objLlamada.IdTurno);

                    ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza", objLlamada.IdConexion);

                    ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO", objLlamada.Clv_Trabajo);

                    ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto", objLlamada.Clv_TipSer);

                    ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE", objLlamada.Contrato);

                    ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema", objLlamada.Clv_Queja);

                    AssingMessageScript("El Llamada ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objLlamada);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Llamada en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objLlamada);
        }

        public ActionResult nueva()
        {
            return View("nueva_llamada");
        }
        public ActionResult ReportesLlamadas()
        {
            return View("ReportesLlamadas");
        }
        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Llamada");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            LlamadaEntity objLlamada = proxy.GetLlamada(id);

            ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre");

            ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno");

            ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza");

            ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO");

            ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto");

            ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE");

            ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema");

            if (objLlamada == null)
            {
                return HttpNotFound();
            }
            return View(objLlamada);
        }

        //
        // POST: /Llamada/Edit/5
        [HttpPost]
        public ActionResult Edit(LlamadaEntity objLlamada)
        {
            if (ModelState.IsValid)
            {
                objLlamada.BaseRemoteIp = RemoteIp;
                objLlamada.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateLlamada(objLlamada);
                if (result == -1)
                {
                    LlamadaEntity objLlamadaOld = proxy.GetLlamada(objLlamada.IdLlamada);

                    ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().Where(x => x.IdUsuario == objLlamadaOld.IdUsuario).OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre", objLlamada.IdUsuario);

                    ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().Where(x => x.IdTurno == objLlamadaOld.IdTurno).OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno", objLlamada.IdTurno);

                    ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().Where(x => x.IdConexion == objLlamadaOld.IdConexion).OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza", objLlamada.IdConexion);

                    ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().Where(x => x.Clv_Trabajo == objLlamadaOld.Clv_Trabajo).OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO", objLlamada.Clv_Trabajo);

                    ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().Where(x => x.Clv_TipSer == objLlamadaOld.Clv_TipSer).OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto", objLlamada.Clv_TipSer);

                    ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().Where(x => x.CONTRATO == objLlamadaOld.Contrato).OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE", objLlamada.Contrato);

                    ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().Where(x => x.Clv_Queja == objLlamadaOld.Clv_Queja).OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema", objLlamada.Clv_Queja);

                    AssingMessageScript("El Llamada ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objLlamada);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Llamada se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objLlamada);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? Tipo_Llamada, String Detalle, String Solucion, String Fecha, String HoraInicio, String HoraFin, int? IdUsuario, int? IdTurno, int? IdConexion, int? Clv_Trabajo, int? Clv_TipSer, int? Contrato, int? Clv_Queja)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<LlamadaEntity> listResult = null;
            List<LlamadaEntity> listLlamada = new List<LlamadaEntity>();
            LlamadaEntity objLlamada = new LlamadaEntity();
            LlamadaEntity objGetLlamada = new LlamadaEntity();


            if ((Tipo_Llamada != null))
            {
                objLlamada.Tipo_Llamada = Tipo_Llamada;
            }

            if ((Detalle != null && Detalle.ToString() != ""))
            {
                objLlamada.Detalle = Detalle;
            }

            if ((Solucion != null && Solucion.ToString() != ""))
            {
                objLlamada.Solucion = Solucion;
            }

            if ((Fecha != null && Fecha.ToString() != ""))
            {
                objLlamada.Fecha = Fecha.ToString();
            }

            if ((HoraInicio != null))
            {
                objLlamada.HoraInicio = HoraInicio;
            }

            if ((HoraFin != null))
            {
                objLlamada.HoraFin = HoraFin;
            }

            if ((IdUsuario != null))
            {
                objLlamada.IdUsuario = IdUsuario;
            }

            if ((IdTurno != null))
            {
                objLlamada.IdTurno = IdTurno;
            }

            if ((IdConexion != null))
            {
                objLlamada.IdConexion = IdConexion;
            }

            if ((Clv_Trabajo != null))
            {
                objLlamada.Clv_Trabajo = Clv_Trabajo;
            }

            if ((Clv_TipSer != null))
            {
                objLlamada.Clv_TipSer = Clv_TipSer;
            }

            if ((Contrato != null))
            {
                objLlamada.Contrato = Contrato;
            }

            if ((Clv_Queja != null))
            {
                objLlamada.Clv_Queja = Clv_Queja;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetLlamadaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objLlamada));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetLlamadaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objLlamada));
            }
            listResult.ToList().ForEach(x => listLlamada.Add(x));

            var LlamadaAsIPagedList = new StaticPagedList<LlamadaEntity>(listLlamada, pageNumber, pSize, listResult.totalCount);
            if (LlamadaAsIPagedList.Count > 0)
            {
                return PartialView(LlamadaAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteLlamada(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Llamada Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Llamada No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult GetList(int idplaza, string cadena, int draw, int start, int length)
        {

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordFiltered = 0;
            dataTableData.data = FiltrarContenido(idplaza, cadena, draw, start, length, ref recordFiltered);
            dataTableData.recordsFiltered = recordFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        //private List<LlamadaEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        //{

        //    List<LlamadaEntity> lista = proxy.GetLlamadaList();
        //    recordFiltered = lista.Count;
        //    int rango = start + length;
        //    return lista.Skip(start).Take(length).ToList();
        //}
        public List<LlamadaEntity> FiltrarContenido(int idplaza, string cadena, int draw, int start, int length, ref int recordFiltered)
        {
            List<LlamadaEntity> lista = new List<LlamadaEntity>();
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<LlamadaEntity> lista_servicio = new List<LlamadaEntity>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(idplaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {
                if (cadena != null)
                {
                    comandoSql = new SqlCommand("SELECT * FROM LlamadaUsuario where Contrato=" + cadena + " OR IdLlamada=" + cadena + "  order by IdLlamada DESC ");
                }
                else
                {
                    comandoSql = new SqlCommand("SELECT * FROM LlamadaUsuario order by IdLlamada DESC");
                }

                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        LlamadaEntity llamada = new LlamadaEntity();
                        llamada.IdLlamada = Int32.Parse(reader[0].ToString());
                        llamada.IdUsuario = Int32.Parse(reader[1].ToString());
                        llamada.Tipo_Llamada = Int32.Parse(reader[2].ToString());
                        try
                        {
                            llamada.Contrato = Int32.Parse(reader[3].ToString());
                        }
                        catch
                        {
                            llamada.Contrato = 0;
                        }
                        llamada.Fecha = reader[6].ToString();
                        lista.Add(llamada);
                    }
                }
            }
            catch { }
            recordFiltered = lista.Count;

            return lista.Skip(start).Take(length).ToList();


        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<LlamadaEntity> data { get; set; }
        }

        public ActionResult InsertLlamada(int IdPlaza, llamdaObject llamada)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            //SqlConnection conexionSQL = new SqlConnection("Data Source=192.168.1.230;Initial Catalog=Encuestas;User ID =sa;Password=0601x-2L;");
            SqlConnection conexionSQL = new SqlConnection(conexion);
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(IdPlaza));
            int id_llamada = 0;
            int id_queja = 0;
            try
            {
                conexionSQL.Open();
                conexionSQL2.Open();
            }
            catch
            { }
            try
            {
                if (llamada.tipo_llamada == 1)
                {
                    if (llamada.tipo_llamada_cliente == true)
                    {
                        comandoSql = new SqlCommand("declare @a int exec AddLlamada_Cliente @a OUTPUT," + llamada.usuario + "," + llamada.tipo_llamada + "," + llamada.contrato + ",'" + llamada.fecha + "','" + llamada.motivo + "','','" + llamada.horainicio + "','" + llamada.horatermino + "'," + llamada.IdConexion + "," + llamada.Clv_TipSer + ",0,0," + llamada.tipo_llamada_cliente + ",'" + llamada.ciudad + "','" + llamada.nombre + "','" + llamada.telefono + "','" + llamada.celular + "',0,0," + llamada.tipo_informacion + " select @a");
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteReader();
                    }
                    else
                    {
                        comandoSql = new SqlCommand("declare @a int exec AddLlamada_NoCliente @a OUTPUT," + llamada.tipo_llamada + "," + llamada.usuario + ",'" + llamada.fecha + "','" + llamada.motivo + "','" + llamada.horainicio + "','" + llamada.horatermino + "'," + llamada.IdConexion + "," + llamada.tipo_informacion + "," + llamada.tipo_llamada_cliente + ",'" + llamada.ciudad + "','" + llamada.nombre + "','" + llamada.telefono + "','" + llamada.celular + "' select @a");
                        comandoSql.Connection = conexionSQL;
                        var Id_llamada = Int32.Parse(comandoSql.ExecuteScalar().ToString());

                        comandoSql = new SqlCommand("exec AddNoCliente " + Id_llamada + ",'" + llamada.nombre + "','" + llamada.domicilio + "','" + llamada.celular + "','" + llamada.telefono + "','" + llamada.email + "'");
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteReader();
                    }
                }
                else
                {
                    if (llamada.queja == 1)
                    {
                        UsuarioEntity userCurrent = proxyUsuario.GetUsuario(llamada.usuario);
                        comandoSql = new SqlCommand("declare @queja bigint exec AddQueja_and_Cita @queja OUTPUT," + llamada.Clv_TipSer + "," + llamada.contrato + ",'" + llamada.fecha + "','" + llamada.motivo + "','" + llamada.fecha + "'," + llamada.usuario + "," + llamada.IdTurno + ",'" + llamada.comentario + "','" + userCurrent.Usuario + "', '" + llamada.solucion + "'");
                        comandoSql.Connection = conexionSQL2;
                        var Id = Int32.Parse(comandoSql.ExecuteScalar().ToString());
                        id_queja = Id;

                        DateTime today = DateTime.Now;
                        comandoSql = new SqlCommand("INSERT INTO MovSist(Fecha,usuario,contrato,Sistema,Pantalla,control,valorant,valornuevo,clv_ciudad) values(@Fecha,@usuario,@contrato,@Sistema,@Pantalla,@control,@valorant,@valornuevo,@clv_ciudad)");
                        comandoSql.Parameters.AddWithValue("@Fecha", today);
                        comandoSql.Parameters.AddWithValue("@usuario", userCurrent.Usuario);
                        comandoSql.Parameters.AddWithValue("@contrato", llamada.contrato);
                        comandoSql.Parameters.AddWithValue("@Sistema", "CallCenter");
                        comandoSql.Parameters.AddWithValue("@Pantalla", "Llamadas - nueva llamada");
                        comandoSql.Parameters.AddWithValue("@control", "Se Generó una nueva queja");
                        comandoSql.Parameters.AddWithValue("@valorant", "");
                        comandoSql.Parameters.AddWithValue("@valornuevo", "Realizó una queja con el número: " + id_queja);
                        comandoSql.Parameters.AddWithValue("@clv_ciudad", llamada.ciudad);
                        comandoSql.Connection = conexionSQL2;
                        comandoSql.ExecuteNonQuery();

                        comandoSql = new SqlCommand("declare @a int exec AddLlamada_Cliente @a OUTPUT," + llamada.usuario + "," + llamada.tipo_llamada + "," + llamada.contrato + ",'" + llamada.fecha + "','" + llamada.motivo + "','','" + llamada.horainicio + "','" + llamada.horatermino + "'," + llamada.IdConexion + "," + llamada.Clv_TipSer + ",0," + llamada.clas_problema + "," + llamada.tipo_llamada_cliente + ",'" + llamada.ciudad + "','" + llamada.nombre + "','" + llamada.telefono + "','" + llamada.celular + "'," + llamada.IdTurno + "," + id_queja + ",0 select @a");
                        comandoSql.Connection = conexionSQL;
                        id_llamada = Int32.Parse(comandoSql.ExecuteScalar().ToString());

                        comandoSql = new SqlCommand("exec AddRelQuejaProblemaUsuario " + id_queja + "," + id_llamada + "," + Int32.Parse(llamada.clas_problema));
                        comandoSql.Connection = conexionSQL2;
                        comandoSql.ExecuteNonQuery();
                    }
                    else if (llamada.queja == 0)
                    {
                        comandoSql = new SqlCommand("declare @a int exec AddLlamada_Cliente @a OUTPUT," + llamada.usuario + "," + llamada.tipo_llamada + "," + llamada.contrato + ",'" + llamada.fecha + "','" + llamada.motivo + "','" + llamada.solucion + "','" + llamada.horainicio + "','" + llamada.horatermino + "'," + llamada.IdConexion + "," + llamada.Clv_TipSer + "," + llamada.clas_solucion + "," + llamada.clas_problema + "," + llamada.tipo_llamada_cliente + ",'" + llamada.ciudad + "','" + llamada.nombre + "','" + llamada.telefono + "','" + llamada.celular + "',0,0,0 select @a");
                        comandoSql.Connection = conexionSQL;
                        id_llamada = Int32.Parse(comandoSql.ExecuteScalar().ToString());
                        id_queja = 1;
                    }
                }
            }
            catch { }
            if (id_queja > 0 && id_llamada > 0)
            {
                var result = new { reporte = id_llamada, queja = id_queja };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(1, JsonRequestBehavior.AllowGet);
            }



        }

        public class llamdaObject
        {
            public string comentario { get; set; }
            public int tipo_llamada { get; set; }
            public int contrato { get; set; }
            public string clas_problema { get; set; }
            public string solucion { get; set; }
            public string motivo { get; set; }
            public string clas_solucion { get; set; }
            public int queja { get; set; }
            public int usuario { get; set; }
            public string fecha { get; set; }
            public string horainicio { get; set; }
            public string horatermino { get; set; }
            public int IdTurno { get; set; }
            public int Clv_Trabajo { get; set; }
            public int IdConexion { get; set; }
            public int Clv_TipSer { get; set; }
            public int prioridad { get; set; }
            public string telefono { get; set; }
            public string celular { get; set; }
            public string domicilio { get; set; }
            public string email { get; set; }
            public string nombre { get; set; }
            public bool tipo_llamada_cliente { get; set; }
            public int tipo_informacion { get; set; }
            public int select_motivo { get; set; }
            public string ciudad { get; set; }

        }
        public ActionResult GetIdTrabajo(int IdPlaza, int idServicio)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<trabajo_object> lista = new List<trabajo_object>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("SELECT * FROM Trabajos WHERE Clv_TipSer =" + idServicio + "");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        trabajo_object trabajo = new trabajo_object();
                        trabajo.Clv_Trabajo = Int32.Parse(reader[0].ToString());
                        trabajo.Descripcion = reader[3].ToString();
                        lista.Add(trabajo);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

        public class trabajo_object
        {
            public int Clv_Trabajo { get; set; }
            public string Descripcion { get; set; }

        }


        public ActionResult GetMotivoLlamada(int IdPlaza)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<motivo_llamada> lista = new List<motivo_llamada>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("select * from MotAtenTel");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        motivo_llamada motivo = new motivo_llamada();
                        motivo.Clv_Motivo = Int32.Parse(reader[0].ToString());
                        motivo.Descripcion = reader[1].ToString();
                        lista.Add(motivo);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

        public class motivo_llamada
        {
            public int Clv_Motivo { get; set; }
            public string Descripcion { get; set; }
        }

        public ActionResult getOneCall(int plaza, int id_llamada)
        {

            LlamadaEntity llamada = proxy.GetLlamada(id_llamada);//trae la llamada por medio del id
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<detalleLlamada> lista = new List<detalleLlamada>();
            UsuarioEntity usuario = proxyUsuario.GetUsuario(llamada.IdUsuario);
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                if (llamada.Contrato != null)
                {
                    comandoSql = new SqlCommand("SELECT * FROM CLIENTES WHERE CONTRATO =" + llamada.Contrato);
                    comandoSql.Connection = conexionSQL;
                    SqlDataReader reader = comandoSql.ExecuteReader();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            detalleLlamada llamada_detalles = new detalleLlamada();
                            llamada_detalles.IdLlamada = llamada.IdLlamada.ToString();
                            llamada_detalles.Tipo_Llamada = llamada.Tipo_Llamada.ToString();
                            llamada_detalles.Contrato = llamada.Contrato.ToString();
                            llamada_detalles.nombre = reader[1].ToString();//solo nos traemos el nombre del cliente
                            llamada_detalles.IdTurno = llamada.IdTurno.ToString();
                            llamada_detalles.Clv_Queja = llamada.Clv_Queja.ToString();
                            llamada_detalles.Clv_Trabajo = llamada.Clv_Trabajo.ToString();
                            llamada_detalles.Clv_TipSer = llamada.Clv_TipSer.ToString();
                            llamada_detalles.Clv_Problema = llamada.Clv_Problema.ToString();
                            llamada_detalles.Fecha = llamada.Fecha;
                            llamada_detalles.Detalle = llamada.Detalle;
                            llamada_detalles.Solucion = llamada.Solucion;
                            llamada_detalles.HoraInicio = llamada.HoraInicio;
                            llamada_detalles.HoraFin = llamada.HoraFin;
                            llamada_detalles.SiEsCliente = llamada.SiEsCliente;
                            llamada_detalles.Clv_Motivo = llamada.Clv_Motivo;
                            llamada_detalles.atendio = usuario.Nombre;
                            lista.Add(llamada_detalles);
                        }
                        reader.Close();
                    }
                }
                else
                {
                    List<NoClienteEntity> nocliente = prxyNoCliente.GetNoClienteList();
                    foreach (var item in nocliente)
                    {
                        if (item.IdLlamada == llamada.IdLlamada)
                        {
                            detalleLlamada llamada_detalles = new detalleLlamada();
                            llamada_detalles.IdLlamada = llamada.IdLlamada.ToString();
                            llamada_detalles.Tipo_Llamada = llamada.Tipo_Llamada.ToString();
                            llamada_detalles.Contrato = llamada.Contrato.ToString();
                            llamada_detalles.nombre = item.Nombre;
                            llamada_detalles.domicilio = item.Direccion;
                            llamada_detalles.telefono = item.Telefono;
                            llamada_detalles.celular = item.Celular;
                            llamada_detalles.email = item.Email;
                            llamada_detalles.IdTurno = llamada.IdTurno.ToString();
                            llamada_detalles.Clv_Queja = llamada.Clv_Queja.ToString();
                            llamada_detalles.Clv_Trabajo = llamada.Clv_Trabajo.ToString();
                            llamada_detalles.Clv_TipSer = llamada.Clv_TipSer.ToString();
                            llamada_detalles.Clv_Problema = llamada.Clv_Problema.ToString();
                            llamada_detalles.Fecha = llamada.Fecha;
                            llamada_detalles.Detalle = llamada.Detalle;
                            llamada_detalles.Solucion = llamada.Solucion;
                            llamada_detalles.HoraInicio = llamada.HoraInicio;
                            llamada_detalles.HoraFin = llamada.HoraFin;
                            llamada_detalles.SiEsCliente = llamada.SiEsCliente;
                            llamada_detalles.Clv_Motivo = llamada.Clv_Motivo;
                            llamada_detalles.MotivoLlamada = item.MotivoLlamada;
                            llamada_detalles.atendio = usuario.Nombre;
                            lista.Add(llamada_detalles);
                        }
                    }
                }


            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class detalleLlamada
        {
            public string Solucion { get; set; }
            public string Detalle { get; set; }
            public string Contrato { get; set; }
            public string Clv_Problema { get; set; }
            public string clas_solucion { get; set; }
            public string IdTurno { get; set; }
            public string nombre { get; set; }
            public string domicilio { get; set; }
            public string telefono { get; set; }
            public string celular { get; set; }
            public string email { get; set; }
            public string Fecha { get; set; }
            public string HoraInicio { get; set; }
            public string HoraFin { get; set; }
            public string Clv_Queja { get; set; }
            public string IdLlamada { get; set; }
            public string atendio { get; set; }
            public string Tipo_Llamada { get; set; }
            public string Clv_TipSer { get; set; }
            public string Clv_Trabajo { get; set; }
            public int? Clv_Motivo { get; set; }
            public bool? SiEsCliente { get; set; }
            public int? MotivoLlamada { get; set; }

        }
        public ActionResult getTreeView(int plaza, int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<tree> lista = new List<tree>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("exec dameSerDELCli " + contrato);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        tree tree = new tree();
                        tree.cadena = reader[0].ToString();
                        lista.Add(tree);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class tree
        {
            public string cadena { get; set; }
        }

        public ActionResult getDatosNoCliente(int plaza, int llamada)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<NoCliente> lista = new List<NoCliente>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("SELECT * FROM NoClientes WHERE IdLlamada =" + llamada);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        NoCliente datos = new NoCliente();
                        datos.Nombre = reader[2].ToString();
                        datos.Domicilio = reader[3].ToString();
                        datos.Telefono = reader[4].ToString();
                        datos.Celular = reader[5].ToString();
                        datos.Email = reader[6].ToString();
                        lista.Add(datos);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class NoCliente
        {
            public string Nombre { get; set; }
            public string Domicilio { get; set; }
            public string Telefono { get; set; }
            public string Celular { get; set; }
            public string Email { get; set; }
        }
        public ActionResult getDatosQueja(int plaza, int queja)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<QuejaData> lista = new List<QuejaData>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("SELECT * FROM Quejas WHERE Clv_Queja =" + queja);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        QuejaData datos = new QuejaData();
                        datos.Clv_Trabajo = reader[16].ToString();
                        datos.clvPrioridadQueja = reader[21].ToString();
                        lista.Add(datos);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class QuejaData
        {
            public string Clv_Trabajo { get; set; }
            public string clvPrioridadQueja { get; set; }
        }

        public ActionResult editarLLamada(int plaza, editLlamada llamada)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<editLlamada> lista = new List<editLlamada>();
            SqlConnection conexionSQL = new SqlConnection(conexion);
            //SqlConnection conexionSQL = new SqlConnection("Data Source=FABIAN-PC\\INSTANCIASQL2014;Initial Catalog=Encuestas;User ID =sa;Password=0601x-2Ñ;");
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                if (llamada.tipo_llamada == 1)
                {
                    if (llamada.contrato != null)
                    {
                        comandoSql = new SqlCommand("UPDATE LLamadas SET Detalle ='" + llamada.detalle + "', Clv_Motivo='" + llamada.clv_motivo + "' WHERE IdLlamada=" + llamada.id_llamada);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteNonQuery();
                    }
                    else
                    {
                        comandoSql = new SqlCommand("UPDATE LLamadas SET Detalle ='" + llamada.detalle + "', Clv_Motivo='" + llamada.clv_motivo + "' WHERE IdLlamada=" + llamada.id_llamada);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteNonQuery();
                        comandoSql = new SqlCommand("UPDATE NoClientes SET Nombre ='" + llamada.nombre + "', Direccion='" + llamada.domicilio + "', Telefono='" + llamada.telefono + "', Celular='" + llamada.celular + "', Email='" + llamada.email + "' WHERE IdLlamada=" + llamada.id_llamada);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteNonQuery();
                    }
                }
                else
                {
                    if (llamada.queja != null)
                    {
                        comandoSql = new SqlCommand("UPDATE LLamadas SET Detalle ='" + llamada.detalle + "', Clv_Problema='" + llamada.clas_problema + "' WHERE IdLlamada=" + llamada.id_llamada);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteNonQuery();
                        //comandoSql = new SqlCommand("UPDATE Quejas SET Problema ='" + llamada.detalle + "', Clv_Trabajo=" + llamada.clas_solucion + ", clvPrioridadQueja=" + llamada.prioridad + " WHERE Clv_Queja=" + llamada.queja);
                        //comandoSql.Connection = conexionSQL2;
                        //comandoSql.ExecuteNonQuery();
                    }
                    else
                    {
                        comandoSql = new SqlCommand("UPDATE LLamadas SET Detalle ='" + llamada.detalle + "', Clv_Problema='" + llamada.clas_problema + "', Solucion='" + llamada.solucion + "', Clv_Trabajo='" + llamada.clas_solucion + "' WHERE IdLlamada=" + llamada.id_llamada);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteNonQuery();
                    }
                }


            }

            catch { }
            return Json(llamada.id_llamada, JsonRequestBehavior.AllowGet);
        }
        public class editLlamada
        {
            public string solucion { get; set; }
            public string detalle { get; set; }
            public string contrato { get; set; }
            public string clas_problema { get; set; }
            public string clas_solucion { get; set; }
            public string prioridad { get; set; }
            public string turno { get; set; }
            public string nombre { get; set; }
            public string domicilio { get; set; }
            public string telefono { get; set; }
            public string celular { get; set; }
            public string email { get; set; }
            public string queja { get; set; }
            public int id_llamada { get; set; }
            public int clv_motivo { get; set; }
            public int MotivoLlamada { get; set; }
            public int tipo_llamada { get; set; }
        }

        public ActionResult TipoLlamada()
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<objTipoLlamada> lista = new List<objTipoLlamada>();
            // SqlConnection conexionSQL = new SqlConnection("Data Source=192.168.1.230;Initial Catalog=Encuestas;User ID =sa;Password=0601x-2L;");
            SqlConnection conexionSQL = new SqlConnection(conexion);
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("select * from MotAtenTel");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        objTipoLlamada datos = new objTipoLlamada();
                        datos.clv_motivo = Int32.Parse(reader[0].ToString());
                        datos.descricpion = reader[1].ToString();
                        lista.Add(datos);
                    }
                }

            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class objTipoLlamada
        {
            public int clv_motivo { get; set; }
            public string descricpion { get; set; }
        }


        public ActionResult HistorialPago(int plaza, int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(plaza));
            List<HistorialPagos> lista = new List<HistorialPagos>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec BUSCAFACTURAS 13,0,'','01/01/1900'," + contrato + ",'',''");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        HistorialPagos datos = new HistorialPagos();
                        datos.clv_Factura = Int32.Parse(reader[0].ToString());
                        datos.Serie = reader[1].ToString();
                        datos.Folio = Int32.Parse(reader[2].ToString());
                        datos.Fecha = reader[3].ToString();
                        datos.Importe = float.Parse(reader[6].ToString());
                        datos.Status = reader[8].ToString();
                        lista.Add(datos);
                    }
                }
            }
            catch
            { }
            return Json(lista, JsonRequestBehavior.AllowGet);

        }


        public class HistorialPagos
        {
            public String Serie { get; set; }
            public int Folio { get; set; }
            public String Fecha { get; set; }
            public float Importe { get; set; }
            public String Status { get; set; }
            public int clv_Factura { get; set; }
        }




        public ActionResult HistorialLlamadasL(int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL = new SqlConnection(conexion);
            //SqlConnection conexionSQL = new SqlConnection("Data Source=FABIAN-PC\\INSTANCIASQL2014;Initial Catalog=Encuestas;User ID =sa;Password=0601x-2Ñ;");
            List<HistorialLlamadas> lista = new List<HistorialLlamadas>();
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec ConsultarHistorialLlamadas " + contrato + "");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        HistorialLlamadas datos = new HistorialLlamadas();
                        datos.Fecha = reader[0].ToString();
                        datos.HoraInicial = reader[1].ToString();
                        datos.HoraFinal = reader[2].ToString();
                        datos.Motivo = reader[3].ToString();
                        datos.Solucion = reader[4].ToString();
                        datos.Usuario = reader[5].ToString();
                        lista.Add(datos);
                    }
                }
            }
            catch
            { }
            return Json(lista, JsonRequestBehavior.AllowGet);

        }


        public class HistorialLlamadas
        {
            public String Fecha { get; set; }
            public String HoraInicial { get; set; }
            public String HoraFinal { get; set; }
            public String Motivo { get; set; }
            public String Solucion { get; set; }
            public String Usuario { get; set; }
        }



        public ActionResult HistorialQuejasL(int plaza, int contrato, int filtro)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(plaza));
            List<HistorialQuejas> lista = new List<HistorialQuejas>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                if (filtro > 0)
                {
                    comandoSql = new SqlCommand("exec HistorialQuejas " + contrato + ", " + filtro + "");
                    comandoSql.Connection = conexionSQL2;
                }
                else
                {
                    comandoSql = new SqlCommand("exec HistorialQuejas " + contrato + ", 4");
                    comandoSql.Connection = conexionSQL2;
                }

                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        HistorialQuejas datos = new HistorialQuejas();
                        datos.Queja = reader[0].ToString();
                        datos.Status = reader[1].ToString();
                        datos.Contrato = Int64.Parse(reader[2].ToString());
                        datos.Nombre = reader[3].ToString();
                        datos.Calle = reader[4].ToString();
                        datos.Numero = reader[5].ToString();
                        datos.TipSer = reader[6].ToString();
                        lista.Add(datos);
                    }
                }
            }
            catch
            { }
            return Json(lista, JsonRequestBehavior.AllowGet);

        }


        public class HistorialQuejas
        {
            public String Queja { get; set; }
            public String Status { get; set; }
            public long Contrato { get; set; }
            public String Nombre { get; set; }
            public String Calle { get; set; }
            public String Numero { get; set; }
            public String TipSer { get; set; }
        }



        public ActionResult ConsultarPagos(int plaza, int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(plaza));
            List<ConsultarPago> lista = new List<ConsultarPago>();
            List<ConsultarPagoL> listaa = new List<ConsultarPagoL>();
            List<pagos_lista> lista_arreglo = new List<pagos_lista>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec ConsultaCobro " + contrato + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        ConsultarPago datos = new ConsultarPago();
                        datos.Aparato = reader[0].ToString();
                        datos.Concepto = reader[1].ToString();
                        datos.PagoAde = reader[2].ToString();
                        datos.TVExt = Int32.Parse(reader[3].ToString());
                        datos.MesesCor = Int32.Parse(reader[4].ToString());
                        datos.MesesPa = Int32.Parse(reader[5].ToString());
                        datos.Importe = float.Parse(reader[6].ToString());
                        datos.PeriodoPI = reader[7].ToString();
                        datos.PeriodoPF = reader[8].ToString();
                        datos.PuntosAPO = Int32.Parse(reader[9].ToString());
                        datos.PuntosAPA = Int32.Parse(reader[10].ToString());
                        datos.PuntosAPAde = Int32.Parse(reader[11].ToString());
                        datos.PuntosCombo = Int32.Parse(reader[12].ToString());
                        datos.PuntosPPE = Int32.Parse(reader[13].ToString());
                        datos.ImporteBoni = float.Parse(reader[14].ToString());
                        lista.Add(datos);
                    }
                    if (reader.NextResult()) //tabla2 Sucursal
                    {
                        while (reader.Read())
                        {
                            ConsultarPagoL datoss = new ConsultarPagoL();
                            datoss.Descripcion = reader[0].ToString();
                            datoss.Total = float.Parse(reader[1].ToString());
                            listaa.Add(datoss);
                        }
                    }

                }
                pagos_lista i = new pagos_lista();
                i.pagos = lista;
                i.pagosl = listaa;
                lista_arreglo.Add(i);
            }
            catch
            { }
            return Json(lista_arreglo, JsonRequestBehavior.AllowGet);

        }
        public class pagos_lista
        {
            public List<ConsultarPago> pagos { get; set; }
            public List<ConsultarPagoL> pagosl { get; set; }
        }

        public class ConsultarPago
        {
            public String Aparato { get; set; }
            public String Concepto { get; set; }
            public String PagoAde { get; set; }
            public int TVExt { get; set; }
            public int MesesCor { get; set; }
            public int MesesPa { get; set; }
            public float Importe { get; set; }
            public String PeriodoPI { get; set; }
            public String PeriodoPF { get; set; }
            public int PuntosAPO { get; set; }
            public int PuntosAPA { get; set; }
            public int PuntosAPAde { get; set; }
            public int PuntosCombo { get; set; }
            public int PuntosPPE { get; set; }
            public float ImporteBoni { get; set; }
        }

        public class ConsultarPagoL
        {
            public String Descripcion { get; set; }
            public float Total { get; set; }
        }

        public ActionResult TieneQueja(int id_plaza, int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(id_plaza));
            List<SiTieneQueja> lista = new List<SiTieneQueja>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("SELECT * FROM Quejas WHERE Contrato = " + contrato + " AND Status = 'P'");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        SiTieneQueja queja = new SiTieneQueja();
                        queja.Clv_Queja = Int32.Parse(reader[0].ToString());
                        queja.Fecha = reader[3].ToString();
                        lista.Add(queja);
                    }
                }
            }
            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

        public class SiTieneQueja
        {
            public int Clv_Queja { get; set; }
            public String Fecha { get; set; }
        }

        public ActionResult GetTicket(int plaza, int clv_factura, int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(plaza));
            List<datosTicket> lista = new List<datosTicket>();
            datosTicket ticket = new datosTicket();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec CrearTiket_ConsultaPago " + clv_factura + "," + contrato + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {

                        ticket.nombre_empresa = reader[1].ToString();
                        ticket.direccion_empresa = reader[2].ToString();
                        ticket.colonia_empresa = reader[3].ToString();
                        ticket.ciudad_empresa = reader[4].ToString();
                        ticket.rfc_empresa = reader[5].ToString();

                    }
                    if (reader.NextResult())
                    {
                        while (reader.Read())
                        {
                            ticket.nombre_sucursal = reader[1].ToString();
                        }
                    }
                    if (reader.NextResult())
                    {
                        while (reader.Read())
                        {
                            ticket.calle_sucursal = reader[0].ToString();
                            ticket.numero_sucursal = reader[1].ToString();
                            ticket.colonia_sucursal = reader[2].ToString();
                            ticket.cp_sucursal = reader[3].ToString();
                            ticket.municipio_sucursal = reader[4].ToString();
                            ticket.ciudad_sucursal = reader[5].ToString();
                            ticket.telefono_sucursal = reader[6].ToString();
                        }
                    }
                    if (reader.NextResult())
                    {
                        while (reader.Read())
                        {
                            ticket.serie_factura = reader[2].ToString();
                        }
                    }
                    if (reader.NextResult())
                    {
                        while (reader.Read())
                        {
                            ticket.contrato = Int32.Parse(reader[0].ToString());
                            ticket.nombre_cliente = reader[1].ToString();
                            ticket.nombre_calle = reader[2].ToString();
                            ticket.nombre_numero = reader[3].ToString();
                            ticket.cp_cliente = reader[4].ToString();
                            ticket.colonia_cliente = reader[5].ToString();
                            ticket.ciudad_cliente = reader[6].ToString();
                            ticket.cajero = reader[8].ToString();
                        }
                    }
                    if (reader.NextResult())
                    {
                        while (reader.Read())
                        {
                            ticket.descripcion_servicio = reader[8].ToString();
                            ticket.monto_servicio = reader[9].ToString();
                            ticket.mes = reader[12].ToString() + " " + reader[13].ToString();
                            ticket.puntos = reader[21].ToString();
                        }
                    }
                    if (reader.NextResult())
                    {
                        while (reader.Read())
                        {
                            ticket.cantidad_letra = reader[1].ToString();
                            ticket.total = reader[2].ToString();
                            ticket.cambio = reader[10].ToString();
                            ticket.efectivo = reader[2].ToString();
                        }
                    }
                    if (reader.NextResult())
                    {
                        while (reader.Read())
                        {
                            ticket.proximo_pago = reader[4].ToString();
                        }
                    }
                    lista.Add(ticket);
                }
            }
            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class datosTicket
        {
            public string nombre_empresa { get; set; }
            public string direccion_empresa { get; set; }
            public string colonia_empresa { get; set; }
            public string ciudad_empresa { get; set; }
            public string rfc_empresa { get; set; }
            public string nombre_sucursal { get; set; }
            public string calle_sucursal { get; set; }
            public string colonia_sucursal { get; set; }
            public string cp_sucursal { get; set; }
            public string ciudad_sucursal { get; set; }
            public string municipio_sucursal { get; set; }
            public string telefono_sucursal { get; set; }
            public string numero_sucursal { get; set; }
            public string serie_factura { get; set; }
            public int contrato { get; set; }
            public string nombre_calle { get; set; }
            public string nombre_cliente { get; set; }
            public string nombre_numero { get; set; }
            public string cp_cliente { get; set; }
            public string colonia_cliente { get; set; }
            public string ciudad_cliente { get; set; }
            public string cajero { get; set; }
            public string descripcion_servicio { get; set; }
            public string monto_servicio { get; set; }
            public string mes { get; set; }
            public string anio { get; set; }
            public string puntos { get; set; }
            public string cantidad_letra { get; set; }
            public string total { get; set; }
            public string cambio { get; set; }
            public string efectivo { get; set; }
            public string proximo_pago { get; set; }
        }
        public ActionResult detalleQueja(int id_plaza, int queja)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(id_plaza));
            DetallesQueja lista = new DetallesQueja();
            //List<LlamadaEntity> llamada = proxy.GetLlamadaList().Where(o => o.Clv_Queja == queja).ToList();
            //LlamadaEntity one_llamada = llamada.FirstOrDefault();
            //UsuarioEntity usuario = proxyUsuario.GetUsuario(one_llamada.IdUsuario);
            //ClasificacionProblemaEntity problema = proxyClass.GetClasificacionProblema(one_llamada.Clv_Problema);
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec ConsultarQueja " + queja);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        lista.queja = Int32.Parse(reader[0].ToString());
                        lista.tipo_servicio = reader[1].ToString();
                        lista.contrato = Int32.Parse(reader[2].ToString());
                        lista.status = reader[3].ToString();
                        lista.observaciones = "Procede de una Atención Telefónica Atendio Reporte El Usuario: " + reader[13].ToString();
                        lista.problema = reader[4].ToString();
                        lista.v1 = reader[6].ToString();
                        lista.v2 = reader[7].ToString();
                        lista.v3 = reader[8].ToString();
                        lista.solicitud = reader[9].ToString();
                        lista.ejecucion = reader[10].ToString();
                        lista.usuario_ejecuto = reader[11].ToString();
                        lista.solucion = reader[12].ToString();
                        lista.class_problema = reader[4].ToString();
                        lista.usuario = reader[13].ToString();
                        lista.int_solucion = Int32.Parse(reader[14].ToString());


                    }
                }
                reader.Close();
                comandoSql = new SqlCommand("exec ConsultarTrabajosParaLaSolucion " + lista.int_solucion);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader2 = comandoSql.ExecuteReader();
                if (reader2.HasRows)
                {
                    while (reader2.Read())
                    {
                        lista.clas_solucion = reader2[0].ToString();

                    }
                }
            }
            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class DetallesQueja
        {
            public int queja { get; set; }
            public int contrato { get; set; }
            public string tipo_servicio { get; set; }
            public string status { get; set; }
            public string observaciones { get; set; }
            public string problema { get; set; }
            public string v1 { get; set; }
            public string v2 { get; set; }
            public string v3 { get; set; }
            public string solicitud { get; set; }
            public string ejecucion { get; set; }
            public string usuario { get; set; }
            public string class_problema { get; set; }
            public string usuario_ejecuto { get; set; }
            public string clas_solucion { get; set; }
            public int int_solucion { get; set; }
            public string solucion { get; set; }
        }

        public ActionResult ReporteLLamadas(obj_reporte reporte)
        {
            List<datosReporte> lista = new List<datosReporte>();
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL = new SqlConnection(conexion);
            //SqlConnection conexionSQL = new SqlConnection("Data Source=FABIAN-PC\\INSTANCIASQL2014;Initial Catalog=Encuestas;User ID =sa;Password=0601x-2Ñ;");
            string nombre_archivo = "";
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                int conQueja = 0;
                int sinQueja = 0;
                int ambas = 0;
                if (reporte.queja == 1)
                {
                    conQueja = 1;
                    sinQueja = 0;
                    ambas = 0;
                }
                else if (reporte.queja == 2)
                {
                    conQueja = 0;
                    sinQueja = 1;
                    ambas = 0;
                }
                else
                {
                    conQueja = 0;
                    sinQueja = 0;
                    ambas = 1;
                }
                comandoSql = new SqlCommand("exec ReporteLlamadas " + reporte.plaza + ",'" + reporte.ciudad + "',"+reporte.tipServ+"," + reporte.motivo + "," + conQueja + "," + sinQueja + "," + ambas + "," + reporte.usuario + ",0," + reporte.problema + ",'" + reporte.inicio + "','" + reporte.fin + "'");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader2 = comandoSql.ExecuteReader();
                if (reader2.HasRows)
                {
                    while (reader2.Read())
                    {
                        datosReporte llamada = new datosReporte();
                        llamada.id_llamada = reader2[0].ToString();
                        llamada.contrato = reader2[3].ToString();
                        llamada.usuario = reader2[1].ToString();
                        llamada.tipo_llamada = reader2[2].ToString();
                        llamada.detalle = reader2[4].ToString();
                        llamada.solucion = reader2[5].ToString();
                        DateTime Fecha = DateTime.Parse(reader2[6].ToString());
                        llamada.fecha = Fecha.ToShortDateString();
                        DateTime Inicio = DateTime.Parse(reader2[7].ToString());
                        llamada.inicio = Inicio.ToShortTimeString();
                        DateTime Fin = DateTime.Parse(reader2[8].ToString());
                        llamada.fin = Fin.ToShortTimeString();
                        try
                        {
                            llamada.nombre = reader2[11].ToString();
                        }
                        catch { llamada.nombre = ""; }
                        try { llamada.telefono = reader2[12].ToString(); }
                        catch { llamada.telefono = ""; }
                        try { llamada.celular = reader2[13].ToString(); }
                        catch { llamada.celular = ""; }

                        lista.Add(llamada);

                    }
                }

                if (reader2.HasRows)
                {
                    ConexionEntity plaza = proxyConexion.GetConexion(reporte.plaza);
                    //creamos un documento con un guid y lo guardamos en la carpeta temporal de windows
                    nombre_archivo = Guid.NewGuid().ToString();
                    string fileName = Server.MapPath("/Reportes/") + nombre_archivo + ".pdf";
                    FileStream fs = new FileStream(fileName, FileMode.Create, FileAccess.Write, FileShare.None);
                    Document document = new Document(PageSize.A4.Rotate(), 50, 50, 25, 50);
                    PdfWriter writer = PdfWriter.GetInstance(document, fs);
                    document.Open();

                    iTextSharp.text.Font negritas = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.HELVETICA, 9, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                    iTextSharp.text.Font normal = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.HELVETICA, 7, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
                    //creamos el parrafo de titulo de la enciesra
                    Paragraph titulo = new Paragraph();
                    titulo.Alignment = Element.ALIGN_CENTER;
                    titulo.Font = FontFactory.GetFont("Arial", 20);
                    titulo.Font.SetStyle(Font.BOLD);
                    titulo.Add("Reporte de Llamadas Recibidas");
                    document.Add(titulo);
                    document.Add(new Paragraph("\n"));

                    Paragraph plazap = new Paragraph();
                    plazap.Alignment = Element.ALIGN_CENTER;
                    plazap.Font = FontFactory.GetFont("Arial", 20);
                    plazap.Font.SetStyle(Font.BOLD);
                    if (reporte.ciudad != null && reporte.ciudad != "")
                    {
                        if (reporte.ciudad == "Todas las Ciudades")
                        {
                            plazap.Add(reporte.ciudad);
                        }
                        else
                        {
                            plazap.Add("Ciudad de " + reporte.ciudad);
                        }
                    }
                    else
                    {
                        plazap.Add("Plaza " + plaza.Plaza);
                    }
                    document.Add(plazap);
                    document.Add(new Paragraph("\n"));
                    //creamos el parrafo de la descripcion
                    Paragraph detalle = new Paragraph();

                    detalle.Font = FontFactory.GetFont("Arial", 15);
                    detalle.Font.SetStyle(Font.BOLD);
                    if (reporte.inicio != "" && reporte.inicio != null)
                    {
                        detalle.Alignment = Element.ALIGN_CENTER;
                        detalle.Add("Reporte del " + reporte.inicio + " al " + reporte.fin);
                    }
                    else
                    {
                        detalle.Alignment = Element.ALIGN_RIGHT;
                        DateTime thisDay = DateTime.Today;
                        detalle.Add("Fecha: " + thisDay.ToShortDateString());
                    }

                    document.Add(detalle);
                    document.Add(new Paragraph("\n"));//salto de linea

                    //Separador
                    Paragraph p = new Paragraph(new Chunk(new iTextSharp.text.pdf.draw.LineSeparator(0.0F, 100.0F, BaseColor.LIGHT_GRAY, Element.ALIGN_LEFT, 1)));
                    document.Add(p);
                    document.Add(new Paragraph("\n"));

                    PdfPTable table = new PdfPTable(12);

                    table.WidthPercentage = 100;
                    table.HeaderRows = 1;
                    PdfPCell cell1 = new PdfPCell(new Phrase("No. Reporte", negritas));
                    PdfPCell cell2 = new PdfPCell(new Phrase("Atendió", negritas));
                    PdfPCell cell3 = new PdfPCell(new Phrase("Tipo", negritas));
                    PdfPCell cell4 = new PdfPCell(new Phrase("Contrato", negritas));
                    PdfPCell cell10 = new PdfPCell(new Phrase("Nombre", negritas));
                    PdfPCell cell11 = new PdfPCell(new Phrase("Telefono", negritas));
                    PdfPCell cell12 = new PdfPCell(new Phrase("Celular", negritas));
                    PdfPCell cell5 = new PdfPCell(new Phrase("Detalle", negritas));
                    PdfPCell cell6 = new PdfPCell(new Phrase("Solución", negritas));
                    PdfPCell cell7 = new PdfPCell(new Phrase("Fecha", negritas));
                    PdfPCell cell8 = new PdfPCell(new Phrase("Inicio", negritas));
                    PdfPCell cell9 = new PdfPCell(new Phrase("Fin", negritas));
                    table.AddCell(cell1);
                    table.AddCell(cell2);
                    table.AddCell(cell3);
                    table.AddCell(cell4);
                    table.AddCell(cell10);
                    table.AddCell(cell11);
                    table.AddCell(cell12);
                    table.AddCell(cell5);
                    table.AddCell(cell6);
                    table.AddCell(cell7);
                    table.AddCell(cell8);
                    table.AddCell(cell9);
                    foreach (var item in lista)
                    {

                        table.AddCell(new PdfPCell(new Phrase(item.id_llamada.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.usuario.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.tipo_llamada.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.contrato.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.nombre.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.telefono.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.celular.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.detalle.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.solucion.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.fecha.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.inicio.ToString(), normal)));
                        table.AddCell(new PdfPCell(new Phrase(item.fin.ToString(), normal)));
                    }

                    document.Add(table);
                    document.Close();
                    //cerramos el documento y lo volvemos a abrir para agregar el numero de pagina a cada hoja
                    //PdfReader rd = new PdfReader(fileName);
                    //nombre_archivo = Guid.NewGuid().ToString();
                    //string fileName2 = Server.MapPath("/Reportes/") + nombre_archivo + ".pdf";
                    //PdfStamper ps = new PdfStamper(rd, new FileStream(fileName2, FileMode.Create));

                    //PdfImportedPage page;
                    //for (int i = 1; i <= rd.NumberOfPages; i++)
                    //{
                    //    PdfContentByte canvas = ps.GetOverContent(i);
                    //    page = ps.GetImportedPage(rd, i);
                    //    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    //    canvas.BeginText();
                    //    canvas.SetFontAndSize(bf, 8);

                    //    canvas.ShowTextAligned(PdfContentByte.ALIGN_LEFT, " " + i, 300.7f, 20.7f, 0);
                    //    canvas.EndText();
                    //    canvas.AddTemplate(page, 0, 0);


                    //}
                    //ps.Close();

                }
                else
                {
                    nombre_archivo = "No Resultados";
                }


            }

            catch { }
            return Json(nombre_archivo + ".pdf", JsonRequestBehavior.AllowGet);
        }
        public class obj_reporte
        {
            public int plaza { get; set; }
            public string ciudad { get; set; }
            public int motivo { get; set; }
            public int problema { get; set; }
            public int usuario { get; set; }
            public int queja { get; set; }
            public string inicio { get; set; }
            public string fin { get; set; }
            public int tipServ { get; set; }
            public int tipoLlamada { get; set; }
        }

        public class datosReporte
        {
            public string id_llamada { get; set; }
            public string usuario { get; set; }
            public string tipo_llamada { get; set; }
            public string contrato { get; set; }
            public string detalle { get; set; }
            public string solucion { get; set; }
            public string fecha { get; set; }
            public string inicio { get; set; }
            public string fin { get; set; }
            public string nombre { get; set; }
            public string telefono { get; set; }
            public string celular { get; set; }
        }


        public ActionResult getOrdenes(int idPlaza, int Contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(idPlaza));
            List<DatosOrden> data = new List<DatosOrden>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec uspBuscaOrdSer 0, 0, "+Contrato+", '', '', '', 30, 0, 0");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DatosOrden datos = new DatosOrden();
                        datos.Clv_Orden = Convert.ToInt32(reader[0]);
                        datos.STATUS = reader[1].ToString();
                        datos.Contrato = Convert.ToInt32(reader[2]);
                        datos.Nombre = reader[3].ToString();
                        datos.CALLE = reader[4].ToString();
                        datos.NUMERO = reader[5].ToString();
                        datos.Clv_TipSer = Convert.ToInt32(reader[6]);
                        data.Add(datos);
                    }
                }
                reader.Close();
            }
            catch
            {

            }
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public class DatosOrden
        {
            public int Clv_Orden { get; set; }
            public string STATUS { get; set; }
            public int Contrato { get; set; }
            public string Nombre { get; set; }
            public string CALLE { get; set; }
            public string NUMERO { get; set; }
            public int Clv_TipSer { get; set; }
        }


        public ActionResult consultarDetalleOrden(int idPlaza, int Orden)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(idPlaza));
            objDetalleOrden orden = new objDetalleOrden();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("exec CONORDSER " + Orden + ", 0 ");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        orden.clv_orden = Convert.ToInt32(reader[0]);
                        orden.contrato = Convert.ToInt32(reader[2]);
                        orden.solicitud = reader[3].ToString();
                        orden.ejecucion = reader[4].ToString();
                        orden.visita1 = reader[5].ToString();
                        orden.visita2 = reader[6].ToString();
                        orden.status = reader[7].ToString();
                        orden.observaciones = reader[11].ToString();
                    }
                }
                reader.Close();

                comandoSql = new SqlCommand("exec BUSCLIPORCONTRATO " + orden.contrato + ", '', '', '', '', 0, 0");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader0 = comandoSql.ExecuteReader();
                if (reader0.HasRows)
                {
                    while (reader0.Read())
                    {
                        orden.nombre = reader0[1].ToString();
                        orden.calle = reader0[2].ToString();
                        orden.colonia = reader0[3].ToString();
                        orden.numero = reader0[4].ToString();
                        orden.ciudad = reader0[5].ToString();
                    }
                }
                reader0.Close();

                comandoSql = new SqlCommand("exec dameSerDELCli " + orden.contrato + "");
                comandoSql.Connection = conexionSQL2;
                List<objServicios> servicios = new List<objServicios>();
                SqlDataReader reader2 = comandoSql.ExecuteReader();
                if (reader2.HasRows)
                {
                    while (reader2.Read())
                    {
                        objServicios servicio = new objServicios();
                        servicio.servicio = reader2[0].ToString();
                        servicios.Add(servicio);
                    }
                }
                reader2.Close();
                orden.servicios = servicios;


                comandoSql = new SqlCommand("exec MuestraRelOrdenesTecnicos " + Orden + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader3 = comandoSql.ExecuteReader();
                objTecnico tecnico = new objTecnico();
                if (reader3.HasRows)
                {
                    while (reader3.Read())
                    {

                        tecnico.clvTecnico = Convert.ToInt32(reader3[0]);
                        tecnico.Nombre = reader3[1].ToString();
                    }
                }
                reader3.Close();
                orden.tecnico = tecnico;


                comandoSql = new SqlCommand("declare @a int, @b varchar(50) exec uspDamePlacaTapCliente " + orden.contrato + ", @a OUTPUT, @b OUTPUT  select @b");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader4 = comandoSql.ExecuteReader();
                if (reader4.HasRows)
                {
                    while (reader4.Read())
                    {
                        try
                        {
                            orden.placa = Convert.ToInt32(reader4[0]);
                        }
                        catch
                        {
                            orden.placa = 0;
                        }
                    }
                }
                reader4.Close();

                comandoSql = new SqlCommand("exec uspConsultaTap " + orden.contrato + ", 0, 0 ");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader5 = comandoSql.ExecuteReader();
                objTap tap = new objTap();
                if (reader5.HasRows)
                {
                    while (reader5.Read())
                    {

                        tap.idTap = Convert.ToInt32(reader5[0]);
                        tap.clave = reader5[1].ToString();
                    }
                }
                reader5.Close();
                orden.tap = tap;

                comandoSql = new SqlCommand("exec Consulta_RelOrdenUsuario " + Orden + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader6 = comandoSql.ExecuteReader();
                if (reader6.HasRows)
                {
                    while (reader6.Read())
                    {

                        orden.genero = reader6[0].ToString(); ;
                        orden.ejecuto = reader6[1].ToString();
                    }
                }
                reader6.Close();

                comandoSql = new SqlCommand("exec BUSCADetOrdSer " + Orden + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader7 = comandoSql.ExecuteReader();
                List<objAllOrders> detallesOrdenes = new List<objAllOrders>();
                if (reader7.HasRows)
                {
                    while (reader7.Read())
                    {
                        objAllOrders detalleOrden = new objAllOrders();
                        detalleOrden.clave = Convert.ToInt32(reader7[0]);
                        detalleOrden.clv_orden = Convert.ToInt32(reader7[1]);
                        detalleOrden.clv_trabajo = Convert.ToInt32(reader7[2]);
                        detalleOrden.descripcion = reader7[3].ToString();
                        detalleOrden.accion = reader7[4].ToString();
                        detalleOrden.observaciones = reader7[5].ToString();
                        detalleOrden.realiza = reader7[6].ToString();
                        detallesOrdenes.Add(detalleOrden);
                    }
                }
                reader7.Close();
                orden.detallesOrdenes = detallesOrdenes;


                comandoSql = new SqlCommand("exec DimeSiTieneunaBitacora " + Orden + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader8 = comandoSql.ExecuteReader();
                if (reader8.HasRows)
                {
                    while (reader8.Read())
                    {

                        orden.folio = reader8[0].ToString();
                    }
                }
                reader8.Close();

            }
            catch { }
            return Json(orden, JsonRequestBehavior.AllowGet);
        }

        public class objDetalleOrden
        {
            public int clv_orden { get; set; }
            public int contrato { get; set; }
            public string folio { get; set; }
            public string nombre { get; set; }
            public string ciudad { get; set; }
            public string colonia { get; set; }
            public string calle { get; set; }
            public string numero { get; set; }
            public string solicitud { get; set; }
            public string ejecucion { get; set; }
            public string visita1 { get; set; }
            public string visita2 { get; set; }
            public string status { get; set; }
            public string observaciones { get; set; }
            public List<objServicios> servicios { get; set; }
            public objTecnico tecnico { get; set; }
            public int placa { get; set; }
            public objTap tap { get; set; }
            public string ejecuto { get; set; }
            public string genero { get; set; }
            public List<objAllOrders> detallesOrdenes { get; set; }
        }

        public class objServicios
        {
            public string servicio { get; set; }
        }

        public class objTecnico
        {
            public int clvTecnico { get; set; }
            public string Nombre { get; set; }
        }

        public class objTap
        {
            public int idTap { get; set; }
            public string clave { get; set; }
        }

        public class objAllOrders
        {
            public int clave { get; set; }
            public int clv_orden { get; set; }
            public int clv_trabajo { get; set; }
            public string descripcion { get; set; }
            public string accion { get; set; }
            public string observaciones { get; set; }
            public string realiza { get; set; }
        }
    }


}

