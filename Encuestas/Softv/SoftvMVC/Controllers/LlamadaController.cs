
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using System.Data.SqlClient;
using Globals;
using System.Globalization;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.LlamadaController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : LlamadaController
    /// File                    : LlamadaController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:37 p. m.
    ///</summary>
    public partial class LlamadaController : BaseController, IDisposable
    {
        private SoftvService.LlamadaClient proxy = null;

        private SoftvService.UsuarioClient proxyUsuario = null;

        private SoftvService.TurnoClient proxyTurnos = null;

        private SoftvService.ConexionClient proxyConexion = null;

        private SoftvService.TrabajoClient proxyTrabajo = null;

        private SoftvService.TipServClient proxyTipServ = null;

        private SoftvService.CLIENTEClient proxyCLIENTE = null;

        private SoftvService.QuejaClient proxyQueja = null;

        public LlamadaController()
        {

            proxy = new SoftvService.LlamadaClient();

            proxyUsuario = new SoftvService.UsuarioClient();

            proxyTurnos = new SoftvService.TurnoClient();

            proxyConexion = new SoftvService.ConexionClient();

            proxyTrabajo = new SoftvService.TrabajoClient();

            proxyTipServ = new SoftvService.TipServClient();

            proxyCLIENTE = new SoftvService.CLIENTEClient();

            proxyQueja = new SoftvService.QuejaClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyUsuario = new SoftvService.UsuarioClient();
            if (proxyUsuario != null)
            {
                if (proxyUsuario.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyUsuario.Close();
                }
            }

            proxyTurnos = new SoftvService.TurnoClient();
            if (proxyTurnos != null)
            {
                if (proxyTurnos.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyTurnos.Close();
                }
            }

            proxyConexion = new SoftvService.ConexionClient();
            if (proxyConexion != null)
            {
                if (proxyConexion.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyConexion.Close();
                }
            }

            proxyTrabajo = new SoftvService.TrabajoClient();
            if (proxyTrabajo != null)
            {
                if (proxyTrabajo.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyTrabajo.Close();
                }
            }

            proxyTipServ = new SoftvService.TipServClient();
            if (proxyTipServ != null)
            {
                if (proxyTipServ.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyTipServ.Close();
                }
            }

            proxyCLIENTE = new SoftvService.CLIENTEClient();
            if (proxyCLIENTE != null)
            {
                if (proxyCLIENTE.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyCLIENTE.Close();
                }
            }

            proxyQueja = new SoftvService.QuejaClient();
            if (proxyQueja != null)
            {
                if (proxyQueja.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyQueja.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Llamada");
            ViewData["Title"] = "Llamada";
            ViewData["Message"] = "Llamada";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<LlamadaEntity> listResult = proxy.GetLlamadaPagedListXml(pageNumber, pSize, SerializeTool.Serialize<LlamadaEntity>(new LlamadaEntity()));


            List<UsuarioEntity> lstUsuario = new List<UsuarioEntity>();
            lstUsuario.Add(new UsuarioEntity() { IdUsuario = null, Nombre = "Todos" });
            lstUsuario.AddRange(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()));
            ViewBag.IdUsuariotxt = new SelectList(lstUsuario, "IdUsuario", "Nombre");

            List<TurnoEntity> lstTurnos = new List<TurnoEntity>();
            lstTurnos.Add(new TurnoEntity() { IdTurno = null, Turno = "Todos" });
            lstTurnos.AddRange(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()));
            ViewBag.IdTurnotxt = new SelectList(lstTurnos, "IdTurno", "Turno");

            List<ConexionEntity> lstConexion = new List<ConexionEntity>();
            lstConexion.Add(new ConexionEntity() { IdConexion = null, Plaza = "Todos" });
            lstConexion.AddRange(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()));
            ViewBag.IdConexiontxt = new SelectList(lstConexion, "IdConexion", "Plaza");

            List<TrabajoEntity> lstTrabajo = new List<TrabajoEntity>();
            lstTrabajo.Add(new TrabajoEntity() { Clv_Trabajo = null, TRABAJO = "Todos" });
            lstTrabajo.AddRange(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()));
            ViewBag.Clv_Trabajotxt = new SelectList(lstTrabajo, "Clv_Trabajo", "TRABAJO");

            List<TipServEntity> lstTipServ = new List<TipServEntity>();
            lstTipServ.Add(new TipServEntity() { Clv_TipSer = null, Concepto = "Todos" });
            lstTipServ.AddRange(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()));
            ViewBag.Clv_TipSertxt = new SelectList(lstTipServ, "Clv_TipSer", "Concepto");

            List<CLIENTEEntity> lstCLIENTE = new List<CLIENTEEntity>();
            lstCLIENTE.Add(new CLIENTEEntity() { CONTRATO = null, NOMBRE = "Todos" });
            lstCLIENTE.AddRange(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()));
            ViewBag.Contratotxt = new SelectList(lstCLIENTE, "Contrato", "NOMBRE");

            List<QuejaEntity> lstQueja = new List<QuejaEntity>();
            lstQueja.Add(new QuejaEntity() { Clv_Queja = null, Problema = "Todos" });
            lstQueja.AddRange(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()));
            ViewBag.Clv_Quejatxt = new SelectList(lstQueja, "Clv_Queja", "Problema");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Llamada");
            return View(new StaticPagedList<LlamadaEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            LlamadaEntity objLlamada = proxy.GetLlamada(id);
            if (objLlamada == null)
            {
                return HttpNotFound();
            }
            return PartialView(objLlamada);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Llamada");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre");

            ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno");

            ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza");

            ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO");

            ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto");

            ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE");

            ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema");

            return View();
        }

        [HttpPost]
        public ActionResult Create(LlamadaEntity objLlamada)
        {
            if (ModelState.IsValid)
            {

                objLlamada.BaseRemoteIp = RemoteIp;
                objLlamada.BaseIdUser = LoggedUserName;
                int result = proxy.AddLlamada(objLlamada);
                if (result == -1)
                {

                    ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre", objLlamada.IdUsuario);

                    ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno", objLlamada.IdTurno);

                    ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza", objLlamada.IdConexion);

                    ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO", objLlamada.Clv_Trabajo);

                    ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto", objLlamada.Clv_TipSer);

                    ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE", objLlamada.Contrato);

                    ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema", objLlamada.Clv_Queja);

                    AssingMessageScript("El Llamada ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objLlamada);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Llamada en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objLlamada);
        }

        public ActionResult nueva()
        {
            return View("nueva_llamada");
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Llamada");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            LlamadaEntity objLlamada = proxy.GetLlamada(id);

            ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre");

            ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno");

            ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza");

            ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO");

            ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto");

            ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE");

            ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema");

            if (objLlamada == null)
            {
                return HttpNotFound();
            }
            return View(objLlamada);
        }

        //
        // POST: /Llamada/Edit/5
        [HttpPost]
        public ActionResult Edit(LlamadaEntity objLlamada)
        {
            if (ModelState.IsValid)
            {
                objLlamada.BaseRemoteIp = RemoteIp;
                objLlamada.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateLlamada(objLlamada);
                if (result == -1)
                {
                    LlamadaEntity objLlamadaOld = proxy.GetLlamada(objLlamada.IdLlamada);

                    ViewBag.VBUsuario = new SelectList(proxyUsuario.GetUsuarioList().Where(x => x.IdUsuario == objLlamadaOld.IdUsuario).OrderBy(x => x.Nombre.Trim()).ToList(), "IdUsuario", "Nombre", objLlamada.IdUsuario);

                    ViewBag.VBTurnos = new SelectList(proxyTurnos.GetTurnoList().Where(x => x.IdTurno == objLlamadaOld.IdTurno).OrderBy(x => x.Turno.Trim()).ToList(), "IdTurno", "Turno", objLlamada.IdTurno);

                    ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().Where(x => x.IdConexion == objLlamadaOld.IdConexion).OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza", objLlamada.IdConexion);

                    ViewBag.VBTrabajo = new SelectList(proxyTrabajo.GetTrabajoList().Where(x => x.Clv_Trabajo == objLlamadaOld.Clv_Trabajo).OrderBy(x => x.TRABAJO.Trim()).ToList(), "Clv_Trabajo", "TRABAJO", objLlamada.Clv_Trabajo);

                    ViewBag.VBTipServ = new SelectList(proxyTipServ.GetTipServList().Where(x => x.Clv_TipSer == objLlamadaOld.Clv_TipSer).OrderBy(x => x.Concepto.Trim()).ToList(), "Clv_TipSer", "Concepto", objLlamada.Clv_TipSer);

                    ViewBag.VBCLIENTE = new SelectList(proxyCLIENTE.GetCLIENTEList().Where(x => x.CONTRATO == objLlamadaOld.Contrato).OrderBy(x => x.NOMBRE.Trim()).ToList(), "Contrato", "NOMBRE", objLlamada.Contrato);

                    ViewBag.VBQueja = new SelectList(proxyQueja.GetQuejaList().Where(x => x.Clv_Queja == objLlamadaOld.Clv_Queja).OrderBy(x => x.Problema.Trim()).ToList(), "Clv_Queja", "Problema", objLlamada.Clv_Queja);

                    AssingMessageScript("El Llamada ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objLlamada);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Llamada se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objLlamada);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, bool? Tipo_Llamada, String Detalle, String Solucion, DateTime? Fecha, DateTime? HoraInicio, DateTime? HoraFin, int? IdUsuario, int? IdTurno, int? IdConexion, int? Clv_Trabajo, int? Clv_TipSer, int? Contrato, int? Clv_Queja)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<LlamadaEntity> listResult = null;
            List<LlamadaEntity> listLlamada = new List<LlamadaEntity>();
            LlamadaEntity objLlamada = new LlamadaEntity();
            LlamadaEntity objGetLlamada = new LlamadaEntity();


            if ((Tipo_Llamada != null))
            {
                objLlamada.Tipo_Llamada = Tipo_Llamada;
            }

            if ((Detalle != null && Detalle.ToString() != ""))
            {
                objLlamada.Detalle = Detalle;
            }

            if ((Solucion != null && Solucion.ToString() != ""))
            {
                objLlamada.Solucion = Solucion;
            }

            if ((Fecha != null && Fecha.ToString() != ""))
            {
                objLlamada.Fecha = Fecha.ToString();
            }

            if ((HoraInicio != null && HoraInicio.ToString() != ""))
            {
                objLlamada.HoraInicio = HoraInicio.ToString();
            }

            if ((HoraFin != null && HoraFin.ToString() != ""))
            {
                objLlamada.HoraFin = HoraFin.ToString();
            }

            if ((IdUsuario != null))
            {
                objLlamada.IdUsuario = IdUsuario;
            }

            if ((IdTurno != null))
            {
                objLlamada.IdTurno = IdTurno;
            }

            if ((IdConexion != null))
            {
                objLlamada.IdConexion = IdConexion;
            }

            if ((Clv_Trabajo != null))
            {
                objLlamada.Clv_Trabajo = Clv_Trabajo;
            }

            if ((Clv_TipSer != null))
            {
                objLlamada.Clv_TipSer = Clv_TipSer;
            }

            if ((Contrato != null))
            {
                objLlamada.Contrato = Contrato;
            }

            if ((Clv_Queja != null))
            {
                objLlamada.Clv_Queja = Clv_Queja;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetLlamadaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objLlamada));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetLlamadaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objLlamada));
            }
            listResult.ToList().ForEach(x => listLlamada.Add(x));

            var LlamadaAsIPagedList = new StaticPagedList<LlamadaEntity>(listLlamada, pageNumber, pSize, listResult.totalCount);
            if (LlamadaAsIPagedList.Count > 0)
            {
                return PartialView(LlamadaAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteLlamada(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Llamada Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Llamada No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult GetList(int idplaza, int draw, int start, int length)
        {

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordFiltered = 0;
            dataTableData.data = FiltrarContenido(idplaza, draw, start, length, ref recordFiltered);
            dataTableData.recordsFiltered = recordFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        //private List<LlamadaEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        //{

        //    List<LlamadaEntity> lista = proxy.GetLlamadaList();
        //    recordFiltered = lista.Count;
        //    int rango = start + length;
        //    return lista.Skip(start).Take(length).ToList();
        //}
        public List<LlamadaEntity> FiltrarContenido(int idplaza, int draw, int start, int length, ref int recordFiltered)
        {
            List<LlamadaEntity> lista = new List<LlamadaEntity>();
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<LlamadaEntity> lista_servicio = new List<LlamadaEntity>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(idplaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {

                comandoSql = new SqlCommand("Select * from Llamadas order by IdLlamada DESC");
                   

                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        LlamadaEntity llamada = new LlamadaEntity();
                        llamada.IdLlamada = Int32.Parse(reader[0].ToString());
                        llamada.IdUsuario = Int32.Parse(reader[1].ToString());
                        llamada.Tipo_Llamada = bool.Parse(reader[2].ToString());
                        try{
                            llamada.Contrato = Int32.Parse(reader[3].ToString());
                        }
                        catch
                        {
                            llamada.Contrato = 0;
                        }
                        llamada.IdConexion = Int32.Parse(reader["IdConexion"].ToString());
                        llamada.Fecha = reader[6].ToString();
                        lista.Add(llamada);
                    }
                }
            }
            catch { }
            recordFiltered = lista.Count;

            return lista.Skip(start).Take(length).ToList();


        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<LlamadaEntity> data { get; set; }
        }

        public ActionResult InsertLlamada(int IdPlaza, llamdaObject llamada)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {
                if(llamada.tipo_llamada == 1){
                    if (llamada.queja == 2)
                    {
                        comandoSql = new SqlCommand("insert into Llamadas(idUsuario,Tipo_Llamada,Contrato,Detalle,Solucion,Fecha,HoraInicio,HoraFin,IdTurno,Clv_Queja,IdConexion,Clv_Trabajo,Clv_TipSer,Clv_Problema) values(@IdUsuario,@Tipo_Llamada,@Contrato,@motivo,@solucion,@Fecha,@HoraInicio,@HoraFin,null,null,@IdConexion,@Clv_Trabajo,@Clv_TipSer,@Clv_Problema)");

                        comandoSql.Parameters.AddWithValue("@IdUsuario", llamada.usuario);
                        comandoSql.Parameters.AddWithValue("@Tipo_Llamada", llamada.tipo_llamada);
                        comandoSql.Parameters.AddWithValue("@Contrato", llamada.contrato);
                        comandoSql.Parameters.AddWithValue("@Fecha", llamada.fecha);
                        comandoSql.Parameters.AddWithValue("@motivo", llamada.motivo);
                        comandoSql.Parameters.AddWithValue("@solucion", llamada.solucion);
                        comandoSql.Parameters.AddWithValue("@HoraInicio", llamada.horainicio);
                        comandoSql.Parameters.AddWithValue("@HoraFin", llamada.horatermino);
                        comandoSql.Parameters.AddWithValue("@IdConexion", llamada.IdConexion);
                        comandoSql.Parameters.AddWithValue("@Clv_TipSer", llamada.Clv_TipSer);
                        comandoSql.Parameters.AddWithValue("@Clv_Trabajo", llamada.clas_solucion);
                        comandoSql.Parameters.AddWithValue("@Clv_Problema", llamada.clas_problema);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteReader();


                    }
                    else
                    {
                        comandoSql = new SqlCommand("insert into Quejas(Clv_TipSer,Contrato,Fecha_Soliciutud,Problema,Solucion,Fecha_Captura,Clv_Trabajo,clvPrioridadQueja) values(@Clv_TipSer,@Contrato,@Fecha_Soliciutud,@Problema,@Solucion,@Fecha_Captura,@Clv_Trabajo,@clvPrioridadQueja); SELECT SCOPE_IDENTITY()");

                        comandoSql.Parameters.AddWithValue("@Clv_TipSer", llamada.Clv_TipSer);
                        comandoSql.Parameters.AddWithValue("@Contrato", llamada.contrato);
                        comandoSql.Parameters.AddWithValue("@Fecha_Soliciutud", llamada.fecha);
                        comandoSql.Parameters.AddWithValue("@Problema", llamada.motivo);
                        comandoSql.Parameters.AddWithValue("@Solucion", llamada.solucion);
                        comandoSql.Parameters.AddWithValue("@Fecha_Captura", llamada.fecha);
                        comandoSql.Parameters.AddWithValue("@Clv_Trabajo", llamada.clas_solucion);
                        comandoSql.Parameters.AddWithValue("@clvPrioridadQueja", llamada.prioridad);
                        comandoSql.Connection = conexionSQL;
                        var Id = Int32.Parse(comandoSql.ExecuteScalar().ToString());

                        comandoSql = new SqlCommand("insert into Llamadas(idUsuario,Tipo_Llamada,Contrato,Detalle,Solucion,Fecha,HoraInicio,HoraFin,IdTurno,Clv_Queja,IdConexion,Clv_Trabajo,Clv_TipSer,Clv_Problema) values(@IdUsuario,@Tipo_Llamada,@Contrato,@motivo,@solucion,@Fecha,@HoraInicio,@HoraFin,@IdTurno,@Clv_Queja,@IdConexion,@Clv_Trabajo,@Clv_TipSer,@Clv_Problema)");

                        comandoSql.Parameters.AddWithValue("@IdUsuario", llamada.usuario);
                        comandoSql.Parameters.AddWithValue("@IdTurno", llamada.IdTurno);
                        comandoSql.Parameters.AddWithValue("@Clv_Queja", Id);
                        comandoSql.Parameters.AddWithValue("@Tipo_Llamada", llamada.tipo_llamada);
                        comandoSql.Parameters.AddWithValue("@Contrato", llamada.contrato);
                        comandoSql.Parameters.AddWithValue("@Fecha", llamada.fecha);
                        comandoSql.Parameters.AddWithValue("@motivo", llamada.motivo);
                        comandoSql.Parameters.AddWithValue("@solucion", llamada.solucion);
                        comandoSql.Parameters.AddWithValue("@HoraInicio", llamada.horainicio);
                        comandoSql.Parameters.AddWithValue("@HoraFin", llamada.horatermino);
                        comandoSql.Parameters.AddWithValue("@IdConexion", llamada.IdConexion);
                        comandoSql.Parameters.AddWithValue("@Clv_TipSer", llamada.Clv_TipSer);
                        comandoSql.Parameters.AddWithValue("@Clv_Trabajo", llamada.clas_solucion);
                        comandoSql.Parameters.AddWithValue("@Clv_Problema", llamada.clas_problema);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteReader();
                    }
                }
                else
                {

                    comandoSql = new SqlCommand("insert into Llamadas(idUsuario,Tipo_Llamada,Contrato,Detalle,Solucion,Fecha,HoraInicio,HoraFin,IdTurno,Clv_Queja,IdConexion,Clv_Trabajo,Clv_TipSer) values(@idUsuario,@Tipo_Llamada,null,@motivo,@solucion,@Fecha,@HoraInicio,@HoraFin,null,null,@IdConexion,null,null) SELECT SCOPE_IDENTITY()");
                    comandoSql.Parameters.AddWithValue("@Tipo_Llamada", llamada.tipo_llamada);
                    comandoSql.Parameters.AddWithValue("@idUsuario", llamada.usuario);
                    comandoSql.Parameters.AddWithValue("@Fecha", llamada.fecha);
                    comandoSql.Parameters.AddWithValue("@motivo", llamada.motivo);
                    comandoSql.Parameters.AddWithValue("@solucion", llamada.solucion);
                    comandoSql.Parameters.AddWithValue("@HoraInicio", llamada.horainicio);
                    comandoSql.Parameters.AddWithValue("@HoraFin", llamada.horatermino);
                    comandoSql.Parameters.AddWithValue("@IdConexion", llamada.IdConexion);
                    comandoSql.Connection = conexionSQL;
                    var Id_llamada = Int32.Parse(comandoSql.ExecuteScalar().ToString());

                    comandoSql = new SqlCommand("insert into NoClientes(IdLlamada,Nombre,Direccion,Telefono,Celular,Email) values(@IdLlamada,@Nombre,@Direccion,@Telefono,@Celular,@Email)");
                    comandoSql.Parameters.AddWithValue("@IdLlamada", Id_llamada);
                    comandoSql.Parameters.AddWithValue("@Nombre", llamada.nombre);
                    comandoSql.Parameters.AddWithValue("@Direccion", llamada.domicilio);
                    comandoSql.Parameters.AddWithValue("@Telefono", llamada.telefono);
                    comandoSql.Parameters.AddWithValue("@Celular", llamada.celular);
                    comandoSql.Parameters.AddWithValue("@Email", llamada.email);
                    comandoSql.Connection = conexionSQL;
                    comandoSql.ExecuteReader();
                }
                
            }
            catch { }
           
            return Json(1, JsonRequestBehavior.AllowGet);
    
            
        }

        public class llamdaObject
        {
            public int tipo_llamada { get; set; }
            public int contrato { get; set; }
            public string clas_problema { get; set; }
            public string solucion { get; set; }
            public string motivo { get; set; }
            public string clas_solucion { get; set; }
            public int queja { get; set; }
            public int usuario { get; set; }
            public string fecha { get; set; }
            public string horainicio { get; set; }
            public string horatermino { get; set; }
            public int IdTurno { get; set; }
            public int Clv_Trabajo { get; set; }
            public int IdConexion { get; set; }
            public int Clv_TipSer { get; set; }
            public int prioridad { get; set; }
            public string telefono { get; set; }
            public string celular { get; set; }
            public string domicilio { get; set; }
            public string email { get; set; }
            public string nombre { get; set; }

        }
        public ActionResult GetIdTrabajo(int IdPlaza, int idServicio)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<trabajo_object> lista = new List<trabajo_object>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(IdPlaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("SELECT * FROM Trabajos WHERE Clv_TipSer =" + idServicio + "");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        trabajo_object trabajo = new trabajo_object();
                        trabajo.Clv_Trabajo = Int32.Parse(reader[0].ToString());
                        trabajo.Descripcion = reader[3].ToString();
                        lista.Add(trabajo);
                    }
                }
            }
            
            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

        public class trabajo_object
        {
            public int Clv_Trabajo { get; set; }
            public string Descripcion { get; set; }

        }

        public ActionResult getOneCall(int plaza, int id_llamada)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<LlamadaEntity> lista = new List<LlamadaEntity>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("SELECT * FROM Llamadas WHERE IdLlamada =" + id_llamada + "");
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        LlamadaEntity llamada = new LlamadaEntity();
                        llamada.IdLlamada = Int32.Parse(reader[0].ToString());
                        llamada.IdUsuario = Int32.Parse(reader[1].ToString());
                        llamada.Tipo_Llamada = bool.Parse(reader[2].ToString());
                        try
                        {
                            llamada.Contrato = Int32.Parse(reader[3].ToString());
                        }catch{
                            llamada.Contrato = 0;
                        }
                        try
                        {
                            llamada.IdTurno = Int32.Parse(reader[9].ToString());
                        }
                        catch
                        {
                            llamada.IdTurno = 0;
                        }
                        try
                        {
                            llamada.Clv_Queja = Int32.Parse(reader[10].ToString());
                        }
                        catch
                        {
                            llamada.Clv_Queja = 0;
                        }
                        try
                        {
                            llamada.Clv_Trabajo = Int32.Parse(reader[12].ToString());
                        }
                        catch
                        {
                            llamada.Clv_Trabajo = 0;
                        }
                        try
                        {
                            llamada.Clv_TipSer = Int32.Parse(reader[13].ToString());
                        }
                        catch
                        {
                            llamada.Clv_TipSer = 0;
                        }

                        try
                        {
                            llamada.Clv_Problema = Int32.Parse(reader[14].ToString());
                        }
                        catch
                        {
                            llamada.Clv_Problema = 0;
                        }
                                           
                        
                        llamada.IdConexion = Int32.Parse(reader["IdConexion"].ToString());
                        llamada.Fecha = reader[6].ToString();
                        llamada.Detalle = reader[4].ToString();
                        llamada.Solucion = reader[5].ToString();
                        llamada.HoraInicio = reader[7].ToString();
                        llamada.HoraFin = reader[8].ToString();
                        llamada.IdConexion = Int32.Parse(reader[11].ToString());
                        
                        lista.Add(llamada);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

        public ActionResult getTreeView(int plaza, int contrato)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<tree> lista = new List<tree>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("exec dameSerDELCli " + contrato);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        tree tree = new tree();
                        tree.cadena = reader[0].ToString();
                        lista.Add(tree);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class tree
        {
            public string cadena { get; set; }
        }

        public ActionResult getDatosNoCliente(int plaza, int llamada)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<NoCliente> lista = new List<NoCliente>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("SELECT * FROM NoClientes WHERE IdLlamada =" + llamada);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        NoCliente datos = new NoCliente();
                        datos.Nombre = reader[2].ToString();
                        datos.Domicilio = reader[3].ToString();
                        datos.Telefono = reader[4].ToString();
                        datos.Celular = reader[5].ToString();
                        datos.Email = reader[6].ToString();
                        lista.Add(datos);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class NoCliente
        {
            public string Nombre { get; set; }
            public string Domicilio { get; set; }
            public string Telefono { get; set; }
            public string Celular { get; set; }
            public string Email { get; set; }
        }
        public ActionResult getDatosQueja(int plaza, int queja)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<QuejaData> lista = new List<QuejaData>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {

                comandoSql = new SqlCommand("SELECT * FROM Quejas WHERE Clv_Queja =" + queja);
                comandoSql.Connection = conexionSQL;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        QuejaData datos = new QuejaData();
                        datos.Clv_Trabajo = reader[16].ToString();
                        datos.clvPrioridadQueja = reader[21].ToString();
                        lista.Add(datos);
                    }
                }
            }

            catch { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public class QuejaData
        {
            public string Clv_Trabajo { get; set; }
            public string clvPrioridadQueja { get; set; }
        }

        public ActionResult editarLLamada(int plaza, editLlamada llamada)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            List<editLlamada> lista = new List<editLlamada>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }

            try
            {
                if(Int32.Parse(llamada.contrato) == 0){
                    comandoSql = new SqlCommand("UPDATE LLamadas SET Detalle ='" + llamada.detalle + "', Solucion='" + llamada.solucion + "' WHERE IdLlamada=" + llamada.id_llamada);
                    comandoSql.Connection = conexionSQL;
                    comandoSql.ExecuteNonQuery();
                    comandoSql = new SqlCommand("UPDATE NoClientes SET Nombre ='" + llamada.nombre + "', Direccion='" + llamada.domicilio + "', Telefono='" + llamada.telefono + "', Celular='" + llamada.celular + "', Email='" + llamada.email + "' WHERE IdLlamada=" + llamada.id_llamada);
                    comandoSql.Connection = conexionSQL;
                    comandoSql.ExecuteNonQuery();
                }else{
                    comandoSql = new SqlCommand("UPDATE LLamadas SET Detalle ='" + llamada.detalle + "', Solucion='" + llamada.solucion + "', Clv_Trabajo=" + llamada.clas_solucion + ", Clv_Problema="+llamada.clas_problema+" WHERE IdLlamada=" + llamada.id_llamada);
                    comandoSql.Connection = conexionSQL;
                    comandoSql.ExecuteNonQuery();
                    if(Int32.Parse(llamada.queja) > 0){
                        comandoSql = new SqlCommand("UPDATE Quejas SET Problema ='" + llamada.detalle + "', Solucion='" + llamada.solucion + "', Clv_Trabajo=" + llamada.clas_solucion + ", clvPrioridadQueja=" + llamada.prioridad + " WHERE Clv_Queja=" + llamada.queja);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteNonQuery();
                        comandoSql = new SqlCommand("UPDATE LLamadas SET IdTurno ='" + llamada.turno + "' WHERE IdLlamada=" + llamada.id_llamada);
                        comandoSql.Connection = conexionSQL;
                        comandoSql.ExecuteNonQuery();
                    }
                }
            }

            catch { }
            return Json(1, JsonRequestBehavior.AllowGet);
        }
        public class editLlamada
        {
            public string solucion { get; set; }
            public string detalle { get; set; }
            public string contrato { get; set; }
            public string clas_problema { get; set; }
            public string clas_solucion { get; set; }
            public string prioridad { get; set; }
            public string turno { get; set; }
            public string nombre { get; set; }
            public string domicilio { get; set; }
            public string telefono { get; set; }
            public string celular { get; set; }
            public string email { get; set; }
            public string queja { get; set; }
            public int id_llamada { get; set; }

        }
    }


}

