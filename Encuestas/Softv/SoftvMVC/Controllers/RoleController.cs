
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.RoleController.cs
    /// Generated by            : Class Generator (c) 2014
    /// Description             : RoleController
    /// File                    : RoleController.cs
    /// Creation date           : 09/12/2014
    /// Creation time           : 15:39
    ///</summary>
    public partial class RoleController : BaseController, IDisposable
    {
        private SoftvService.RoleClient proxy = null;
        private SoftvService.ModuleClient proxyModule = null;
        private SoftvService.PermisoClient proxyPermiso = null;
        RoleEntity rm = new RoleEntity();

        const string ObjRolModel_KEY = "RecoverList";
        public RoleEntity ObjRolModelSession
        {
            get { return System.Web.HttpContext.Current.Session[ObjRolModel_KEY] != null ? (RoleEntity)System.Web.HttpContext.Current.Session[ObjRolModel_KEY] : new RoleEntity(); }
            set { System.Web.HttpContext.Current.Session[ObjRolModel_KEY] = value; }
        }
        public RoleController()
        {
            proxy = new SoftvService.RoleClient();
            proxyModule = new SoftvService.ModuleClient();
            proxyPermiso = new SoftvService.PermisoClient();

        }


        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            if (proxyModule != null)
            {
                if (proxyModule.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyModule.Close();
                }
            }

            if (proxyPermiso != null)
            {
                if (proxyPermiso.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyPermiso.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            //PermisosAcceso("Role");
            //ViewData["Title"] = "Role";
            //ViewData["Message"] = "Role";
            //int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            //int pageNumber = (page ?? 1);
            //SoftvList<RoleEntity> listResult = null;
            //List<RoleEntity> listRole = new List<RoleEntity>();
            //listResult = proxy.GetRolePagedListXml(pageNumber, pSize, SerializeTool.Serialize<RoleEntity>(new RoleEntity() { Estado = true }));
            //listResult.ToList().ForEach(x => listRole.Add(x));
            //CheckNotify();
            //ViewBag.CustomScriptsDefault = BuildScriptsDefault("Role");
            //return View(new StaticPagedList<RoleEntity>(listRole, pageNumber, pSize, listResult.totalCount));

            List<RoleEntity> permisos = proxy.GetRoleList();
            return View();
        }

        public ActionResult Details(int id = 0)
        {
            //ViewBag.New = true;
            //ObjRolModelSession = null;
            //RoleEntity nobjrol = new RoleEntity();
            //nobjrol = proxy.GetRole(id);
            //return View(nobjrol);

            RoleEntity objRol = proxy.GetRole(id);
            if (objRol == null)
            {
                return HttpNotFound();
            }
            return PartialView(objRol);
        }

        public ActionResult Permisos(int id = 0)
        {
            PermisosAccesoDeniedEdit("Role");
            ViewBag.New = true;
            ObjRolModelSession = null;
            RoleEntity nobjrol = new RoleEntity();
            nobjrol = proxy.GetRole(id);
            return View(nobjrol);
        }

        public ActionResult PermisosRolModule(int id)
        {
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RoleEntity objRole = proxy.GetRole(id);

            List<PermisoEntity> lstPermiso =
                proxyPermiso.GetXmlPermiso(Globals.SerializeTool.Serialize<PermisoEntity>(new PermisoEntity() { IdRol = objRole.IdRol.Value })).ToList();

            //List<ModuleEntity> lstMoldeFilter = (from c in proxyModule.GetModuleList()
            //                                     where (from o in lstPermiso
            //                                            select o.IdModule).Contains(c.IdModule)
            //                                     select c).ToList();

            List<ModuleEntity> lstMoldeFilter = proxyModule.GetModuleList();


            lstPermiso.ForEach(XUsuario => lstMoldeFilter.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XUsuario.IdModule).ToList().ForEach(y => y.Permiso = XUsuario));


            List<ModuleEntity> listResult = null;
            List<ModuleEntity> listModule = new List<ModuleEntity>();
            listResult = lstMoldeFilter;
            listResult.ToList().ForEach(x => listModule.Add(x));
            objRole.Modulos = listModule;
            objRole.Modulos = (from s in objRole.Modulos
                               orderby s.ParentId ascending
                               select s).ToList();
            ObjRolModelSession = objRole;
            if (objRole == null)
            {
                return HttpNotFound();
            }
            return PartialView(ObjRolModelSession);
        }

        [HttpPost]
        public ActionResult Permisos(RoleEntity objRole)
        {
            ObjRolModelSession = objRole;
            if (ModelState.IsValid)
            {

                bool findChange = false;
                // List<ModuleEntity> lrm = new List<ModuleEntity>();
                foreach (ModuleEntity m in objRole.Modulos)
                {
                    if (m.Permiso.OptAdd == true || m.Permiso.OptDelete == true || m.Permiso.OptSelect == true || m.Permiso.OptUpdate == true)
                    {
                        findChange = true;
                        break;
                    }
                    else
                    {
                        findChange = false;
                    }

                }
                if (findChange)
                {
                    objRole.Estado = true;
                    objRole.BaseRemoteIp = RemoteIp;
                    objRole.BaseIdUser = LoggedUserName;
                    //int result = proxy.UpdateRole(objRole);
                    int result;

                    try
                    {
                        result = proxy.UpdateRole(objRole);
                    }
                    catch (Exception ex)
                    {
                        AssingMessageScript(ex.Message, "error", "Error", true);
                        CheckNotify();
                        return View(objRole);
                    }

                    if (result == -1)
                    {

                        AssingMessageScript("El Rol " + objRole.Nombre + " ya existe en el sistema.", "error", "Error", true);
                        CheckNotify();
                        return View(objRole);
                    }
                    if (result > 0)
                    {
                        if (objRole.Modulos.Count > 0)
                        {
                            List<PermisoEntity> lp = new List<PermisoEntity>();
                            objRole.Modulos.ForEach(x => lp.Add(new PermisoEntity() { IdModule = x.IdModule, IdRol = objRole.IdRol, OptAdd = x.Permiso.OptAdd, OptSelect = x.Permiso.OptSelect, OptUpdate = x.Permiso.OptUpdate, OptDelete = x.Permiso.OptDelete }));
                            if (lp.Count > 0)
                            {
                                try
                                {
                                    proxyPermiso.MargePermiso(LoggedUserName, RemoteIp, Globals.SerializeTool.SerializeList<PermisoEntity>(lp));
                                }
                                catch (Exception ex)
                                {
                                    AssingMessageScript(ex.Message, "error", "Error", true);
                                    CheckNotify();
                                }
                            }
                        }


                        AssingMessageScript("Se Modificaron los permisos del Rol " + objRole.Nombre + " en el sistema.", "success", "Éxito", true);
                        return RedirectToAction("Index");
                    }


                }
                else
                {
                    AssingMessageScript("Es necesario Seleccionar minimo un permiso", "error", "Error", true);
                    CheckNotify();
                    return View(objRole);
                }

            }
            return View(objRole);
        }

        public ActionResult Create()
        {
            //PermisosAccesoDeniedCreate("Role");
            //ViewBag.New = true;
            //ObjRolModelSession = null;

            //return View();

            PermisosAccesoDeniedCreate("Role");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            return View();

        }

        public ActionResult CreateRolModule()
        {
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            SoftvList<ModuleEntity> listResult = null;
            List<ModuleEntity> listModule = new List<ModuleEntity>();
            rm = ObjRolModelSession;
            if (ObjRolModelSession.Modulos == null)
            {

                listResult = proxyModule.GetModulePagedListXml(1, 1, "");
                listResult.ToList().ForEach(x => listModule.Add(x));
                rm.Modulos = listModule;
            }

            rm.Modulos = (from s in rm.Modulos
                          orderby s.ParentId ascending
                          select s).ToList();
            //rm.Modulos = (from s in listModule
            //              where s.ParentId != 0
            //              select s).ToList();

            ObjRolModelSession = rm;

            return PartialView(ObjRolModelSession);
        }

        public ActionResult EditRolModule(int id)
        {
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RoleEntity objRole = proxy.GetRole(id);

            List<PermisoEntity> lstPermiso =
                proxyPermiso.GetXmlPermiso(Globals.SerializeTool.Serialize<PermisoEntity>(new PermisoEntity() { IdRol = objRole.IdRol.Value })).ToList();

            //List<ModuleEntity> lstMoldeFilter = (from c in proxyModule.GetModuleList()
            //                                     where (from o in lstPermiso
            //                                            select o.IdModule).Contains(c.IdModule)
            //                                     select c).ToList();

            List<ModuleEntity> lstMoldeFilter = proxyModule.GetModuleList();
            lstPermiso.ForEach(XUsuario => lstMoldeFilter.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XUsuario.IdModule).ToList().ForEach(y => y.Permiso = XUsuario));


            List<ModuleEntity> listResult = null;
            List<ModuleEntity> listModule = new List<ModuleEntity>();
            listResult = lstMoldeFilter;
            listResult.ToList().ForEach(x => listModule.Add(x));
            objRole.Modulos = listModule;
            objRole.Modulos = (from s in objRole.Modulos
                               orderby s.ParentId ascending
                               select s).ToList();
            ObjRolModelSession = objRole;
            if (objRole == null)
            {
                return HttpNotFound();
            }
            return PartialView(ObjRolModelSession);
        }

        public ActionResult DetailRolModule(int id)
        {
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RoleEntity objRole = proxy.GetRole(id);

            List<PermisoEntity> lstPermiso =
                proxyPermiso.GetXmlPermiso(Globals.SerializeTool.Serialize<PermisoEntity>(new PermisoEntity() { IdRol = objRole.IdRol.Value })).ToList();

            List<ModuleEntity> lstMoldeFilter = (from c in proxyModule.GetModuleList()
                                                 where (from o in lstPermiso
                                                        select o.IdModule).Contains(c.IdModule)
                                                 select c).ToList();


            lstPermiso.ForEach(XUsuario => lstMoldeFilter.Where(x => x.IdModule.HasValue).Where(x => x.IdModule == XUsuario.IdModule).ToList().ForEach(y => y.Permiso = XUsuario));


            List<ModuleEntity> listResult = null;
            List<ModuleEntity> listModule = new List<ModuleEntity>();
            listResult = lstMoldeFilter;
            listResult.ToList().ForEach(x => listModule.Add(x));
            objRole.Modulos = listModule;
            objRole.Modulos = (from s in objRole.Modulos
                               orderby s.ParentId ascending
                               select s).ToList();
            ObjRolModelSession = objRole;
            if (objRole == null)
            {
                return HttpNotFound();
            }
            return PartialView(ObjRolModelSession);
        }

        [HttpPost]
        public ActionResult Create(RoleEntity objRole)
        {

            if (ModelState.IsValid)
            {

                objRole.BaseRemoteIp = RemoteIp;
                objRole.BaseIdUser = LoggedUserName;
                int result = proxy.AddRole(objRole);

                if (result == -1)
                {
                    AssingMessageScript("El Role ya existe en el sistema", "error", "Error", true);
                    CheckNotify();
                    return View(objRole);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Role en el sistema", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }
                
            }
            return View(objRole);
        }
            //ObjRolModelSession = objRole;
            //if (ModelState.IsValid)
            //{

            //    bool findChange = false;
            //    // List<ModuleEntity> lrm = new List<ModuleEntity>();
            //    foreach (ModuleEntity m in objRole.Modulos)
            //    {
            //        if (m.Permiso.OptAdd == true || m.Permiso.OptDelete == true || m.Permiso.OptSelect == true || m.Permiso.OptUpdate == true)
            //        {
            //            findChange = true;
            //            break;
            //        }
            //        else
            //        {
            //            findChange = false;
            //        }

            //    }
            //    if (findChange)
            //    {
            //        objRole.Estado = true;
            //        objRole.BaseRemoteIp = RemoteIp;
            //        objRole.BaseIdUser = LoggedUserName;
            //        //int result = proxy.AddRole(objRole);
            //        int result;

            //        try
            //        {
            //            result = proxy.AddRole(objRole);
            //        }
            //        catch (Exception ex)
            //        {
            //            AssingMessageScript(ex.Message, "error", "Error", true);
            //            CheckNotify();
            //            return View(objRole);
            //        }

            //        if (result == -1)
            //        {

            //            AssingMessageScript("El Rol " + objRole.Nombre + " ya existe en el sistema.", "error", "Error", true);
            //            CheckNotify();
            //            return View(objRole);
            //        }
            //        if (result > 0)
            //        {
            //            if (objRole.Modulos.Count > 0)
            //            {
            //                List<PermisoEntity> lp = new List<PermisoEntity>();
            //                objRole.Modulos.ForEach(x => lp.Add(new PermisoEntity() { IdModule = x.IdModule, IdRol = result, OptAdd = x.Permiso.OptAdd, OptSelect = x.Permiso.OptSelect, OptUpdate = x.Permiso.OptUpdate, OptDelete = x.Permiso.OptDelete }));
            //                if (lp.Count > 0)
            //                {
            //                    try
            //                    {
            //                        proxyPermiso.MargePermiso(LoggedUserName, RemoteIp, Globals.SerializeTool.SerializeList<PermisoEntity>(lp));
            //                    }
            //                    catch (Exception ex)
            //                    {
            //                        AssingMessageScript(ex.Message, "error", "Error", true);
            //                        CheckNotify();
            //                    }
            //                }
            //            }


            //            AssingMessageScript("Se dio de alta el Rol " + objRole.Nombre + " en el sistema.", "success", "Éxito", true);
            //            return RedirectToAction("Index");
            //        }


            //    }
            //    else
            //    {
            //        AssingMessageScript("Es necesario Seleccionar minimo un permiso", "error", "Error", true);
            //        CheckNotify();
            //        return View(objRole);
            //    }

            //}
            //return View(objRole);
        

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Role");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            RoleEntity objRole = proxy.GetRole(id);

            if (objRole == null)
            {
                return HttpNotFound();
            }
            return View(objRole);

            //PermisosAccesoDeniedEdit("Role");
            //ViewBag.New = true;
            //ObjRolModelSession = null;
            //RoleEntity nobjrol = new RoleEntity();
            //nobjrol = proxy.GetRole(id);

            //return View(nobjrol);
        }

        //
        // POST: /Role/Edit/5
        [HttpPost]
        public ActionResult Edit(RoleEntity objRole)
        {

            if (ModelState.IsValid)
            {
                objRole.BaseRemoteIp = RemoteIp;
                objRole.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateRole(objRole);
                if (result == -1)
                {
                    RoleEntity objResOpcMultsOld = proxy.GetRole(objRole.IdRol);

                    AssingMessageScript("El Rol ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objRole);
                }
                if (result > 0)
                {
                    AssingMessageScript("el Rol se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objRole);
            //ObjRolModelSession = objRole;
            //if (ModelState.IsValid)
            //{

            //    bool findChange = false;
            //    // List<ModuleEntity> lrm = new List<ModuleEntity>();
            //    foreach (ModuleEntity m in objRole.Modulos)
            //    {
            //        if (m.Permiso.OptAdd == true || m.Permiso.OptDelete == true || m.Permiso.OptSelect == true || m.Permiso.OptUpdate == true)
            //        {
            //            findChange = true;
            //            break;
            //        }
            //        else
            //        {
            //            findChange = false;
            //        }

            //    }
            //    if (findChange)
            //    {
            //        if ((objRole.IdRol == 1) && (objRole.Modulos.Where(x => x.IdModule == 17).FirstOrDefault().Permiso.OptSelect == false || objRole.Modulos.Where(x => x.IdModule == 17).FirstOrDefault().Permiso.OptUpdate == false))
            //        {
            //            AssingMessageScript("Es necesario que el Rol " + objRole.Nombre + "cuente con los permisos de Consulta y Editar ", "error", "Error", true);
            //            CheckNotify();
            //            return View(objRole);
            //        }

            //        objRole.Estado = true;
            //        objRole.BaseRemoteIp = RemoteIp;
            //        objRole.BaseIdUser = LoggedUserName;
            //        //int result = proxy.UpdateRole(objRole);
            //        int result;

            //        try
            //        {
            //            result = proxy.UpdateRole(objRole);
            //        }
            //        catch (Exception ex)
            //        {
            //            AssingMessageScript(ex.Message, "error", "Error", true);
            //            CheckNotify();
            //            return View(objRole);
            //        }

            //        if (result == -1)
            //        {

            //            AssingMessageScript("El Rol " + objRole.Nombre + " ya existe en el sistema.", "error", "Error", true);
            //            CheckNotify();
            //            return View(objRole);
            //        }
            //        if (result > 0)
            //        {
            //            if (objRole.Modulos.Count > 0)
            //            {
            //                List<PermisoEntity> lp = new List<PermisoEntity>();
            //                objRole.Modulos.ForEach(x => lp.Add(new PermisoEntity() { IdModule = x.IdModule, IdRol = objRole.IdRol, OptAdd = x.Permiso.OptAdd, OptSelect = x.Permiso.OptSelect, OptUpdate = x.Permiso.OptUpdate, OptDelete = x.Permiso.OptDelete }));
            //                if (lp.Count > 0)
            //                {
            //                    try
            //                    {
            //                        proxyPermiso.MargePermiso(LoggedUserName, RemoteIp, Globals.SerializeTool.SerializeList<PermisoEntity>(lp));
            //                    }
            //                    catch (Exception ex)
            //                    {
            //                        AssingMessageScript(ex.Message, "error", "Error", true);
            //                        CheckNotify();
            //                    }
            //                }
            //            }


            //            AssingMessageScript("Se Modifico el Rol " + objRole.Nombre + " en el sistema.", "success", "Éxito", true);
            //            return RedirectToAction("Index");
            //        }


            //    }
            //    else
            //    {
            //        AssingMessageScript("Es necesario Seleccionar minimo un permiso", "error", "Error", true);
            //        CheckNotify();
            //        return View(objRole);
            //    }

            //}
            //return View(objRole);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Nombre, String Descripcion, int? id, int? estado, bool? cambioestado)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<RoleEntity> listResult = null;
            List<RoleEntity> listRole = new List<RoleEntity>();
            RoleEntity objRole = new RoleEntity();
            RoleEntity objGetRole = new RoleEntity();


            if (cambioestado == true)
            {
                if (id == 1)
                {
                    var result = new { tipomsj = "error", titulomsj = "Aviso", Success = "False", Message = "No es Posible eliminar este rol por que es Requerido para el sistema" };
                    return Json(result, JsonRequestBehavior.AllowGet);
                }
                if (id != null)
                {
                    objGetRole = proxy.GetRole(id);
                    if (objGetRole != null)
                    {
                        objGetRole.BaseRemoteIp = RemoteIp;
                        objGetRole.BaseIdUser = LoggedUserName;

                        try
                        {
                            proxy.ChangeStateRole(objGetRole, objGetRole.Estado == true ? false : true);
                        }
                        catch (Exception ex)
                        {
                            AssingMessageScript(ex.Message, "error", "Error", true);
                            CheckNotify();
                        }

                        var result = new { tipomsj = "error", titulomsj = "Aviso", Success = "True", Message = "se cambio" };
                    }
                    else
                    {
                        var result = new { tipomsj = "error", titulomsj = "Aviso", Success = "False", Message = "error" };
                        return Json(result, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    var result = new { tipomsj = "error", titulomsj = "Aviso", Success = "False", Message = "Null id" };
                    return Json(result, JsonRequestBehavior.AllowGet);
                }

                listRole.Clear();
            }

            if ((Nombre != null && Nombre.ToString() != ""))
            {
                objRole.Nombre = Nombre;
            }

            if ((Descripcion != null && Descripcion.ToString() != ""))
            {
                objRole.Descripcion = Descripcion;
            }

            if (estado.HasValue)
                if (estado.Value == 1)
                    objRole.Estado = true;
                else if (estado.Value == 0)
                    objRole.Estado = false;

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetRolePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRole));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetRolePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objRole));
            }
            listResult.ToList().ForEach(x => listRole.Add(x));

            var RoleAsIPagedList = new StaticPagedList<RoleEntity>(listRole, pageNumber, pSize, listResult.totalCount);
            if (RoleAsIPagedList.Count > 0 || cambioestado == true)
            {
                return PartialView(RoleAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult LoadModule()
        {
            ViewData["Title"] = "Module";
            ViewData["Message"] = "Module";
            SoftvList<ModuleEntity> listResult = null;
            List<ModuleEntity> listModule = new List<ModuleEntity>();
            listResult = proxyModule.GetModulePagedListXml(1, 1, "");
            listResult.ToList().ForEach(x => listModule.Add(x));
            return PartialView(listModule);
        }

        [HttpPost]
        public ActionResult GetModules(List<ModuleEntity> listModule)
        {

            return PartialView(listModule);
        }





        public JsonResult Delete(int id)
        {
            proxy.DeleteRole(id);

            String mensaje = "{mensaje:'Se ha eliminado el Role'}";
            return Json(mensaje, JsonRequestBehavior.AllowGet);
        }





        public ActionResult GetList(string data, int draw, int start, int length)
        {
            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length);
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        private List<RoleEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {

            List<RoleEntity> lista = proxy.GetRoleList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<RoleEntity> data { get; set; }
        }














    }

}

