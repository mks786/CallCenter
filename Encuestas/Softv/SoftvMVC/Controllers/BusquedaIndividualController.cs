
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.BusquedaIndividualController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : BusquedaIndividualController
    /// File                    : BusquedaIndividualController.cs
    /// Creation date           : 01/06/2016
    /// Creation time           : 11:39 a. m.
    ///</summary>
    public partial class BusquedaIndividualController : BaseController, IDisposable
    {
        private SoftvService.BusquedaIndividualClient proxy = null;

        public BusquedaIndividualController()
        {


            proxy = new SoftvService.BusquedaIndividualClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("BusquedaIndividual");
            ViewData["Title"] = "BusquedaIndividual";
            ViewData["Message"] = "BusquedaIndividual";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<BusquedaIndividualEntity> listResult = proxy.GetBusquedaIndividualPagedListXml(pageNumber, pSize, SerializeTool.Serialize<BusquedaIndividualEntity>(new BusquedaIndividualEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("BusquedaIndividual");
            return View(new StaticPagedList<BusquedaIndividualEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            BusquedaIndividualEntity objBusquedaIndividual = proxy.GetBusquedaIndividual(id);
            if (objBusquedaIndividual == null)
            {
                return HttpNotFound();
            }
            return PartialView(objBusquedaIndividual);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("BusquedaIndividual");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(BusquedaIndividualEntity objBusquedaIndividual)
        {
            if (ModelState.IsValid)
            {

                objBusquedaIndividual.BaseRemoteIp = RemoteIp;
                objBusquedaIndividual.BaseIdUser = LoggedUserName;
                int result = proxy.AddBusquedaIndividual(objBusquedaIndividual);
                if (result == -1)
                {

                    AssingMessageScript("El BusquedaIndividual ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objBusquedaIndividual);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el BusquedaIndividual en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objBusquedaIndividual);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("BusquedaIndividual");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            BusquedaIndividualEntity objBusquedaIndividual = proxy.GetBusquedaIndividual(id);

            if (objBusquedaIndividual == null)
            {
                return HttpNotFound();
            }
            return View(objBusquedaIndividual);
        }

        //
        // POST: /BusquedaIndividual/Edit/5
        [HttpPost]
        public ActionResult Edit(BusquedaIndividualEntity objBusquedaIndividual)
        {
            if (ModelState.IsValid)
            {
                objBusquedaIndividual.BaseRemoteIp = RemoteIp;
                objBusquedaIndividual.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateBusquedaIndividual(objBusquedaIndividual);
                if (result == -1)
                {
                    BusquedaIndividualEntity objBusquedaIndividualOld = proxy.GetBusquedaIndividual(objBusquedaIndividual.Id);

                    AssingMessageScript("El BusquedaIndividual ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objBusquedaIndividual);
                }
                if (result > 0)
                {
                    AssingMessageScript("El BusquedaIndividual se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objBusquedaIndividual);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? Contrato, String Nombre, String Telefono, String Celular, String Calle, String Numero, String Colonia, String Ciudad)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<BusquedaIndividualEntity> listResult = null;
            List<BusquedaIndividualEntity> listBusquedaIndividual = new List<BusquedaIndividualEntity>();
            BusquedaIndividualEntity objBusquedaIndividual = new BusquedaIndividualEntity();
            BusquedaIndividualEntity objGetBusquedaIndividual = new BusquedaIndividualEntity();


            if ((Contrato != null))
            {
                objBusquedaIndividual.Contrato = Contrato;
            }

            if ((Nombre != null && Nombre.ToString() != ""))
            {
                objBusquedaIndividual.Nombre = Nombre;
            }

            if ((Telefono != null && Telefono.ToString() != ""))
            {
                objBusquedaIndividual.Telefono = Telefono;
            }

            if ((Celular != null && Celular.ToString() != ""))
            {
                objBusquedaIndividual.Celular = Celular;
            }

            if ((Calle != null && Calle.ToString() != ""))
            {
                objBusquedaIndividual.Calle = Calle;
            }

            if ((Numero != null && Numero.ToString() != ""))
            {
                objBusquedaIndividual.Numero = Numero;
            }

            if ((Colonia != null && Colonia.ToString() != ""))
            {
                objBusquedaIndividual.Colonia = Colonia;
            }

            if ((Ciudad != null && Ciudad.ToString() != ""))
            {
                objBusquedaIndividual.Ciudad = Ciudad;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetBusquedaIndividualPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objBusquedaIndividual));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetBusquedaIndividualPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objBusquedaIndividual));
            }
            listResult.ToList().ForEach(x => listBusquedaIndividual.Add(x));

            var BusquedaIndividualAsIPagedList = new StaticPagedList<BusquedaIndividualEntity>(listBusquedaIndividual, pageNumber, pSize, listResult.totalCount);
            if (BusquedaIndividualAsIPagedList.Count > 0)
            {
                return PartialView(BusquedaIndividualAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteBusquedaIndividual(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de BusquedaIndividual Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de BusquedaIndividual No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }




        public ActionResult GetList(string data, int draw, int start, int length)
        {

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length);
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }


        private List<BusquedaIndividualEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {
            ConexionController C = new ConexionController();
           
            List<BusquedaIndividualEntity> lista = proxy.GetBusquedaIndividualList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }


        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<BusquedaIndividualEntity> data { get; set; }
        }


    }

}

