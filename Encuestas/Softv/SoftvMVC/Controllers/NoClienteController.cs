
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.NoClienteController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : NoClienteController
    /// File                    : NoClienteController.cs
    /// Creation date           : 14/06/2016
    /// Creation time           : 10:34 a. m.
    ///</summary>
    public partial class NoClienteController : BaseController, IDisposable
    {
        private SoftvService.NoClienteClient proxy = null;

        public NoClienteController()
        {

            proxy = new SoftvService.NoClienteClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("NoCliente");
            ViewData["Title"] = "NoCliente";
            ViewData["Message"] = "NoCliente";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<NoClienteEntity> listResult = proxy.GetNoClientePagedListXml(pageNumber, pSize, SerializeTool.Serialize<NoClienteEntity>(new NoClienteEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("NoCliente");
            return View(new StaticPagedList<NoClienteEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            NoClienteEntity objNoCliente = proxy.GetNoCliente(id);
            if (objNoCliente == null)
            {
                return HttpNotFound();
            }
            return PartialView(objNoCliente);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("NoCliente");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(NoClienteEntity objNoCliente)
        {
            if (ModelState.IsValid)
            {

                objNoCliente.BaseRemoteIp = RemoteIp;
                objNoCliente.BaseIdUser = LoggedUserName;
                int result = proxy.AddNoCliente(objNoCliente);
                if (result == -1)
                {

                    AssingMessageScript("El NoCliente ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objNoCliente);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el NoCliente en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objNoCliente);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("NoCliente");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            NoClienteEntity objNoCliente = proxy.GetNoCliente(id);

            if (objNoCliente == null)
            {
                return HttpNotFound();
            }
            return View(objNoCliente);
        }

        //
        // POST: /NoCliente/Edit/5
        [HttpPost]
        public ActionResult Edit(NoClienteEntity objNoCliente)
        {
            if (ModelState.IsValid)
            {
                objNoCliente.BaseRemoteIp = RemoteIp;
                objNoCliente.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateNoCliente(objNoCliente);
                if (result == -1)
                {
                    NoClienteEntity objNoClienteOld = proxy.GetNoCliente(objNoCliente.Id);

                    AssingMessageScript("El NoCliente ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objNoCliente);
                }
                if (result > 0)
                {
                    AssingMessageScript("El NoCliente se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objNoCliente);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? IdLlamada, String Nombre, String Direccion, String Telefono, String Celular, String Email)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<NoClienteEntity> listResult = null;
            List<NoClienteEntity> listNoCliente = new List<NoClienteEntity>();
            NoClienteEntity objNoCliente = new NoClienteEntity();
            NoClienteEntity objGetNoCliente = new NoClienteEntity();


            if ((IdLlamada != null))
            {
                objNoCliente.IdLlamada = IdLlamada;
            }

            if ((Nombre != null && Nombre.ToString() != ""))
            {
                objNoCliente.Nombre = Nombre;
            }

            if ((Direccion != null && Direccion.ToString() != ""))
            {
                objNoCliente.Direccion = Direccion;
            }

            if ((Telefono != null && Telefono.ToString() != ""))
            {
                objNoCliente.Telefono = Telefono;
            }

            if ((Celular != null && Celular.ToString() != ""))
            {
                objNoCliente.Celular = Celular;
            }

            if ((Email != null && Email.ToString() != ""))
            {
                objNoCliente.Email = Email;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetNoClientePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objNoCliente));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetNoClientePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objNoCliente));
            }
            listResult.ToList().ForEach(x => listNoCliente.Add(x));

            var NoClienteAsIPagedList = new StaticPagedList<NoClienteEntity>(listNoCliente, pageNumber, pSize, listResult.totalCount);
            if (NoClienteAsIPagedList.Count > 0)
            {
                return PartialView(NoClienteAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteNoCliente(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de NoCliente Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de NoCliente No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

