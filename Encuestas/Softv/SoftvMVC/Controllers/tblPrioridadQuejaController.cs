
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.tblPrioridadQuejaController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : tblPrioridadQuejaController
    /// File                    : tblPrioridadQuejaController.cs
    /// Creation date           : 08/06/2016
    /// Creation time           : 10:53 a. m.
    ///</summary>
    public partial class tblPrioridadQuejaController : BaseController, IDisposable
    {
        private SoftvService.ItblPrioridadQuejaClient proxy = null;

        public tblPrioridadQuejaController()
        {


            proxy = new SoftvService.ItblPrioridadQuejaClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("tblPrioridadQueja");
            ViewData["Title"] = "tblPrioridadQueja";
            ViewData["Message"] = "tblPrioridadQueja";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<tblPrioridadQuejaEntity> listResult = proxy.GettblPrioridadQuejaPagedListXml(pageNumber, pSize, SerializeTool.Serialize<tblPrioridadQuejaEntity>(new tblPrioridadQuejaEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("tblPrioridadQueja");
            return View(new StaticPagedList<tblPrioridadQuejaEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            tblPrioridadQuejaEntity objtblPrioridadQueja = proxy.GettblPrioridadQueja(id);
            if (objtblPrioridadQueja == null)
            {
                return HttpNotFound();
            }
            return PartialView(objtblPrioridadQueja);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("tblPrioridadQueja");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(tblPrioridadQuejaEntity objtblPrioridadQueja)
        {
            if (ModelState.IsValid)
            {

                objtblPrioridadQueja.BaseRemoteIp = RemoteIp;
                objtblPrioridadQueja.BaseIdUser = LoggedUserName;
                int result = proxy.AddtblPrioridadQueja(objtblPrioridadQueja);
                if (result == -1)
                {

                    AssingMessageScript("El tblPrioridadQueja ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objtblPrioridadQueja);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el tblPrioridadQueja en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objtblPrioridadQueja);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("tblPrioridadQueja");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            tblPrioridadQuejaEntity objtblPrioridadQueja = proxy.GettblPrioridadQueja(id);

            if (objtblPrioridadQueja == null)
            {
                return HttpNotFound();
            }
            return View(objtblPrioridadQueja);
        }

        //
        // POST: /tblPrioridadQueja/Edit/5
        [HttpPost]
        public ActionResult Edit(tblPrioridadQuejaEntity objtblPrioridadQueja)
        {
            if (ModelState.IsValid)
            {
                objtblPrioridadQueja.BaseRemoteIp = RemoteIp;
                objtblPrioridadQueja.BaseIdUser = LoggedUserName;
                int result = proxy.UpdatetblPrioridadQueja(objtblPrioridadQueja);
                if (result == -1)
                {
                    tblPrioridadQuejaEntity objtblPrioridadQuejaOld = proxy.GettblPrioridadQueja(objtblPrioridadQueja.clvPrioridadQueja);

                    AssingMessageScript("El tblPrioridadQueja ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objtblPrioridadQueja);
                }
                if (result > 0)
                {
                    AssingMessageScript("El tblPrioridadQueja se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objtblPrioridadQueja);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Descripcion)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<tblPrioridadQuejaEntity> listResult = null;
            List<tblPrioridadQuejaEntity> listtblPrioridadQueja = new List<tblPrioridadQuejaEntity>();
            tblPrioridadQuejaEntity objtblPrioridadQueja = new tblPrioridadQuejaEntity();
            tblPrioridadQuejaEntity objGettblPrioridadQueja = new tblPrioridadQuejaEntity();


            if ((Descripcion != null && Descripcion.ToString() != ""))
            {
                objtblPrioridadQueja.Descripcion = Descripcion;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GettblPrioridadQuejaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objtblPrioridadQueja));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GettblPrioridadQuejaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objtblPrioridadQueja));
            }
            listResult.ToList().ForEach(x => listtblPrioridadQueja.Add(x));

            var tblPrioridadQuejaAsIPagedList = new StaticPagedList<tblPrioridadQuejaEntity>(listtblPrioridadQueja, pageNumber, pSize, listResult.totalCount);
            if (tblPrioridadQuejaAsIPagedList.Count > 0)
            {
                return PartialView(tblPrioridadQuejaAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeletetblPrioridadQueja(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de tblPrioridadQueja Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de tblPrioridadQueja No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

