
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;
using System.Data.SqlClient;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.COLONIAController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : COLONIAController
    /// File                    : COLONIAController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:40 p. m.
    ///</summary>
    public partial class COLONIAController : BaseController, IDisposable
    {
        private SoftvService.COLONIAClient proxy = null;

        public COLONIAController()
        {


            proxy = new SoftvService.COLONIAClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("COLONIA");
            ViewData["Title"] = "COLONIA";
            ViewData["Message"] = "COLONIA";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<COLONIAEntity> listResult = proxy.GetCOLONIAPagedListXml(pageNumber, pSize, SerializeTool.Serialize<COLONIAEntity>(new COLONIAEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("COLONIA");
            return View(new StaticPagedList<COLONIAEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public class ColoniaWrapper
        {
            public int clv_colonia { get; set; }
            public string Nombre { get; set; }

            public int ciudad { get; set; }
            public int plaza { get; set; }
        }
        public ActionResult GetColoniaByCiudad(int idciudad,int plaza)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;

            List<ColoniaWrapper> lista = new List<ColoniaWrapper>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            comandoSql = new SqlCommand("SELECT x1.Clv_Colonia,x1.Nombre,x2.Clv_Ciudad FROM COLONIAS X1 JOIN CVECOLCIU X2 ON X1.Clv_Colonia=X2.Clv_Colonia WHERE X2.Clv_Ciudad="+idciudad+"order by Nombre");
            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    ColoniaWrapper COLONIA = new ColoniaWrapper();
                    COLONIA.clv_colonia = Int32.Parse(reader[0].ToString());
                    COLONIA.Nombre = reader[1].ToString();
                    COLONIA.plaza = plaza;
                    COLONIA.ciudad = Int32.Parse(reader[2].ToString());
                    lista.Add(COLONIA);
                }
            }


            return Json(lista, JsonRequestBehavior.AllowGet);
        }


        //public ActionResult GetColonia()
        //{
        //    return Json(proxy.GetCOLONIAList(), JsonRequestBehavior.AllowGet);
        //}

        public class DatosTipoCliente
        {
            public int clv_colonia { get; set; }
            public String Nombre { get; set; }
        }


        public ActionResult GetColonia(int numModal, int idConexion)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(idConexion));
            List<DatosTipoCliente> lista = new List<DatosTipoCliente>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec DatosTipoCliente " + numModal);

                //comandoSql = new SqlCommand("exec DatosTipoCliente " + numModal + ", " + idConexion + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DatosTipoCliente datos = new DatosTipoCliente();
                        datos.clv_colonia = Convert.ToInt32(reader[0]);
                        datos.Nombre = reader[5].ToString();
                        lista.Add(datos);
                    }
                }
            }
            catch
            { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }



    }

}

