
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.PermisoController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : PermisoController
    /// File                    : PermisoController.cs
    /// Creation date           : 30/05/2016
    /// Creation time           : 05:17 p. m.
    ///</summary>
    public partial class PermisoController : BaseController, IDisposable
    {
        private SoftvService.PermisoClient proxy = null;

        private SoftvService.RoleClient proxyRole = null;

        private SoftvService.ModuleClient proxyModule = null;

        public PermisoController()
        {


            proxy = new SoftvService.PermisoClient();

            proxyRole = new SoftvService.RoleClient();

            proxyModule = new SoftvService.ModuleClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyRole = new SoftvService.RoleClient();
            if (proxyRole != null)
            {
                if (proxyRole.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyRole.Close();
                }
            }

            proxyModule = new SoftvService.ModuleClient();
            if (proxyModule != null)
            {
                if (proxyModule.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyModule.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            //PermisosAcceso("Permiso");
            //ViewData["Title"] = "Permiso";
            //ViewData["Message"] = "Permiso";
            //int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            //int pageNumber = (page ?? 1);
            //SoftvList<PermisoEntity> listResult = proxy.GetPermisoPagedListXml(pageNumber, pSize, SerializeTool.Serialize<PermisoEntity>(new PermisoEntity()));


            //List<RoleEntity> lstRole = new List<RoleEntity>();
            //lstRole.Add(new RoleEntity() { IdRol = null, Nombre = "Todos" });
            //lstRole.AddRange(proxyRole.GetRoleList().OrderBy(x => x.Nombre.Trim()));
            //ViewBag.IdRoltxt = new SelectList(lstRole, "IdRol", "Nombre");

            //List<ModuleEntity> lstModule = new List<ModuleEntity>();
            //lstModule.Add(new ModuleEntity() { IdModule = null, Description = "Todos" });
            //lstModule.AddRange(proxyModule.GetModuleList().OrderBy(x => x.Description.Trim()));
            //ViewBag.IdModuletxt = new SelectList(lstModule, "IdModule", "Nombre");

            //CheckNotify();
            //ViewBag.CustomScriptsDefault = BuildScriptsDefault("Permiso");
            //return View(new StaticPagedList<PermisoEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
           
            List<PermisoEntity> permisos = proxy.GetPermisoList();
            ViewData["Permiso"] = permisos;


            ViewData["Roles"] = proxyRole.GetRoleList();

            ViewData["Module"] = proxyModule.GetModuleList();


            return View();

        }










        public ActionResult GetList(string cadena, int draw, int start, int length)
        {

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            if(cadena == null){
                dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length);
            }else if(cadena != null){
                dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length).Where(o=>o.Rol.ToUpper().Contains(cadena.ToUpper()) || o.Modulo.ToUpper().Contains(cadena.ToUpper())).ToList();
            }
            
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }


        private List<PermisoEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {

            List<PermisoEntity> lista = proxy.GetPermisoList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }


        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<PermisoEntity> data { get; set; }
        }

































        public ActionResult Details(int id = 0)
        {
            PermisoEntity objPermiso = proxy.GetPermiso(id);
            if (objPermiso == null)
            {
                return HttpNotFound();
            }
            return PartialView(objPermiso);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("Permiso");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            //ViewBag.VBRole = new SelectList(proxyRole.GetRoleList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdRol", "Nombre");

            //ViewBag.VBModule = new SelectList(proxyModule.GetModuleList().OrderBy(x => x.Description.Trim()).ToList(), "IdModule", "Description");

            return View();
        }

        [HttpPost]
        public ActionResult Create(PermisoEntity objPermiso)
        {
            if (ModelState.IsValid)
            {

                objPermiso.BaseRemoteIp = RemoteIp;
                objPermiso.BaseIdUser = LoggedUserName;
                int result = proxy.AddPermiso(objPermiso);
                if (result == -1)
                {

                    ViewBag.VBRole = new SelectList(proxyRole.GetRoleList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdRol", "Nombre", objPermiso.IdRol);

                    ViewBag.VBModule = new SelectList(proxyModule.GetModuleList().OrderBy(x => x.Description.Trim()).ToList(), "IdModule", "Description", objPermiso.IdModule);

                    AssingMessageScript("El Permiso ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objPermiso);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el Permiso en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objPermiso);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("Permiso");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            PermisoEntity objPermiso = proxy.GetPermiso(id);

            //ViewBag.VBRole = new SelectList(proxyRole.GetRoleList().OrderBy(x => x.Nombre.Trim()).ToList(), "IdRol", "Nombre");

            //ViewBag.VBModule = new SelectList(proxyModule.GetModuleList().OrderBy(x => x.Description.Trim()).ToList(), "IdModule", "Description");

            if (objPermiso == null)
            {
                return HttpNotFound();
            }
            return View(objPermiso);
        }

        //
        // POST: /Permiso/Edit/5
        [HttpPost]
        public ActionResult Edit(PermisoEntity objPermiso)
        {
            if (ModelState.IsValid)
            {
                objPermiso.BaseRemoteIp = RemoteIp;
                objPermiso.BaseIdUser = LoggedUserName;
                int result = proxy.UpdatePermiso(objPermiso);
                if (result == -1)
                {
                    PermisoEntity objPermisoOld = proxy.GetPermiso(objPermiso.IdPermiso);

                    //ViewBag.VBRole = new SelectList(proxyRole.GetRoleList().Where(x => x.IdRol == objPermisoOld.IdRol).OrderBy(x => x.Nombre.Trim()).ToList(), "IdRol", "Nombre", objPermiso.IdRol);

                    //ViewBag.VBModule = new SelectList(proxyModule.GetModuleList().Where(x => x.IdModule == objPermisoOld.IdModule).OrderBy(x => x.Description.Trim()).ToList(), "IdModule", "Description", objPermiso.IdModule);

                    AssingMessageScript("El Permiso ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objPermiso);
                }
                if (result > 0)
                {
                    AssingMessageScript("El Permiso se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objPermiso);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, bool? OptAdd, bool? OptSelect, bool? OptUpdate, bool? OptDelete, int? IdRol, int? IdModule)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<PermisoEntity> listResult = null;
            List<PermisoEntity> listPermiso = new List<PermisoEntity>();
            PermisoEntity objPermiso = new PermisoEntity();
            PermisoEntity objGetPermiso = new PermisoEntity();


            if ((OptAdd != null))
            {
                objPermiso.OptAdd = OptAdd;
            }

            if ((OptSelect != null))
            {
                objPermiso.OptSelect = OptSelect;
            }

            if ((OptUpdate != null))
            {
                objPermiso.OptUpdate = OptUpdate;
            }

            if ((OptDelete != null))
            {
                objPermiso.OptDelete = OptDelete;
            }

            if ((IdRol != null))
            {
                objPermiso.IdRol = IdRol;
            }

            if ((IdModule != null))
            {
                objPermiso.IdModule = IdModule;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetPermisoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objPermiso));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetPermisoPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objPermiso));
            }
            listResult.ToList().ForEach(x => listPermiso.Add(x));

            var PermisoAsIPagedList = new StaticPagedList<PermisoEntity>(listPermiso, pageNumber, pSize, listResult.totalCount);
            if (PermisoAsIPagedList.Count > 0)
            {
                return PartialView(PermisoAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeletePermiso(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de Permiso Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de Permiso No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult getOneRol(int IdRol){

            RoleEntity permiso = proxyRole.GetRole(IdRol);
            return Json(permiso, JsonRequestBehavior.AllowGet);
        }
        public ActionResult getOneModule(int IdModule)
        {

            ModuleEntity modulo = proxyModule.GetModule(IdModule);
            return Json(modulo, JsonRequestBehavior.AllowGet);
        }

        public ActionResult getAllRoles()
        {

            List<RoleEntity> roles = proxyRole.GetRoleList();
            return Json(roles, JsonRequestBehavior.AllowGet);
        }
        public ActionResult getAllModules()
        {

            List<ModuleEntity> modules = proxyModule.GetModuleList();
            return Json(modules, JsonRequestBehavior.AllowGet);
        }


    }

}

