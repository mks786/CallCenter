
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CiudadServidorController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CiudadServidorController
    /// File                    : CiudadServidorController.cs
    /// Creation date           : 02/08/2016
    /// Creation time           : 12:53 p. m.
    ///</summary>
    public partial class CiudadServidorController : BaseController, IDisposable
    {
        private SoftvService.CiudadServidorClient proxy = null;

        private SoftvService.ConexionClient proxyConexion = null;

        public CiudadServidorController()
        {

            proxy = new SoftvService.CiudadServidorClient();

            proxyConexion = new SoftvService.ConexionClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyConexion = new SoftvService.ConexionClient();
            if (proxyConexion != null)
            {
                if (proxyConexion.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyConexion.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CiudadServidor");
            ViewData["Title"] = "CiudadServidor";
            ViewData["Message"] = "CiudadServidor";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<CiudadServidorEntity> listResult = proxy.GetCiudadServidorPagedListXml(pageNumber, pSize, SerializeTool.Serialize<CiudadServidorEntity>(new CiudadServidorEntity()));


            List<ConexionEntity> lstConexion = new List<ConexionEntity>();
            lstConexion.Add(new ConexionEntity() { IdConexion = null, Plaza = "Todos" });
            lstConexion.AddRange(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()));
            ViewBag.IdConexiontxt = new SelectList(lstConexion, "IdConexion", "Plaza");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("CiudadServidor");
            return View(new StaticPagedList<CiudadServidorEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            CiudadServidorEntity objCiudadServidor = proxy.GetCiudadServidor(id);
            if (objCiudadServidor == null)
            {
                return HttpNotFound();
            }
            return PartialView(objCiudadServidor);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("CiudadServidor");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza");

            return View();
        }

        [HttpPost]
        public ActionResult Create(CiudadServidorEntity objCiudadServidor)
        {
            if (ModelState.IsValid)
            {

                objCiudadServidor.BaseRemoteIp = RemoteIp;
                objCiudadServidor.BaseIdUser = LoggedUserName;
                int result = proxy.AddCiudadServidor(objCiudadServidor);
                if (result == -1)
                {

                    ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza", objCiudadServidor.Id);

                    AssingMessageScript("El CiudadServidor ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objCiudadServidor);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el CiudadServidor en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objCiudadServidor);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("CiudadServidor");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            CiudadServidorEntity objCiudadServidor = proxy.GetCiudadServidor(id);

            ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza");

            if (objCiudadServidor == null)
            {
                return HttpNotFound();
            }
            return View(objCiudadServidor);
        }

        //
        // POST: /CiudadServidor/Edit/5
        [HttpPost]
        public ActionResult Edit(CiudadServidorEntity objCiudadServidor)
        {
            if (ModelState.IsValid)
            {
                objCiudadServidor.BaseRemoteIp = RemoteIp;
                objCiudadServidor.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateCiudadServidor(objCiudadServidor);
                if (result == -1)
                {
                    CiudadServidorEntity objCiudadServidorOld = proxy.GetCiudadServidor(objCiudadServidor.Id);

                    ViewBag.VBConexion = new SelectList(proxyConexion.GetConexionList().Where(x => x.IdConexion == objCiudadServidorOld.Id).OrderBy(x => x.Plaza.Trim()).ToList(), "IdConexion", "Plaza", objCiudadServidor.Id);

                    AssingMessageScript("El CiudadServidor ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objCiudadServidor);
                }
                if (result > 0)
                {
                    AssingMessageScript("El CiudadServidor se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objCiudadServidor);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Ciudad, int? IdPlaza)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<CiudadServidorEntity> listResult = null;
            List<CiudadServidorEntity> listCiudadServidor = new List<CiudadServidorEntity>();
            CiudadServidorEntity objCiudadServidor = new CiudadServidorEntity();
            CiudadServidorEntity objGetCiudadServidor = new CiudadServidorEntity();


            if ((Ciudad != null && Ciudad.ToString() != ""))
            {
                objCiudadServidor.Ciudad = Ciudad;
            }

            if ((IdPlaza != null))
            {
                objCiudadServidor.IdPlaza = IdPlaza;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetCiudadServidorPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCiudadServidor));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetCiudadServidorPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCiudadServidor));
            }
            listResult.ToList().ForEach(x => listCiudadServidor.Add(x));

            var CiudadServidorAsIPagedList = new StaticPagedList<CiudadServidorEntity>(listCiudadServidor, pageNumber, pSize, listResult.totalCount);
            if (CiudadServidorAsIPagedList.Count > 0)
            {
                return PartialView(CiudadServidorAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteCiudadServidor(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de CiudadServidor Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de CiudadServidor No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }


    }

}

