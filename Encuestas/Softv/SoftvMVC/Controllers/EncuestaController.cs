
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;

using Globals;
using Newtonsoft.Json;
using System.Xml;
using System.Xml.Linq;
using iTextSharp.text.pdf;
using System.IO;
using iTextSharp.text;
using System.Text;


namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.EncuestaController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : EncuestaController
    /// File                    : EncuestaController.cs
    /// Creation date           : 29/04/2016
    /// Creation time           : 05:28 p. m.
    ///</summary>
    public partial class EncuestaController : BaseController, IDisposable
    {
        private SoftvService.EncuestaClient proxy = null;

        private SoftvService.PreguntaClient preguntasService = null;
        private SoftvService.TipoPreguntasClient TipoPreguntasService = null;
        private SoftvService.UsuarioClient proxyUsuario = null;
        private SoftvService.ResOpcMultsClient Respuestas = null;
        private SoftvService.RelPreguntaOpcMultsClient relpregunta_resp = null;
        private SoftvService.RelEncuestaClientesClient relenc_clientes = null;
        private SoftvService.RelEnProcesosClient rel_en_proces = null;
        private SoftvService.RelPreguntaEncuestasClient rel_preg_encuesta = null;
        private SoftvService.EstadisticaClient proxyEstadistica = null;

        public EncuestaController()
        {
            preguntasService = new SoftvService.PreguntaClient();

            proxy = new SoftvService.EncuestaClient();

            proxyUsuario = new SoftvService.UsuarioClient();

            Respuestas = new SoftvService.ResOpcMultsClient();

            relpregunta_resp = new SoftvService.RelPreguntaOpcMultsClient();

            relenc_clientes = new SoftvService.RelEncuestaClientesClient();

            rel_en_proces = new SoftvService.RelEnProcesosClient();

            rel_preg_encuesta = new SoftvService.RelPreguntaEncuestasClient();

            proxyEstadistica = new SoftvService.EstadisticaClient();
        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

            proxyUsuario = new SoftvService.UsuarioClient();
            if (proxyUsuario != null)
            {
                if (proxyUsuario.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyUsuario.Close();
                }
            }

        }





        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("Encuesta");
            ViewData["Title"] = "Encuesta";
            ViewData["Message"] = "Encuesta";




            List<UsuarioEntity> lstUsuario = new List<UsuarioEntity>();
            lstUsuario.Add(new UsuarioEntity() { IdUsuario = null, Nombre = "Todos" });
            lstUsuario.AddRange(proxyUsuario.GetUsuarioList().OrderBy(x => x.Nombre.Trim()));
            ViewBag.IdUsuariotxt = new SelectList(lstUsuario, "IdUsuario", "Nombre");

            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("Encuesta");
            return View();
        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<EncuestaEntity> data { get; set; }
        }

        public ActionResult GetList(string data, int draw, int start, int length)
        {

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;

            if (data != "")
            {
                dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length).Where(o => o.TituloEncuesta.ToLower().Contains(data.ToLower()) || o.Descripcion.Contains(data.ToLower()) || o.IdEncuesta.Value.ToString().Contains(data)).OrderByDescending(c => c.IdEncuesta).ToList();
            }
            else
            {
                dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length).OrderByDescending(c => c.IdEncuesta).ToList();
            }


            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        private List<EncuestaEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {

            List<EncuestaEntity> lista = proxy.GetEncuestaList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }


        private List<TipoPreguntasEntity> TipoPreguntas()
        {
            List<TipoPreguntasEntity> lista = TipoPreguntasService.GetTipoPreguntasList();
            return lista;
        }


        public class Detalle_encuesta
        {
            public EncuestaEntity Encuesta { get; set; }
            public List<Detalle_pregunta> Preguntas { get; set; }
        }

        public class Detalle_pregunta
        {
            public PreguntaEntity Pregunta { get; set; }
            public List<ResOpcMultsEntity> Respuestas { get; set; }

        }





        public ActionResult DeepDetails(int id)
        {
            Detalle_encuesta Encuesta = new Detalle_encuesta();
            List<Detalle_pregunta> Lista_de_preguntas = new List<Detalle_pregunta>();



            EncuestaEntity objEncuesta = proxy.GetEncuesta(id);
            Encuesta.Encuesta = objEncuesta;
            //List<PreguntaEntity> preguntas = preguntasService.GetPreguntaList().Where(o => o.RelPreguntaEncuestas.IdEncuesta == objEncuesta.IdEncuesta).ToList();
            List<RelPreguntaEncuestasEntity> lista_de_relaciones = rel_preg_encuesta.GetRelPreguntaEncuestasList().Where(x => x.IdEncuesta == objEncuesta.IdEncuesta).ToList();
            foreach (var a in lista_de_relaciones)
            {

                Detalle_pregunta pregunta = new Detalle_pregunta();
                List<ResOpcMultsEntity> r = new List<ResOpcMultsEntity>();
                pregunta.Pregunta = a.Pregunta;

                List<RelPreguntaOpcMultsEntity> relaciones = relpregunta_resp.GetRelPreguntaOpcMultsList().Where(x => x.IdPregunta == a.IdPregunta).ToList();

                foreach (var resp in relaciones)
                {

                    ResOpcMultsEntity respuestas = Respuestas.GetResOpcMultsList().Where(o => o.Id_ResOpcMult == resp.Id_ResOpcMult).Select(o => o).First();

                    r.Add(respuestas);
                }


                pregunta.Respuestas = r;




                Lista_de_preguntas.Add(pregunta);



            }


            Encuesta.Preguntas = Lista_de_preguntas;


            if (objEncuesta == null)
            {
                return HttpNotFound();
            }




            return Json(Encuesta, JsonRequestBehavior.AllowGet);
        }



        public ActionResult Details(int id)
        {
            Detalle_encuesta Encuesta = new Detalle_encuesta();
            List<Detalle_pregunta> Lista_de_preguntas = new List<Detalle_pregunta>();



            EncuestaEntity objEncuesta = proxy.GetEncuesta(id);
            Encuesta.Encuesta = objEncuesta;
            List<RelPreguntaEncuestasEntity> lista_de_relaciones = rel_preg_encuesta.GetRelPreguntaEncuestasList().Where(x => x.IdEncuesta == objEncuesta.IdEncuesta).ToList();

            // foreach( var a in lista_de_relaciones.)

            //  List<PreguntaEntity> preguntas = preguntasService.GetPreguntaList().Where(o => o.RelPreguntaEncuestas.IdEncuesta == objEncuesta.IdEncuesta).ToList();
            // preguntas.Where(o=> o.RelPreguntaEncuestas.IdEncuesta==objEncuesta.IdEncuesta);
            foreach (var a in lista_de_relaciones)
            {

                Detalle_pregunta pregunta = new Detalle_pregunta();
                List<ResOpcMultsEntity> r = new List<ResOpcMultsEntity>();
                pregunta.Pregunta = a.Pregunta;

                List<RelPreguntaOpcMultsEntity> relaciones = relpregunta_resp.GetRelPreguntaOpcMultsList().Where(x => x.IdPregunta == a.IdPregunta).ToList();

                foreach (var resp in relaciones)
                {

                    ResOpcMultsEntity respuestas = Respuestas.GetResOpcMultsList().Where(o => o.Id_ResOpcMult == resp.Id_ResOpcMult).Select(o => o).First();

                    r.Add(respuestas);
                }


                pregunta.Respuestas = r;




                Lista_de_preguntas.Add(pregunta);



            }





            if (objEncuesta == null)
            {
                return HttpNotFound();
            }

            ViewBag.IdEncuesta = Encuesta.Encuesta.IdEncuesta;
            ViewBag.NombreEncuesta = Encuesta.Encuesta.TituloEncuesta;
            ViewBag.Descripcion = Encuesta.Encuesta.Descripcion;
            ViewBag.FechaCreacion = Encuesta.Encuesta.FechaCreacion;
            ViewData["preguntas"] = Lista_de_preguntas;

            return View("PreView");
        }

        public class PreguntaEntity1
        {

            public string IdPregunta { get; set; }

            public string IdPregunta2 { get; set; }



            public String Pregunta { get; set; }

            public int IdTipoPregunta { get; set; }



        }

        public class ResOpcMultsEntity1
        {
            public string Id_ResOpcMult { get; set; }
            public String ResOpcMult { get; set; }

            public string Id_ResOpcMult2 { get; set; }
        }

        public ActionResult Create(EncuestaEntity encuesta, List<PreguntaEntity1> Preguntas, List<ResOpcMultsEntity1> respuestas, string usuario)
        {
            UsuarioEntity user = proxyUsuario.GetUsuarioList().Where(o => o.Usuario.ToLower() == usuario.ToLower()).FirstOrDefault();
            encuesta.FechaCreacion = DateTime.Now.ToShortDateString();
            encuesta.IdUsuario = user.IdUsuario.Value;

            XElement xe = XElement.Parse(Globals.SerializeTool.Serialize<EncuestaEntity>(encuesta));

            XElement xmll = XElement.Parse(Globals.SerializeTool.SerializeList<PreguntaEntity1>(Preguntas));

            XElement fg = XElement.Parse(Globals.SerializeTool.SerializeList<ResOpcMultsEntity1>(respuestas));



            xe.Add(xmll, fg);


            int result = proxy.AddEncuesta(xe.ToString());

            return null;
        }


        public ActionResult Update(EncuestaEntity encuesta, List<PreguntaEntity1> Preguntas, List<ResOpcMultsEntity1> respuestas, string usuario)
        {
            UsuarioEntity user = proxyUsuario.GetUsuarioList().Where(o => o.Usuario.ToLower() == usuario.ToLower()).FirstOrDefault();
            encuesta.FechaCreacion = DateTime.Now.ToShortDateString();
            encuesta.IdUsuario = user.IdUsuario.Value;

            XElement xe = XElement.Parse(Globals.SerializeTool.Serialize<EncuestaEntity>(encuesta));

            XElement xmll = XElement.Parse(Globals.SerializeTool.SerializeList<PreguntaEntity1>(Preguntas));

            XElement fg = XElement.Parse(Globals.SerializeTool.SerializeList<ResOpcMultsEntity1>(respuestas));

            xe.Add(xmll, fg);
            int result = proxy.UpdateEncuesta(xe.ToString());
            return null;
        }















        public JsonResult Delete(int id)
        {
            proxy.DeleteEncuesta(id);

            String mensaje = "{mensaje:'Se ha eliminado la Encuesta'}";
            return Json(mensaje, JsonRequestBehavior.AllowGet);
        }


        public class ObjEncuesta
        {
            public int cliente { get; set; }
            public int id_encuesta { get; set; }
            public int id_plaza { get; set; }
            public List<preguntas> pregunta { get; set; }

            public List<respuestas> respuestas { get; set; }

        }

        public class respuestas
        {
            public int id_pregunta { get; set; }
            public string respuesta { get; set; }

            public int id_respuesta { get; set; }


        }


        public class preguntas
        {
            public int id_pregunta { get; set; }

            public int tipoPregunta { get; set; }
            public string nombre { get; set; }
        }

        public ActionResult ListaRespuestas()
        {
            List<ResOpcMultsEntity> Lista = Respuestas.GetResOpcMultsList().ToList();
            return Json(Lista, JsonRequestBehavior.AllowGet);

        }

        public ActionResult EncuestaPDF(int idencuesta)
        {

            Guid g = Guid.NewGuid();

            string rutaarchivo = Server.MapPath("/Reportes") + g.ToString() + "Encuesta.pdf";
            iTextSharp.text.Document document = new iTextSharp.text.Document(PageSize.A4, 20, 20, 20, 20);
            PdfWriter writer = PdfWriter.GetInstance(document, new FileStream(rutaarchivo, FileMode.Create));
            document.Open();
            iTextSharp.text.html.simpleparser.HTMLWorker hw = new iTextSharp.text.html.simpleparser.HTMLWorker(document, null, null);
            string Contenido = contenidopdf(idencuesta);
            hw.Parse(new StringReader(Contenido));
            document.Close();
            return File(rutaarchivo, "application/pdf", "Encuesta.pdf");



        }

        public string contenidopdf(int IdEncuesta)
        {



            StringBuilder sb = new StringBuilder();


            EncuestaEntity objEncuesta = proxy.GetEncuesta(IdEncuesta);
            sb.Append("<br>");
            sb.Append(@"<table ><tr><td>");

            sb.Append(@"<h3 align=""center"" style=""font-size:24px; align:center;"" >" + objEncuesta.TituloEncuesta + "</h3>");
            sb.Append(@"<h4 align=""center"" >" + objEncuesta.Descripcion + "</h4>");
            sb.Append("<br/>");
            sb.Append("<h5>Nombre cliente:___________________________ &nbsp;&nbsp;Contrato________________ &nbsp;&nbsp;Fecha:_______________</h5>");
            sb.Append("</td></tr></table>");


            List<RelPreguntaEncuestasEntity> lista_de_relaciones = rel_preg_encuesta.GetRelPreguntaEncuestasList().Where(x => x.IdEncuesta == objEncuesta.IdEncuesta).ToList();

            foreach (var a in lista_de_relaciones)
            {
                sb.Append("<h5><b>" + a.Pregunta.Pregunta + "</b></h5><br>");

                if (a.Pregunta.IdTipoPregunta == 1)
                {
                    sb.Append(@"<table border=1 width=""400"" ><tr><td>&nbsp;</td></tr></table>");
                    sb.Append(@"<br/>");
                    sb.Append(@"<table border=1 width=""400"" ><tr><td>&nbsp;</td></tr></table>");
                    sb.Append(@"<br/>");
                    sb.Append(@"<table border=1 width=""400"" ><tr><td>&nbsp;</td></tr></table>");
                    sb.Append(@"<br/>");
                }
                else if (a.Pregunta.IdTipoPregunta == 2)
                {
                    sb.Append(@"<h5>Si( )");
                    sb.Append(@"<h5>No( )</h5>");
                    sb.Append(@"<br/>");
                }
                else
                {
                    List<RelPreguntaOpcMultsEntity> relaciones = relpregunta_resp.GetRelPreguntaOpcMultsList().Where(x => x.IdPregunta == a.IdPregunta).ToList();
                    sb.Append(@"<table border=""0"">");
                    foreach (var resp in relaciones)
                    {

                        ResOpcMultsEntity respuestas = Respuestas.GetResOpcMultsList().Where(o => o.Id_ResOpcMult == resp.Id_ResOpcMult).Select(o => o).First();
                        sb.Append(@"<tr><td><h5 style=""font-size:8px;"">( )" + respuestas.ResOpcMult + "</h5></td><tr/>");

                    }
                    sb.Append("</table>");

                }




            }
            return sb.ToString();
        }



        public ActionResult DatosEncuesta(ObjEncuesta encuesta)
        {
            /*Creando objeto RelEncuestaClientes*/
            RelEncuestaClientesEntity rel = new RelEncuestaClientesEntity();

            rel.IdEncuesta = encuesta.id_encuesta;
            rel.Contrato = encuesta.cliente;
            rel.FechaApli = DateTime.Now;
            rel.IdConexion = encuesta.id_plaza;
            int result = relenc_clientes.AddRelEncuestaClientes(rel);



            foreach (var a in encuesta.pregunta)
            {
                // a.id_pregunta
                RelEnProcesosEntity re = new RelEnProcesosEntity();
                re.IdPregunta = a.id_pregunta;
                re.IdProceso = result;
                foreach (var b in encuesta.respuestas.Where(o => o.id_pregunta == a.id_pregunta))
                {
                    if (a.tipoPregunta == 1)
                    {

                        re.RespAbi = b.respuesta;
                        int result2 = rel_en_proces.AddRelEnProcesos(re);
                    }
                    else if (a.tipoPregunta == 2)
                    {
                        bool boleano;
                        if (b.respuesta == "0")
                        {
                            boleano = false;
                        }
                        else
                        {
                            boleano = true;
                        }
                        re.RespCerrada = boleano;
                        int result2 = rel_en_proces.AddRelEnProcesos(re);
                    }
                    else
                    {
                        re.Id_ResOpcMult = Int32.Parse(b.respuesta);
                        int result2 = rel_en_proces.AddRelEnProcesos(re);
                    }
                }



            }

            return Json(encuesta, JsonRequestBehavior.AllowGet);

        }






        public ActionResult getGrafica(int plaza, int idencuesta, DateTime finicio, DateTime ffin)
        {
            List<EstadisticaEntity> lista = new List<EstadisticaEntity>();
            lista = proxyEstadistica.GetEstadisticaList(plaza, idencuesta, finicio, ffin);
            return Json(lista, JsonRequestBehavior.AllowGet);
        }
        public ActionResult getAllEncuestas()
        {
            List<EncuestaEntity> lista = new List<EncuestaEntity>();
            lista = proxy.GetEncuestaList();
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

    }

}

