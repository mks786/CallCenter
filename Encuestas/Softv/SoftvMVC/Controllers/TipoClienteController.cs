
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

using System.Data;
using System.Data.SqlClient;
using Softv.Entities;
using System.Configuration;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.TipoClienteController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : TipoClienteController
    /// File                    : TipoClienteController.cs
    /// Creation date           : 04/05/2016
    /// Creation time           : 01:29 p. m.
    ///</summary>
    public partial class TipoClienteController : BaseController, IDisposable
    {
        private SoftvService.TipoClienteClient proxy = null;

        public TipoClienteController()
        {

            proxy = new SoftvService.TipoClienteClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("TipoCliente");
            ViewData["Title"] = "TipoCliente";
            ViewData["Message"] = "TipoCliente";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<TipoClienteEntity> listResult = proxy.GetTipoClientePagedListXml(pageNumber, pSize, SerializeTool.Serialize<TipoClienteEntity>(new TipoClienteEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("TipoCliente");
            return View(new StaticPagedList<TipoClienteEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            TipoClienteEntity objTipoCliente = proxy.GetTipoCliente(id);
            if (objTipoCliente == null)
            {
                return HttpNotFound();
            }
            return PartialView(objTipoCliente);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("TipoCliente");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(TipoClienteEntity objTipoCliente)
        {
            if (ModelState.IsValid)
            {

                objTipoCliente.BaseRemoteIp = RemoteIp;
                objTipoCliente.BaseIdUser = LoggedUserName;
                int result = proxy.AddTipoCliente(objTipoCliente);
                if (result == -1)
                {

                    AssingMessageScript("El TipoCliente ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objTipoCliente);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el TipoCliente en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objTipoCliente);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("TipoCliente");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            TipoClienteEntity objTipoCliente = proxy.GetTipoCliente(id);

            if (objTipoCliente == null)
            {
                return HttpNotFound();
            }
            return View(objTipoCliente);
        }

        //
        // POST: /TipoCliente/Edit/5
        [HttpPost]
        public ActionResult Edit(TipoClienteEntity objTipoCliente)
        {
            if (ModelState.IsValid)
            {
                objTipoCliente.BaseRemoteIp = RemoteIp;
                objTipoCliente.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateTipoCliente(objTipoCliente);
                if (result == -1)
                {
                    TipoClienteEntity objTipoClienteOld = proxy.GetTipoCliente(objTipoCliente.Clv_TipoCliente);

                    AssingMessageScript("El TipoCliente ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objTipoCliente);
                }
                if (result > 0)
                {
                    AssingMessageScript("El TipoCliente se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objTipoCliente);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Descripcion)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<TipoClienteEntity> listResult = null;
            List<TipoClienteEntity> listTipoCliente = new List<TipoClienteEntity>();
            TipoClienteEntity objTipoCliente = new TipoClienteEntity();
            TipoClienteEntity objGetTipoCliente = new TipoClienteEntity();


            if ((Descripcion != null && Descripcion.ToString() != ""))
            {
                objTipoCliente.Descripcion = Descripcion;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetTipoClientePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTipoCliente));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetTipoClientePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objTipoCliente));
            }
            listResult.ToList().ForEach(x => listTipoCliente.Add(x));

            var TipoClienteAsIPagedList = new StaticPagedList<TipoClienteEntity>(listTipoCliente, pageNumber, pSize, listResult.totalCount);
            if (TipoClienteAsIPagedList.Count > 0)
            {
                return PartialView(TipoClienteAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteTipoCliente(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de TipoCliente Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de TipoCliente No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }
        //public ActionResult GetTipoClientes()
        //{
        //    return Json(proxy.GetTipoClienteList(), JsonRequestBehavior.AllowGet);
        //}


        public class DatosTipoCliente
        {
            public int Clv_TipoCliente { get; set; }
            public String Descripcion { get; set; }
        }


        public ActionResult GetTipoClientes(int numModal, int idConexion)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(idConexion));
            List<DatosTipoCliente> lista = new List<DatosTipoCliente>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec DatosTipoCliente "+numModal);

                //comandoSql = new SqlCommand("exec DatosTipoCliente " + numModal + ", " + idConexion + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DatosTipoCliente datos = new DatosTipoCliente();
                        datos.Clv_TipoCliente = Convert.ToInt32(reader[0]);
                        datos.Descripcion = reader[1].ToString();
                        lista.Add(datos);
                    }
                }
            }
            catch
            { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

    }

}

