
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;
using System.Data.SqlClient;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CIUDADController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CIUDADController
    /// File                    : CIUDADController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:40 p. m.
    ///</summary>
    public partial class CIUDADController : BaseController, IDisposable
    {
        private SoftvService.CIUDADClient proxy = null;
        private SoftvService.ConexionClient proxyCon = null;

        public CIUDADController()
        {

            proxy = new SoftvService.CIUDADClient();
            proxyCon = new SoftvService.ConexionClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CIUDAD");
            ViewData["Title"] = "CIUDAD";
            ViewData["Message"] = "CIUDAD";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<CIUDADEntity> listResult = proxy.GetCIUDADPagedListXml(pageNumber, pSize, SerializeTool.Serialize<CIUDADEntity>(new CIUDADEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("CIUDAD");
            return View(new StaticPagedList<CIUDADEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }



        public class CIUDADEntity2
        {
            public int Clv_Ciudad{get; set;}
            public string Nombre{get; set; }
            public int plaza { get; set; }
        }

        public ActionResult GetCiudadByPlaza(int plaza){
             ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            
            List<CIUDADEntity2> lista = new List<CIUDADEntity2>();
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(plaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
              comandoSql = new SqlCommand("SELECT * FROM CIUDADES");
            
            
            comandoSql.Connection = conexionSQL;
            SqlDataReader reader = comandoSql.ExecuteReader();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    CIUDADEntity2 ciudad = new CIUDADEntity2();
                    ciudad.Clv_Ciudad=Int32.Parse(reader[0].ToString());
                    ciudad.Nombre=reader[1].ToString();
                    ciudad.plaza = plaza;
                    lista.Add(ciudad);
                }
            }


            return Json(lista,JsonRequestBehavior.AllowGet);
        }



        //public ActionResult GetCiudad()
        //{
        //    return Json(proxy.GetCIUDADList(), JsonRequestBehavior.AllowGet);
        //}

        public class DatosCiudad
        {
            public int Clv_Ciudad { get; set; }
            public String Nombre { get; set; }
        }

        public ActionResult GetCiudad(int numModal, int idConexion)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(idConexion));
            List<DatosCiudad> lista = new List<DatosCiudad>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("exec DatosTipoCliente " + numModal);

                //comandoSql = new SqlCommand("exec DatosTipoCliente " + numModal + ", " + idConexion + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DatosCiudad datos = new DatosCiudad();
                        datos.Clv_Ciudad = Convert.ToInt32(reader[0]);
                        datos.Nombre = reader[1].ToString();
                        lista.Add(datos);
                    }
                }
            }
            catch
            { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

        public ActionResult getAllCiudades()
        {
            var lista = proxyCon.GetConexionList();
            List<CiudadServidorEntity> ciudades = new List<CiudadServidorEntity>();
            foreach (var item in lista)
            {
                ConexionController c = new ConexionController();
                SqlCommand comandoSql;
                int id = Int32.Parse(item.IdConexion.ToString());
                SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(id));
                try
                {
                    conexionSQL2.Open();
                }
                catch
                { }
                try
                {
                    comandoSql = new SqlCommand("SELECT * FROM CIUDADES");
                    comandoSql.Connection = conexionSQL2;
                    SqlDataReader reader = comandoSql.ExecuteReader();
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            CiudadServidorEntity datos = new CiudadServidorEntity();
                            datos.IdPlaza = id;
                            datos.Ciudad = reader[1].ToString();
                            ciudades.Add(datos);
                        }
                    }
                }
                catch{ }
            }
            ciudades = ciudades.Distinct().OrderBy(o=>o.Ciudad).ToList();
            return Json(ciudades,JsonRequestBehavior.AllowGet);
        }
    }

}

