
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.ResOpcMultsController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : ResOpcMultsController
    /// File                    : ResOpcMultsController.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:17 p. m.
    ///</summary>
    public partial class ResOpcMultsController : BaseController, IDisposable
    {
        private SoftvService.ResOpcMultsClient proxy = null;

        public ResOpcMultsController()
        {


            proxy = new SoftvService.ResOpcMultsClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("ResOpcMults");
            ViewData["Title"] = "ResOpcMults";
            ViewData["Message"] = "ResOpcMults";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<ResOpcMultsEntity> listResult = proxy.GetResOpcMultsPagedListXml(pageNumber, pSize, SerializeTool.Serialize<ResOpcMultsEntity>(new ResOpcMultsEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("ResOpcMults");
            return View(new StaticPagedList<ResOpcMultsEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            ResOpcMultsEntity objResOpcMults = proxy.GetResOpcMults(id);
            if (objResOpcMults == null)
            {
                return HttpNotFound();
            }
            return PartialView(objResOpcMults);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("ResOpcMults");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(ResOpcMultsEntity objResOpcMults)
        {
            if (ModelState.IsValid)
            {

                objResOpcMults.BaseRemoteIp = RemoteIp;
                objResOpcMults.BaseIdUser = LoggedUserName;
                int result = proxy.AddResOpcMults(objResOpcMults);
                if (result == -1)
                {

                    AssingMessageScript("La Respuesta de Opción Multiple ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objResOpcMults);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta la Respuesta de Opción Multiple en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objResOpcMults);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("ResOpcMults");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            ResOpcMultsEntity objResOpcMults = proxy.GetResOpcMults(id);

            if (objResOpcMults == null)
            {
                return HttpNotFound();
            }
            return View(objResOpcMults);
        }

        //
        // POST: /ResOpcMults/Edit/5
        [HttpPost]
        public ActionResult Edit(ResOpcMultsEntity objResOpcMults)
        {
            if (ModelState.IsValid)
            {
                objResOpcMults.BaseRemoteIp = RemoteIp;
                objResOpcMults.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateResOpcMults(objResOpcMults);
                if (result == -1)
                {
                    ResOpcMultsEntity objResOpcMultsOld = proxy.GetResOpcMults(objResOpcMults.Id_ResOpcMult);

                    AssingMessageScript("La Respuesta de Opción Multiple ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objResOpcMults);
                }
                if (result > 0)
                {
                    AssingMessageScript("La Respuesta de Opción Multiple se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objResOpcMults);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String ResOpcMult)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<ResOpcMultsEntity> listResult = null;
            List<ResOpcMultsEntity> listResOpcMults = new List<ResOpcMultsEntity>();
            ResOpcMultsEntity objResOpcMults = new ResOpcMultsEntity();
            ResOpcMultsEntity objGetResOpcMults = new ResOpcMultsEntity();


            if ((ResOpcMult != null && ResOpcMult.ToString() != ""))
            {
                objResOpcMults.ResOpcMult = ResOpcMult;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetResOpcMultsPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objResOpcMults));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetResOpcMultsPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objResOpcMults));
            }
            listResult.ToList().ForEach(x => listResOpcMults.Add(x));

            var ResOpcMultsAsIPagedList = new StaticPagedList<ResOpcMultsEntity>(listResOpcMults, pageNumber, pSize, listResult.totalCount);
            if (ResOpcMultsAsIPagedList.Count > 0)
            {
                return PartialView(ResOpcMultsAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }


        public JsonResult Delete(int id)
        {
            proxy.DeleteResOpcMults(id);

            String mensaje = "{mensaje:'Se ha eliminado la Respuesta de Opción Multiple'}";
            return Json(mensaje, JsonRequestBehavior.AllowGet);
        }

        //Nuevas funciones 
        public ActionResult GetList(string data, int draw, int start, int length)
        {
            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordsFiltered = 0;
            if(data != ""){
                dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length).Where(o => o.Id_ResOpcMult.ToString().Contains(data) || o.ResOpcMult.ToLower().Contains(data.ToLower())).OrderByDescending(c => c.Id_ResOpcMult).ToList();
            }
            else
            {
                dataTableData.data = FiltrarContenido(ref recordsFiltered, start, length).OrderByDescending(c => c.Id_ResOpcMult).ToList();
            }
            
            dataTableData.recordsFiltered = recordsFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        private List<ResOpcMultsEntity> FiltrarContenido(ref int recordFiltered, int start, int length)
        {

            List<ResOpcMultsEntity> lista = proxy.GetResOpcMultsList();
            recordFiltered = lista.Count;
            int rango = start + length;
            return lista.Skip(start).Take(length).ToList();
        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<ResOpcMultsEntity> data { get; set; }
        }

        public ActionResult TodasRespuestas()
        {
            List<ResOpcMultsEntity> respuestas = proxy.GetResOpcMultsList();

            return Json(respuestas, JsonRequestBehavior.AllowGet);
        }

    }

}

