
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using System.Data.SqlClient;
using Softv.Entities;
using Globals;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.DatosLlamadaController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : DatosLlamadaController
    /// File                    : DatosLlamadaController.cs
    /// Creation date           : 21/06/2016
    /// Creation time           : 10:18 a. m.
    ///</summary>
    public partial class DatosLlamadaController : BaseController, IDisposable
    {
        private SoftvService.DatosLlamadaClient proxy = null;
        private SoftvService.NoClienteClient proxyNoCliente = null;
        private SoftvService.LlamadaClient proxyllamada = null;

        public DatosLlamadaController()
        {


            proxy = new SoftvService.DatosLlamadaClient();

            proxyNoCliente = new SoftvService.NoClienteClient();
            proxyllamada = new SoftvService.LlamadaClient();
        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }


            if (proxyNoCliente != null)
            {
                if (proxyNoCliente.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxyNoCliente.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("DatosLlamada");
            ViewData["Title"] = "DatosLlamada";
            ViewData["Message"] = "DatosLlamada";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<DatosLlamadaEntity> listResult = proxy.GetDatosLlamadaPagedListXml(pageNumber, pSize, SerializeTool.Serialize<DatosLlamadaEntity>(new DatosLlamadaEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("DatosLlamada");
            return View(new StaticPagedList<DatosLlamadaEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            DatosLlamadaEntity objDatosLlamada = proxy.GetDatosLlamada(id);
            if (objDatosLlamada == null)
            {
                return HttpNotFound();
            }
            return PartialView(objDatosLlamada);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("DatosLlamada");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(DatosLlamadaEntity objDatosLlamada)
        {
            if (ModelState.IsValid)
            {

                objDatosLlamada.BaseRemoteIp = RemoteIp;
                objDatosLlamada.BaseIdUser = LoggedUserName;
                int result = proxy.AddDatosLlamada(objDatosLlamada);
                if (result == -1)
                {

                    AssingMessageScript("El DatosLlamada ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objDatosLlamada);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el DatosLlamada en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objDatosLlamada);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("DatosLlamada");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            DatosLlamadaEntity objDatosLlamada = proxy.GetDatosLlamada(id);

            if (objDatosLlamada == null)
            {
                return HttpNotFound();
            }
            return View(objDatosLlamada);
        }

        //
        // POST: /DatosLlamada/Edit/5
        [HttpPost]
        public ActionResult Edit(DatosLlamadaEntity objDatosLlamada)
        {
            if (ModelState.IsValid)
            {
                objDatosLlamada.BaseRemoteIp = RemoteIp;
                objDatosLlamada.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateDatosLlamada(objDatosLlamada);
                if (result == -1)
                {
                    DatosLlamadaEntity objDatosLlamadaOld = proxy.GetDatosLlamada(objDatosLlamada.Id);

                    AssingMessageScript("El DatosLlamada ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objDatosLlamada);
                }
                if (result > 0)
                {
                    AssingMessageScript("El DatosLlamada se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objDatosLlamada);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, int? IdLlamada, int? Contrato, DateTime? Fecha, String Nombre, String Usuario)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<DatosLlamadaEntity> listResult = null;
            List<DatosLlamadaEntity> listDatosLlamada = new List<DatosLlamadaEntity>();
            DatosLlamadaEntity objDatosLlamada = new DatosLlamadaEntity();
            DatosLlamadaEntity objGetDatosLlamada = new DatosLlamadaEntity();


            if ((IdLlamada != null))
            {
                objDatosLlamada.IdLlamada = IdLlamada;
            }

            if ((Contrato != null))
            {
                objDatosLlamada.Contrato = Contrato;
            }

            if ((Fecha != null))
            {
                objDatosLlamada.Fecha = Fecha.ToString();
            }

            if ((Nombre != null && Nombre.ToString() != ""))
            {
                objDatosLlamada.Nombre = Nombre;
            }

            if ((Usuario != null && Usuario.ToString() != ""))
            {
                objDatosLlamada.Usuario = Usuario;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetDatosLlamadaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objDatosLlamada));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetDatosLlamadaPagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objDatosLlamada));
            }
            listResult.ToList().ForEach(x => listDatosLlamada.Add(x));

            var DatosLlamadaAsIPagedList = new StaticPagedList<DatosLlamadaEntity>(listDatosLlamada, pageNumber, pSize, listResult.totalCount);
            if (DatosLlamadaAsIPagedList.Count > 0)
            {
                return PartialView(DatosLlamadaAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteDatosLlamada(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de DatosLlamada Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de DatosLlamada No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }

        public class DataTableData
        {
            public int draw { get; set; }
            public int recordsTotal { get; set; }
            public int recordsFiltered { get; set; }
            public List<DatosLlamadaEntity> data { get; set; }
        }
        public ActionResult GetList(int idplaza, int ? contrato, string cadena, int ? id_llamada, bool ? tipo_llamada, int draw, int start, int length, string ciudad)
        {

            DataTableData dataTableData = new DataTableData();
            dataTableData.draw = draw;
            dataTableData.recordsTotal = 0;
            int recordFiltered = 0;

            List<conexionPlazaCliente> llamadaCliente = new List<conexionPlazaCliente>();
            List<DatosLlamadaEntity> llamada = proxy.GetDatosLlamadaList().Where(o=>o.Ciudad==ciudad).ToList();
            List<DatosLlamadaEntity> lista = new List<DatosLlamadaEntity>();

            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL = new SqlConnection(c.DameConexion(idplaza));
            try
            {
                conexionSQL.Open();
            }
            catch
            { }
            try
            {
                foreach (var item in llamada)
                {
                    DatosLlamadaEntity llamadas = new DatosLlamadaEntity();
                    if (item.Contrato > 0)
                    {
                        if (item.IdConexion == idplaza)
                        {
                            comandoSql = new SqlCommand("SELECT * FROM CLIENTES WHERE CONTRATO =" + item.Contrato);
                            comandoSql.Connection = conexionSQL;
                            SqlDataReader reader = comandoSql.ExecuteReader();
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {
                                    llamadas.IdLlamada = item.IdLlamada;
                                    llamadas.Nombre = reader[1].ToString();
                                    llamadas.Contrato = item.Contrato;
                                    llamadas.IdConexion = item.IdConexion;
                                    llamadas.Fecha = item.Fecha;
                                    llamadas.TipoLlamada = item.TipoLlamada;
                                    llamadas.Usuario = item.Usuario;
                                    lista.Add(llamadas);
                                }
                            }
                            reader.Close();
                        }

                    }
                    else
                    {
                        List<NoClienteEntity> nocliente = proxyNoCliente.GetNoClienteList();
                        if (item.IdConexion == idplaza)
                        {
                            foreach (var item2 in nocliente)
                            {
                                if (item.IdLlamada == item2.IdLlamada)
                                {

                                    llamadas.IdLlamada = item.IdLlamada;
                                    llamadas.Nombre = item2.Nombre;
                                    llamadas.Contrato = item.Contrato;
                                    llamadas.Fecha = item.Fecha;
                                    llamadas.IdConexion = item.IdConexion;
                                    llamadas.TipoLlamada = item.TipoLlamada;
                                    llamadas.Usuario = item.Usuario;
                                    lista.Add(llamadas);
                                }

                            }
                        }


                    }

                }

            }
            catch { }
            recordFiltered = lista.Count;

            int aux = 0;
            int paginado = 0;
            if (cadena != "")
            {
                dataTableData.data = lista.Where(o => o.Nombre.ToLower().Contains(cadena.ToLower())).OrderByDescending(o => o.IdLlamada).ToList();
                paginado = dataTableData.data.Count;
                dataTableData.data = lista.Where(o => o.Nombre.ToLower().Contains(cadena.ToLower())).OrderByDescending(o => o.IdLlamada).Skip(start).Take(length).ToList();

            }
            else if(contrato > 0)
            {
                dataTableData.data = lista.Where(o => o.Contrato == contrato).ToList();
                paginado = dataTableData.data.Count;
                dataTableData.data = lista.Where(o => o.Contrato == contrato).Skip(start).Take(length).ToList();
            }
            else if (tipo_llamada == true)
            {
                dataTableData.data = lista.Where(o => o.Contrato != null).OrderByDescending(o => o.IdLlamada).ToList();
                paginado = dataTableData.data.Count;
                dataTableData.data = lista.Where(o => o.Contrato != null).OrderByDescending(o => o.IdLlamada).Skip(start).Take(length).ToList();
            }
            else if(tipo_llamada == false)
            {
                dataTableData.data = lista.Where(o => o.Contrato == null && o.IdConexion == idplaza).OrderByDescending(o => o.IdLlamada).ToList();
                paginado = dataTableData.data.Count;
                dataTableData.data = lista.Where(o => o.Contrato == null && o.IdConexion == idplaza).OrderByDescending(o => o.IdLlamada).Skip(start).Take(length).ToList();
            }
            else if (id_llamada > 0)
            {
                dataTableData.data = lista.Where(o => o.IdLlamada == id_llamada).ToList();
                paginado = dataTableData.data.Count;
                dataTableData.data = lista.Where(o => o.IdLlamada == id_llamada).Skip(start).Take(length).ToList();
            }
            else if(tipo_llamada.ToString() == ""){
                dataTableData.data = lista.OrderByDescending(o => o.IdLlamada).Skip(start).Take(length).ToList();
                aux = 1;
            }
            if(aux == 1){
                recordFiltered = lista.Count;
            }
            else
            {
                recordFiltered = paginado;
            }
            
            dataTableData.recordsFiltered = recordFiltered;

            return Json(dataTableData, JsonRequestBehavior.AllowGet);
        }

        public class conexionPlazaCliente{
            public int idllamada { get; set; }
            public int contrato { get; set; }
            public string nombre { get; set; }
            public string fecha { get; set; }
            public string tipollamada { get; set; }
        }

        public ActionResult GenerarReporte(obj_reporte reporte)
        {


            return null;
        }
        public class obj_reporte
        {
            public int plaza { get; set; }
            public string ciudad { get; set; }
            public int problema { get; set; }
            public int motivo { get; set; }
            public int usuario { get; set; }
            public DateTime inicio { get; set; }
            public DateTime fin { get; set; }
        }

    }

}

