
using SoftvMVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PagedList;
using Softv.Entities;
using Globals;

using System.Data;
using System.Data.SqlClient;

namespace SoftvMVC.Controllers
{
    /// <summary>
    /// Class                   : SoftvMVC.Controllers.CatalogoPeriodosCorteController.cs
    /// Generated by            : Class Generator (c) 2015
    /// Description             : CatalogoPeriodosCorteController
    /// File                    : CatalogoPeriodosCorteController.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:36 p. m.
    ///</summary>
    public partial class CatalogoPeriodosCorteController : BaseController, IDisposable
    {
        private SoftvService.CatalogoPeriodosCorteClient proxy = null;

        public CatalogoPeriodosCorteController()
        {


            proxy = new SoftvService.CatalogoPeriodosCorteClient();

        }

        new public void Dispose()
        {
            if (proxy != null)
            {
                if (proxy.State != System.ServiceModel.CommunicationState.Closed)
                {
                    proxy.Close();
                }
            }

        }

        public ActionResult Index(int? page, int? pageSize)
        {
            PermisosAcceso("CatalogoPeriodosCorte");
            ViewData["Title"] = "CatalogoPeriodosCorte";
            ViewData["Message"] = "CatalogoPeriodosCorte";
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            int pageNumber = (page ?? 1);
            SoftvList<CatalogoPeriodosCorteEntity> listResult = proxy.GetCatalogoPeriodosCortePagedListXml(pageNumber, pSize, SerializeTool.Serialize<CatalogoPeriodosCorteEntity>(new CatalogoPeriodosCorteEntity()));


            CheckNotify();
            ViewBag.CustomScriptsDefault = BuildScriptsDefault("CatalogoPeriodosCorte");
            return View(new StaticPagedList<CatalogoPeriodosCorteEntity>(listResult.ToList(), pageNumber, pSize, listResult.totalCount));
        }

        public ActionResult Details(int id = 0)
        {
            CatalogoPeriodosCorteEntity objCatalogoPeriodosCorte = proxy.GetCatalogoPeriodosCorte(id);
            if (objCatalogoPeriodosCorte == null)
            {
                return HttpNotFound();
            }
            return PartialView(objCatalogoPeriodosCorte);
        }

        public ActionResult Create()
        {
            PermisosAccesoDeniedCreate("CatalogoPeriodosCorte");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();

            return View();
        }

        [HttpPost]
        public ActionResult Create(CatalogoPeriodosCorteEntity objCatalogoPeriodosCorte)
        {
            if (ModelState.IsValid)
            {

                objCatalogoPeriodosCorte.BaseRemoteIp = RemoteIp;
                objCatalogoPeriodosCorte.BaseIdUser = LoggedUserName;
                int result = proxy.AddCatalogoPeriodosCorte(objCatalogoPeriodosCorte);
                if (result == -1)
                {

                    AssingMessageScript("El CatalogoPeriodosCorte ya existe en el sistema.", "error", "Error", true);
                    CheckNotify();
                    return View(objCatalogoPeriodosCorte);
                }
                if (result > 0)
                {
                    AssingMessageScript("Se dio de alta el CatalogoPeriodosCorte en el sistema.", "success", "Éxito", true);
                    return RedirectToAction("Index");
                }

            }
            return View(objCatalogoPeriodosCorte);
        }

        public ActionResult Edit(int id = 0)
        {
            PermisosAccesoDeniedEdit("CatalogoPeriodosCorte");
            ViewBag.CustomScriptsPageValid = BuildScriptPageValid();
            CatalogoPeriodosCorteEntity objCatalogoPeriodosCorte = proxy.GetCatalogoPeriodosCorte(id);

            if (objCatalogoPeriodosCorte == null)
            {
                return HttpNotFound();
            }
            return View(objCatalogoPeriodosCorte);
        }

        //
        // POST: /CatalogoPeriodosCorte/Edit/5
        [HttpPost]
        public ActionResult Edit(CatalogoPeriodosCorteEntity objCatalogoPeriodosCorte)
        {
            if (ModelState.IsValid)
            {
                objCatalogoPeriodosCorte.BaseRemoteIp = RemoteIp;
                objCatalogoPeriodosCorte.BaseIdUser = LoggedUserName;
                int result = proxy.UpdateCatalogoPeriodosCorte(objCatalogoPeriodosCorte);
                if (result == -1)
                {
                    CatalogoPeriodosCorteEntity objCatalogoPeriodosCorteOld = proxy.GetCatalogoPeriodosCorte(objCatalogoPeriodosCorte.Clv_Periodo);

                    AssingMessageScript("El CatalogoPeriodosCorte ya existe en el sistema, .", "error", "Error", true);
                    CheckNotify();
                    return View(objCatalogoPeriodosCorte);
                }
                if (result > 0)
                {
                    AssingMessageScript("El CatalogoPeriodosCorte se modifico en el sistema.", "success", "Éxito", true);
                    CheckNotify();
                    return RedirectToAction("Index");
                }
                return RedirectToAction("Index");
            }
            return View(objCatalogoPeriodosCorte);
        }

        public ActionResult QuickIndex(int? page, int? pageSize, String Descripcion, int? Habilitar)
        {
            int pageNumber = (page ?? 1);
            int pSize = pageSize ?? SoftvMVC.Properties.Settings.Default.pagnum;
            SoftvList<CatalogoPeriodosCorteEntity> listResult = null;
            List<CatalogoPeriodosCorteEntity> listCatalogoPeriodosCorte = new List<CatalogoPeriodosCorteEntity>();
            CatalogoPeriodosCorteEntity objCatalogoPeriodosCorte = new CatalogoPeriodosCorteEntity();
            CatalogoPeriodosCorteEntity objGetCatalogoPeriodosCorte = new CatalogoPeriodosCorteEntity();


            if ((Descripcion != null && Descripcion.ToString() != ""))
            {
                objCatalogoPeriodosCorte.Descripcion = Descripcion;
            }

            if ((Habilitar != null))
            {
                objCatalogoPeriodosCorte.Habilitar = Habilitar;
            }

            pageNumber = pageNumber == 0 ? 1 : pageNumber;
            listResult = proxy.GetCatalogoPeriodosCortePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCatalogoPeriodosCorte));
            if (listResult.Count == 0)
            {
                int tempPageNumber = (int)(listResult.totalCount / pSize);
                pageNumber = (int)(listResult.totalCount / pSize) == 0 ? 1 : tempPageNumber;
                listResult = proxy.GetCatalogoPeriodosCortePagedListXml(pageNumber, pSize, Globals.SerializeTool.Serialize(objCatalogoPeriodosCorte));
            }
            listResult.ToList().ForEach(x => listCatalogoPeriodosCorte.Add(x));

            var CatalogoPeriodosCorteAsIPagedList = new StaticPagedList<CatalogoPeriodosCorteEntity>(listCatalogoPeriodosCorte, pageNumber, pSize, listResult.totalCount);
            if (CatalogoPeriodosCorteAsIPagedList.Count > 0)
            {
                return PartialView(CatalogoPeriodosCorteAsIPagedList);
            }
            else
            {
                var result = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "No se encontraron registros con los criterios de búsqueda ingresados." };
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Delete(int id = 0)
        {
            int result = proxy.DeleteCatalogoPeriodosCorte(RemoteIp, LoggedUserName, id);
            if (result > 0)
            {
                var resultOk = new { tipomsj = "success", titulomsj = "Aviso", Success = "True", Message = "Registro de CatalogoPeriodosCorte Eliminado." };
                return Json(resultOk, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var resultNg = new { tipomsj = "warning", titulomsj = "Aviso", Success = "False", Message = "El Registro de CatalogoPeriodosCorte No puede ser Eliminado validar dependencias." };
                return Json(resultNg, JsonRequestBehavior.AllowGet);
            }
        }

        //public ActionResult GetCatalogoPeriodosCorte()
        //{
        //    return Json(proxy.GetCatalogoPeriodosCorteList(), JsonRequestBehavior.AllowGet);
        //}

        public class DatosTipoCliente
        {
            public int Clv_Periodo { get; set; }
            public String Descripcion { get; set; }
        }


        public ActionResult GetCatalogoPeriodosCorte(int numModal, int idConexion)
        {
            ConexionController c = new ConexionController();
            SqlCommand comandoSql;
            SqlConnection conexionSQL2 = new SqlConnection(c.DameConexion(idConexion));
            List<DatosTipoCliente> lista = new List<DatosTipoCliente>();
            try
            {
                conexionSQL2.Open();
            }
            catch
            { }

            try
            {
                comandoSql = new SqlCommand("Select * from CatalogoPeriodosCorte");

                //comandoSql = new SqlCommand("exec DatosTipoClienteweb " + numModal + ", " + idConexion + "");
                comandoSql.Connection = conexionSQL2;
                SqlDataReader reader = comandoSql.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        DatosTipoCliente datos = new DatosTipoCliente();
                        datos.Clv_Periodo = Convert.ToInt32(reader[0]);
                        datos.Descripcion = reader[1].ToString();
                        lista.Add(datos);
                    }
                }
            }
            catch
            { }
            return Json(lista, JsonRequestBehavior.AllowGet);
        }

    }

}

