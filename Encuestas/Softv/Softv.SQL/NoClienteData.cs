
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.NoClienteData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : NoCliente Data Access Object
    /// File                    : NoClienteDAO.cs
    /// Creation date           : 14/06/2016
    /// Creation time           : 10:34 a. m.
    ///</summary>
    public class NoClienteData : NoClienteProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="NoCliente"> Object NoCliente added to List</param>
        public override int AddNoCliente(NoClienteEntity entity_NoCliente)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteAdd", connection);

                AssingParameter(comandoSql, "@Id", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@IdLlamada", entity_NoCliente.IdLlamada);

                AssingParameter(comandoSql, "@Nombre", entity_NoCliente.Nombre);

                AssingParameter(comandoSql, "@Direccion", entity_NoCliente.Direccion);

                AssingParameter(comandoSql, "@Telefono", entity_NoCliente.Telefono);

                AssingParameter(comandoSql, "@Celular", entity_NoCliente.Celular);

                AssingParameter(comandoSql, "@Email", entity_NoCliente.Email);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding NoCliente " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@Id"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a NoCliente
        ///</summary>
        /// <param name="">  Id to delete </param>
        public override int DeleteNoCliente(int? Id)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteDelete", connection);

                AssingParameter(comandoSql, "@Id", Id);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a NoCliente
        ///</summary>
        /// <param name="NoCliente"> Objeto NoCliente a editar </param>
        public override int EditNoCliente(NoClienteEntity entity_NoCliente)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteEdit", connection);

                AssingParameter(comandoSql, "@Id", entity_NoCliente.Id);

                AssingParameter(comandoSql, "@IdLlamada", entity_NoCliente.IdLlamada);

                AssingParameter(comandoSql, "@Nombre", entity_NoCliente.Nombre);

                AssingParameter(comandoSql, "@Direccion", entity_NoCliente.Direccion);

                AssingParameter(comandoSql, "@Telefono", entity_NoCliente.Telefono);

                AssingParameter(comandoSql, "@Celular", entity_NoCliente.Celular);

                AssingParameter(comandoSql, "@Email", entity_NoCliente.Email);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all NoCliente
        ///</summary>
        public override List<NoClienteEntity> GetNoCliente()
        {
            List<NoClienteEntity> NoClienteList = new List<NoClienteEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        NoClienteList.Add(GetNoClienteFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return NoClienteList;
        }

        /// <summary>
        /// Gets all NoCliente by List<int>
        ///</summary>
        public override List<NoClienteEntity> GetNoCliente(List<int> lid)
        {
            List<NoClienteEntity> NoClienteList = new List<NoClienteEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        NoClienteList.Add(GetNoClienteFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return NoClienteList;
        }

        /// <summary>
        /// Gets NoCliente by
        ///</summary>
        public override NoClienteEntity GetNoClienteById(int? Id)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteGetById", connection);
                NoClienteEntity entity_NoCliente = null;


                AssingParameter(comandoSql, "@Id", Id);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_NoCliente = GetNoClienteFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_NoCliente;
            }

        }



        /// <summary>
        ///Get NoCliente
        ///</summary>
        public override SoftvList<NoClienteEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<NoClienteEntity> entities = new SoftvList<NoClienteEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetNoClienteFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetNoClienteCount();
                return entities ?? new SoftvList<NoClienteEntity>();
            }
        }

        /// <summary>
        ///Get NoCliente
        ///</summary>
        public override SoftvList<NoClienteEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<NoClienteEntity> entities = new SoftvList<NoClienteEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetNoClienteFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetNoClienteCount(xml);
                return entities ?? new SoftvList<NoClienteEntity>();
            }
        }

        /// <summary>
        ///Get Count NoCliente
        ///</summary>
        public int GetNoClienteCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count NoCliente
        ///</summary>
        public int GetNoClienteCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.NoCliente.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_NoClienteGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data NoCliente " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
