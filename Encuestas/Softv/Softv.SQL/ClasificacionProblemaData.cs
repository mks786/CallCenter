
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.ClasificacionProblemaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : ClasificacionProblema Data Access Object
    /// File                    : ClasificacionProblemaDAO.cs
    /// Creation date           : 28/07/2016
    /// Creation time           : 06:23 p. m.
    ///</summary>
    public class ClasificacionProblemaData : ClasificacionProblemaProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="ClasificacionProblema"> Object ClasificacionProblema added to List</param>
        public override int AddClasificacionProblema(ClasificacionProblemaEntity entity_ClasificacionProblema)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaAdd", connection);

                AssingParameter(comandoSql, "@ClvProblema", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@Descripcion", entity_ClasificacionProblema.Descripcion);

                AssingParameter(comandoSql, "@Activo", entity_ClasificacionProblema.Activo);
                AssingParameter(comandoSql, "@TipServ", entity_ClasificacionProblema.TipServ);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@ClvProblema"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a ClasificacionProblema
        ///</summary>
        /// <param name="">  ClvProblema to delete </param>
        public override int DeleteClasificacionProblema(long? ClvProblema)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaDelete", connection);

                AssingParameter(comandoSql, "@ClvProblema", ClvProblema);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a ClasificacionProblema
        ///</summary>
        /// <param name="ClasificacionProblema"> Objeto ClasificacionProblema a editar </param>
        public override int EditClasificacionProblema(ClasificacionProblemaEntity entity_ClasificacionProblema)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaEdit", connection);

                AssingParameter(comandoSql, "@ClvProblema", entity_ClasificacionProblema.ClvProblema);

                AssingParameter(comandoSql, "@Descripcion", entity_ClasificacionProblema.Descripcion);

                AssingParameter(comandoSql, "@Activo", entity_ClasificacionProblema.Activo);
                AssingParameter(comandoSql, "@TipServ", entity_ClasificacionProblema.TipServ);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all ClasificacionProblema
        ///</summary>
        public override List<ClasificacionProblemaEntity> GetClasificacionProblema()
        {
            List<ClasificacionProblemaEntity> ClasificacionProblemaList = new List<ClasificacionProblemaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ClasificacionProblemaList.Add(GetClasificacionProblemaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ClasificacionProblemaList;
        }

        /// <summary>
        /// Gets all ClasificacionProblema by List<int>
        ///</summary>
        public override List<ClasificacionProblemaEntity> GetClasificacionProblema(List<int> lid)
        {
            List<ClasificacionProblemaEntity> ClasificacionProblemaList = new List<ClasificacionProblemaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ClasificacionProblemaList.Add(GetClasificacionProblemaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ClasificacionProblemaList;
        }

        /// <summary>
        /// Gets ClasificacionProblema by
        ///</summary>
        public override ClasificacionProblemaEntity GetClasificacionProblemaById(long? ClvProblema)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaGetById", connection);
                ClasificacionProblemaEntity entity_ClasificacionProblema = null;


                AssingParameter(comandoSql, "@ClvProblema", ClvProblema);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_ClasificacionProblema = GetClasificacionProblemaFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_ClasificacionProblema;
            }

        }



        /// <summary>
        ///Get ClasificacionProblema
        ///</summary>
        public override SoftvList<ClasificacionProblemaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<ClasificacionProblemaEntity> entities = new SoftvList<ClasificacionProblemaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetClasificacionProblemaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetClasificacionProblemaCount();
                return entities ?? new SoftvList<ClasificacionProblemaEntity>();
            }
        }

        /// <summary>
        ///Get ClasificacionProblema
        ///</summary>
        public override SoftvList<ClasificacionProblemaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<ClasificacionProblemaEntity> entities = new SoftvList<ClasificacionProblemaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetClasificacionProblemaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetClasificacionProblemaCount(xml);
                return entities ?? new SoftvList<ClasificacionProblemaEntity>();
            }
        }

        /// <summary>
        ///Get Count ClasificacionProblema
        ///</summary>
        public int GetClasificacionProblemaCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count ClasificacionProblema
        ///</summary>
        public int GetClasificacionProblemaCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ClasificacionProblema.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ClasificacionProblemaGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ClasificacionProblema " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
