
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.ServicioData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Servicio Data Access Object
    /// File                    : ServicioDAO.cs
    /// Creation date           : 14/06/2016
    /// Creation time           : 11:09 a. m.
    ///</summary>
    public class ServicioData : ServicioProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="Servicio"> Object Servicio added to List</param>
        public override int AddServicio(ServicioEntity entity_Servicio)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioAdd", connection);

                AssingParameter(comandoSql, "@Clv_Servicio", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@Clv_TipSer", entity_Servicio.Clv_TipSer);

                AssingParameter(comandoSql, "@Descripcion", entity_Servicio.Descripcion);

                AssingParameter(comandoSql, "@Clv_Txt", entity_Servicio.Clv_Txt);

                AssingParameter(comandoSql, "@AplicanCom", entity_Servicio.AplicanCom);

                AssingParameter(comandoSql, "@Sale_en_Cartera", entity_Servicio.Sale_en_Cartera);

                AssingParameter(comandoSql, "@Precio", entity_Servicio.Precio);

                AssingParameter(comandoSql, "@Genera_Orden", entity_Servicio.Genera_Orden);

                AssingParameter(comandoSql, "@Es_Principal", entity_Servicio.Es_Principal);

                AssingParameter(comandoSql, "@Clv_Trabajo", entity_Servicio.Clv_Trabajo);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Servicio " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdServicio"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a Servicio
        ///</summary>
        /// <param name="">  Clv_Servicio to delete </param>
        public override int DeleteServicio(int? Clv_Servicio)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioDelete", connection);

                AssingParameter(comandoSql, "@Clv_Servicio", Clv_Servicio);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a Servicio
        ///</summary>
        /// <param name="Servicio"> Objeto Servicio a editar </param>
        public override int EditServicio(ServicioEntity entity_Servicio)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioEdit", connection);

                AssingParameter(comandoSql, "@Clv_Servicio", entity_Servicio.Clv_Servicio);

                AssingParameter(comandoSql, "@Clv_TipSer", entity_Servicio.Clv_TipSer);

                AssingParameter(comandoSql, "@Descripcion", entity_Servicio.Descripcion);

                AssingParameter(comandoSql, "@Clv_Txt", entity_Servicio.Clv_Txt);

                AssingParameter(comandoSql, "@AplicanCom", entity_Servicio.AplicanCom);

                AssingParameter(comandoSql, "@Sale_en_Cartera", entity_Servicio.Sale_en_Cartera);

                AssingParameter(comandoSql, "@Precio", entity_Servicio.Precio);

                AssingParameter(comandoSql, "@Genera_Orden", entity_Servicio.Genera_Orden);

                AssingParameter(comandoSql, "@Es_Principal", entity_Servicio.Es_Principal);

                AssingParameter(comandoSql, "@Clv_Trabajo", entity_Servicio.Clv_Trabajo);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all Servicio
        ///</summary>
        public override List<ServicioEntity> GetServicio()
        {
            List<ServicioEntity> ServicioList = new List<ServicioEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ServicioList.Add(GetServicioFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ServicioList;
        }

        /// <summary>
        /// Gets all Servicio by List<int>
        ///</summary>
        public override List<ServicioEntity> GetServicio(List<int> lid)
        {
            List<ServicioEntity> ServicioList = new List<ServicioEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_ServicioGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ServicioList.Add(GetServicioFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ServicioList;
        }

        /// <summary>
        /// Gets Servicio by
        ///</summary>
        public override ServicioEntity GetServicioById(int? Clv_Servicio)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioGetById", connection);
                ServicioEntity entity_Servicio = null;


                AssingParameter(comandoSql, "@Clv_Servicio", Clv_Servicio);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Servicio = GetServicioFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Servicio;
            }

        }



        /// <summary>
        ///Get Servicio
        ///</summary>
        public override SoftvList<ServicioEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<ServicioEntity> entities = new SoftvList<ServicioEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetServicioFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetServicioCount();
                return entities ?? new SoftvList<ServicioEntity>();
            }
        }

        /// <summary>
        ///Get Servicio
        ///</summary>
        public override SoftvList<ServicioEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<ServicioEntity> entities = new SoftvList<ServicioEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetServicioFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetServicioCount(xml);
                return entities ?? new SoftvList<ServicioEntity>();
            }
        }

        /// <summary>
        ///Get Count Servicio
        ///</summary>
        public int GetServicioCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count Servicio
        ///</summary>
        public int GetServicioCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Servicio.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ServicioGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Servicio " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
