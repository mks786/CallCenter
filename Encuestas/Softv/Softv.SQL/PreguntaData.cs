
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.PreguntaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Pregunta Data Access Object
    /// File                    : PreguntaDAO.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:16 p. m.
    ///</summary>
    public class PreguntaData : PreguntaProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="Pregunta"> Object Pregunta added to List</param>
        //public override int AddPregunta(PreguntaEntity entity_Pregunta)
        //{
        //    int result = 0;
        //    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
        //    {

        //        SqlCommand comandoSql = CreateCommand("Softv_PreguntaAdd", connection);

        //        AssingParameter(comandoSql, "@IdPregunta", null, pd: ParameterDirection.Output, IsKey: true);

        //        AssingParameter(comandoSql, "@Pregunta", entity_Pregunta.Pregunta);

        //        AssingParameter(comandoSql, "@IdTipoPregunta", entity_Pregunta.IdTipoPregunta);

        //        AssingParameter(comandoSql, "@Cerrada", entity_Pregunta.Cerrada);

        //        AssingParameter(comandoSql, "@OpcMultiple", entity_Pregunta.OpcMultiple);

        //        AssingParameter(comandoSql, "@Abierta", entity_Pregunta.Abierta);

        //        try
        //        {
        //            if (connection.State == ConnectionState.Closed)
        //                connection.Open();
        //            result = ExecuteNonQuery(comandoSql);
        //        }
        //        catch (Exception ex)
        //        {
        //            throw new Exception("Error adding Pregunta " + ex.Message, ex);
        //        }
        //        finally
        //        {
        //            connection.Close();
        //        }
        //        result = (int)comandoSql.Parameters["@IdPregunta"].Value;
        //    }
        //    return result;
        //}

        public override int AddPregunta(string data)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaAdd", connection);

                AssingParameter(comandoSql, "@xml", data);
                AssingParameter(comandoSql, "@IdPregunta", null, pd: ParameterDirection.Output, IsKey: true);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Pregunta " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdPregunta"].Value;
            }
            return result;
        }
























        /// <summary>
        /// Deletes a Pregunta
        ///</summary>
        /// <param name="">  IdPregunta to delete </param>
        public override int DeletePregunta(int? IdPregunta)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaDelete", connection);

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }
        

        /// <summary>
        /// Edits a Pregunta
        ///</summary>
        /// <param name="Pregunta"> Objeto Pregunta a editar </param>
        public override int EditPregunta(string xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaEdit", connection);

                AssingParameter(comandoSql, "@xml",xml);            
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all Pregunta
        ///</summary>
        public override List<PreguntaEntity> GetPregunta()
        {
            List<PreguntaEntity> PreguntaList = new List<PreguntaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PreguntaList.Add(GetPreguntaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PreguntaList;
        }

        /// <summary>
        /// Gets all Pregunta by List<int>
        ///</summary>
        public override List<PreguntaEntity> GetPregunta(List<int> lid)
        {
            List<PreguntaEntity> PreguntaList = new List<PreguntaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PreguntaList.Add(GetPreguntaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PreguntaList;
        }

        /// <summary>
        /// Gets Pregunta by
        ///</summary>
        public override PreguntaEntity GetPreguntaById(int? IdPregunta)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetById", connection);
                PreguntaEntity entity_Pregunta = null;


                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Pregunta = GetPreguntaFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Pregunta;
            }

        }


        public override List<PreguntaEntity> GetPreguntaByIdTipoPregunta(int? IdTipoPregunta)
        {
            List<PreguntaEntity> PreguntaList = new List<PreguntaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetByIdTipoPregunta", connection);

                AssingParameter(comandoSql, "@IdTipoPregunta", IdTipoPregunta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PreguntaList.Add(GetPreguntaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PreguntaList;
        }

        public override List<PreguntaEntity> GetPreguntaByIdPregunta(int? IdPregunta)
        {
            List<PreguntaEntity> PreguntaList = new List<PreguntaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetByIdPregunta", connection);

                AssingParameter(comandoSql, "@IdPregunta", IdPregunta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PreguntaList.Add(GetPreguntaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PreguntaList;
        }




        /// <summary>
        ///Get Pregunta
        ///</summary>
        public override SoftvList<PreguntaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<PreguntaEntity> entities = new SoftvList<PreguntaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetPreguntaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetPreguntaCount();
                return entities ?? new SoftvList<PreguntaEntity>();
            }
        }

        /// <summary>
        ///Get Pregunta
        ///</summary>
        public override SoftvList<PreguntaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<PreguntaEntity> entities = new SoftvList<PreguntaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetPreguntaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetPreguntaCount(xml);
                return entities ?? new SoftvList<PreguntaEntity>();
            }
        }

        /// <summary>
        ///Get Count Pregunta
        ///</summary>
        public int GetPreguntaCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count Pregunta
        ///</summary>
        public int GetPreguntaCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Pregunta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PreguntaGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Pregunta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
