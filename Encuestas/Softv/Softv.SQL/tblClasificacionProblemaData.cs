
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using Softv.Entities;
    using Softv.Providers;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.DAO
    {
    /// <summary>
    /// Class                   : Softv.DAO.tblClasificacionProblemaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : tblClasificacionProblema Data Access Object
    /// File                    : tblClasificacionProblemaDAO.cs
    /// Creation date           : 08/06/2016
    /// Creation time           : 10:52 a. m.
    ///</summary>
    public class tblClasificacionProblemaData : tblClasificacionProblemaProvider
    {
    /// <summary>
    ///</summary>
    /// <param name="tblClasificacionProblema"> Object tblClasificacionProblema added to List</param>
    public override int AddtblClasificacionProblema(tblClasificacionProblemaEntity entity_tblClasificacionProblema)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaAdd", connection);
    
        AssingParameter(comandoSql, "@clvProblema", null, pd: ParameterDirection.Output, IsKey: true);
      
            AssingParameter(comandoSql,"@descripcion",entity_tblClasificacionProblema.descripcion);
          
            AssingParameter(comandoSql,"@activo",entity_tblClasificacionProblema.activo);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error adding tblClasificacionProblema " + ex.Message, ex);
    }
    finally
    {
    connection.Close();
    }
    result = (int)comandoSql.Parameters["@IdtblClasificacionProblema"].Value;
    }
    return result;
    }

    /// <summary>
    /// Deletes a tblClasificacionProblema
    ///</summary>
    /// <param name="">  clvProblema to delete </param>
    public override int DeletetblClasificacionProblema(long? clvProblema)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaDelete", connection);
    
            AssingParameter(comandoSql,"@clvProblema",clvProblema);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error deleting tblClasificacionProblema " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Edits a tblClasificacionProblema
    ///</summary>
    /// <param name="tblClasificacionProblema"> Objeto tblClasificacionProblema a editar </param>
    public override int EdittblClasificacionProblema(tblClasificacionProblemaEntity entity_tblClasificacionProblema)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaEdit", connection);
    
            AssingParameter(comandoSql,"@clvProblema",entity_tblClasificacionProblema.clvProblema);
          
            AssingParameter(comandoSql,"@descripcion",entity_tblClasificacionProblema.descripcion);
          
            AssingParameter(comandoSql,"@activo",entity_tblClasificacionProblema.activo);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    
        result = int.Parse(ExecuteNonQuery(comandoSql).ToString());
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error updating tblClasificacionProblema " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Gets all tblClasificacionProblema
    ///</summary>
    public override List<tblClasificacionProblemaEntity> GettblClasificacionProblema()
    {
    List<tblClasificacionProblemaEntity> tblClasificacionProblemaList = new List<tblClasificacionProblemaEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaGet", connection);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    tblClasificacionProblemaList.Add(GettblClasificacionProblemaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblClasificacionProblema "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return tblClasificacionProblemaList;
    }

    /// <summary>
    /// Gets all tblClasificacionProblema by List<int>
    ///</summary>
    public override List<tblClasificacionProblemaEntity> GettblClasificacionProblema(List<int> lid)
    {
    List<tblClasificacionProblemaEntity> tblClasificacionProblemaList = new List<tblClasificacionProblemaEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    DataTable IdDT = BuildTableID(lid);
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaGetByIds", connection);
    AssingParameter(comandoSql, "@IdTable", IdDT);
    
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    tblClasificacionProblemaList.Add(GettblClasificacionProblemaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblClasificacionProblema "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return tblClasificacionProblemaList;
    }

    /// <summary>
    /// Gets tblClasificacionProblema by
    ///</summary>
    public override tblClasificacionProblemaEntity GettblClasificacionProblemaById(long? clvProblema)
    {
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaGetById", connection);
    tblClasificacionProblemaEntity entity_tblClasificacionProblema = null;

    
            AssingParameter(comandoSql,"@clvProblema", clvProblema);
          
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
    if (rd.Read())
    entity_tblClasificacionProblema = GettblClasificacionProblemaFromReader(rd);
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblClasificacionProblema "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    return entity_tblClasificacionProblema;
    }

    }

    

    /// <summary>
    ///Get tblClasificacionProblema
    ///</summary>
    public override SoftvList<tblClasificacionProblemaEntity> GetPagedList(int pageIndex, int pageSize)
    {
    SoftvList<tblClasificacionProblemaEntity> entities = new SoftvList<tblClasificacionProblemaEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaGetPaged", connection);
    
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@pageSize", pageSize);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GettblClasificacionProblemaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblClasificacionProblema " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GettblClasificacionProblemaCount();
    return entities ?? new SoftvList<tblClasificacionProblemaEntity>();
    }
    }

    /// <summary>
    ///Get tblClasificacionProblema
    ///</summary>
    public override SoftvList<tblClasificacionProblemaEntity> GetPagedList(int pageIndex, int pageSize,String xml)
    {
    SoftvList<tblClasificacionProblemaEntity> entities = new SoftvList<tblClasificacionProblemaEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaGetPagedXml", connection);
    
    AssingParameter(comandoSql,"@pageSize", pageSize);
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@xml", xml);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GettblClasificacionProblemaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblClasificacionProblema " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GettblClasificacionProblemaCount(xml);
    return entities ?? new SoftvList<tblClasificacionProblemaEntity>();
    }
    }

    /// <summary>
    ///Get Count tblClasificacionProblema
    ///</summary>
    public int GettblClasificacionProblemaCount()
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaGetCount", connection);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblClasificacionProblema " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }


    /// <summary>
    ///Get Count tblClasificacionProblema
    ///</summary>
    public int GettblClasificacionProblemaCount(String xml)
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblClasificacionProblema.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblClasificacionProblemaGetCountXml", connection);
    
    AssingParameter(comandoSql,"@xml", xml);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblClasificacionProblema " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }

    #region Customs Methods
    
    #endregion
    }
    }
  