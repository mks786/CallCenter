
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.MotivoCancelacionData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : MotivoCancelacion Data Access Object
    /// File                    : MotivoCancelacionDAO.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:35 p. m.
    ///</summary>
    public class MotivoCancelacionData : MotivoCancelacionProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="MotivoCancelacion"> Object MotivoCancelacion added to List</param>
        public override int AddMotivoCancelacion(MotivoCancelacionEntity entity_MotivoCancelacion)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionAdd", connection);

                AssingParameter(comandoSql, "@Clv_MOTCAN", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@MOTCAN", entity_MotivoCancelacion.MOTCAN);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@Clv_MOTCAN"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a MotivoCancelacion
        ///</summary>
        /// <param name="">  Clv_MOTCAN to delete </param>
        public override int DeleteMotivoCancelacion(int? Clv_MOTCAN)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionDelete", connection);

                AssingParameter(comandoSql, "@Clv_MOTCAN", Clv_MOTCAN);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a MotivoCancelacion
        ///</summary>
        /// <param name="MotivoCancelacion"> Objeto MotivoCancelacion a editar </param>
        public override int EditMotivoCancelacion(MotivoCancelacionEntity entity_MotivoCancelacion)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionEdit", connection);

                AssingParameter(comandoSql, "@Clv_MOTCAN", entity_MotivoCancelacion.Clv_MOTCAN);

                AssingParameter(comandoSql, "@MOTCAN", entity_MotivoCancelacion.MOTCAN);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all MotivoCancelacion
        ///</summary>
        public override List<MotivoCancelacionEntity> GetMotivoCancelacion()
        {
            List<MotivoCancelacionEntity> MotivoCancelacionList = new List<MotivoCancelacionEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Muestra_MotCanc_Reporte", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        MotivoCancelacionList.Add(GetMotivoCancelacionFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return MotivoCancelacionList;
        }

        /// <summary>
        /// Gets all MotivoCancelacion by List<int>
        ///</summary>
        public override List<MotivoCancelacionEntity> GetMotivoCancelacion(List<int> lid)
        {
            List<MotivoCancelacionEntity> MotivoCancelacionList = new List<MotivoCancelacionEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        MotivoCancelacionList.Add(GetMotivoCancelacionFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return MotivoCancelacionList;
        }

        /// <summary>
        /// Gets MotivoCancelacion by
        ///</summary>
        public override MotivoCancelacionEntity GetMotivoCancelacionById(int? Clv_MOTCAN)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionGetById", connection);
                MotivoCancelacionEntity entity_MotivoCancelacion = null;


                AssingParameter(comandoSql, "@Clv_MOTCAN", Clv_MOTCAN);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_MotivoCancelacion = GetMotivoCancelacionFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_MotivoCancelacion;
            }

        }



        /// <summary>
        ///Get MotivoCancelacion
        ///</summary>
        public override SoftvList<MotivoCancelacionEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<MotivoCancelacionEntity> entities = new SoftvList<MotivoCancelacionEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetMotivoCancelacionFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetMotivoCancelacionCount();
                return entities ?? new SoftvList<MotivoCancelacionEntity>();
            }
        }

        /// <summary>
        ///Get MotivoCancelacion
        ///</summary>
        public override SoftvList<MotivoCancelacionEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<MotivoCancelacionEntity> entities = new SoftvList<MotivoCancelacionEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetMotivoCancelacionFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetMotivoCancelacionCount(xml);
                return entities ?? new SoftvList<MotivoCancelacionEntity>();
            }
        }

        /// <summary>
        ///Get Count MotivoCancelacion
        ///</summary>
        public int GetMotivoCancelacionCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count MotivoCancelacion
        ///</summary>
        public int GetMotivoCancelacionCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotivoCancelacion.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotivoCancelacionGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotivoCancelacion " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
