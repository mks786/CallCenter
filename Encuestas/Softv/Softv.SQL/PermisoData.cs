
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.PermisoData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Permiso Data Access Object
    /// File                    : PermisoDAO.cs
    /// Creation date           : 30/05/2016
    /// Creation time           : 05:17 p. m.
    ///</summary>
    public class PermisoData : PermisoProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="Permiso"> Object Permiso added to List</param>
        public override int AddPermiso(PermisoEntity entity_Permiso)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoAdd", connection);

                AssingParameter(comandoSql, "@IdPermiso", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@IdRol", entity_Permiso.IdRol);

                AssingParameter(comandoSql, "@IdModule", entity_Permiso.IdModule);

                AssingParameter(comandoSql, "@OptAdd", entity_Permiso.OptAdd);

                AssingParameter(comandoSql, "@OptSelect", entity_Permiso.OptSelect);

                AssingParameter(comandoSql, "@OptUpdate", entity_Permiso.OptUpdate);

                AssingParameter(comandoSql, "@OptDelete", entity_Permiso.OptDelete);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Permiso " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdPermiso"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a Permiso
        ///</summary>
        /// <param name="">  IdPermiso to delete </param>
        public override int DeletePermiso(int? IdPermiso)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoDelete", connection);

                AssingParameter(comandoSql, "@IdPermiso", IdPermiso);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a Permiso
        ///</summary>
        /// <param name="Permiso"> Objeto Permiso a editar </param>
        public override int EditPermiso(PermisoEntity entity_Permiso)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoEdit", connection);

                AssingParameter(comandoSql, "@IdPermiso", entity_Permiso.IdPermiso);

                AssingParameter(comandoSql, "@IdRol", entity_Permiso.IdRol);

                AssingParameter(comandoSql, "@IdModule", entity_Permiso.IdModule);

                AssingParameter(comandoSql, "@OptAdd", entity_Permiso.OptAdd);

                AssingParameter(comandoSql, "@OptSelect", entity_Permiso.OptSelect);

                AssingParameter(comandoSql, "@OptUpdate", entity_Permiso.OptUpdate);

                AssingParameter(comandoSql, "@OptDelete", entity_Permiso.OptDelete);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all Permiso
        ///</summary>
        public override List<PermisoEntity> GetPermiso()
        {
            List<PermisoEntity> PermisoList = new List<PermisoEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PermisoList.Add(GetPermisoFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PermisoList;
        }

        /// <summary>
        /// Gets all Permiso by List<int>
        ///</summary>
        public override List<PermisoEntity> GetPermiso(List<int> lid)
        {
            List<PermisoEntity> PermisoList = new List<PermisoEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PermisoList.Add(GetPermisoFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PermisoList;
        }

        /// <summary>
        /// Gets Permiso by
        ///</summary>
        public override PermisoEntity GetPermisoById(int? IdPermiso)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetById", connection);
                PermisoEntity entity_Permiso = null;


                AssingParameter(comandoSql, "@IdPermiso", IdPermiso);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Permiso = GetPermisoFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Permiso;
            }

        }


        public override List<PermisoEntity> GetPermisoByIdRol(int? IdRol)
        {
            List<PermisoEntity> PermisoList = new List<PermisoEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetByIdRol", connection);

                AssingParameter(comandoSql, "@IdRol", IdRol);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PermisoList.Add(GetPermisoFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PermisoList;
        }

        public override List<PermisoEntity> GetPermisoByIdModule(int? IdModule)
        {
            List<PermisoEntity> PermisoList = new List<PermisoEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetByIdModule", connection);

                AssingParameter(comandoSql, "@IdModule", IdModule);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        PermisoList.Add(GetPermisoFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return PermisoList;
        }


        /// <summary>
        ///Get Permiso
        ///</summary>
        public override SoftvList<PermisoEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<PermisoEntity> entities = new SoftvList<PermisoEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetPermisoFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetPermisoCount();
                return entities ?? new SoftvList<PermisoEntity>();
            }
        }

        /// <summary>
        ///Get Permiso
        ///</summary>
        public override SoftvList<PermisoEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<PermisoEntity> entities = new SoftvList<PermisoEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetPermisoFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetPermisoCount(xml);
                return entities ?? new SoftvList<PermisoEntity>();
            }
        }

        /// <summary>
        ///Get Count Permiso
        ///</summary>
        public int GetPermisoCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count Permiso
        ///</summary>
        public int GetPermisoCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }






        /// <summary>
        ///</summary>
        /// <param name="Permiso"> Object Permiso added to List</param>
        public override int MargePermiso(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {
                SqlCommand comandoSql = CreateCommand("Softv_PermisoMarge", connection);
                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Permiso " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Permiso
        ///</summary>
        public override SoftvList<PermisoEntity> GetXml(String xml)
        
        
        {
            SoftvList<PermisoEntity> entities = new SoftvList<PermisoEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Permiso.ConnectionString))
            {
                SqlCommand comandoSql = CreateCommand("Softv_PermisoGetXml", connection);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetPermisoFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Permiso " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entities ?? new SoftvList<PermisoEntity>();
            }
        }















        #region Customs Methods

        #endregion
    }
}
