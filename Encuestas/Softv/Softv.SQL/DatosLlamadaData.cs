
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.DatosLlamadaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : DatosLlamada Data Access Object
    /// File                    : DatosLlamadaDAO.cs
    /// Creation date           : 21/06/2016
    /// Creation time           : 10:18 a. m.
    ///</summary>
    public class DatosLlamadaData : DatosLlamadaProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="DatosLlamada"> Object DatosLlamada added to List</param>
        public override int AddDatosLlamada(DatosLlamadaEntity entity_DatosLlamada)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaAdd", connection);

                AssingParameter(comandoSql, "@Id", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@IdLlamada", entity_DatosLlamada.IdLlamada);

                AssingParameter(comandoSql, "@Contrato", entity_DatosLlamada.Contrato);

                AssingParameter(comandoSql, "@Fecha", entity_DatosLlamada.Fecha);

                AssingParameter(comandoSql, "@Nombre", entity_DatosLlamada.Nombre);

                AssingParameter(comandoSql, "@Usuario", entity_DatosLlamada.Usuario);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdDatosLlamada"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a DatosLlamada
        ///</summary>
        /// <param name="">  Id to delete </param>
        public override int DeleteDatosLlamada(int? Id)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaDelete", connection);

                AssingParameter(comandoSql, "@Id", Id);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a DatosLlamada
        ///</summary>
        /// <param name="DatosLlamada"> Objeto DatosLlamada a editar </param>
        public override int EditDatosLlamada(DatosLlamadaEntity entity_DatosLlamada)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaEdit", connection);

                AssingParameter(comandoSql, "@Id", entity_DatosLlamada.Id);

                AssingParameter(comandoSql, "@IdLlamada", entity_DatosLlamada.IdLlamada);

                AssingParameter(comandoSql, "@Contrato", entity_DatosLlamada.Contrato);

                AssingParameter(comandoSql, "@Fecha", entity_DatosLlamada.Fecha);

                AssingParameter(comandoSql, "@Nombre", entity_DatosLlamada.Nombre);

                AssingParameter(comandoSql, "@Usuario", entity_DatosLlamada.Usuario);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all DatosLlamada
        ///</summary>
        public override List<DatosLlamadaEntity> GetDatosLlamada()
        {
            List<DatosLlamadaEntity> DatosLlamadaList = new List<DatosLlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_GetAllLlamadas", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        DatosLlamadaList.Add(GetDatosLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return DatosLlamadaList;
        }

        /// <summary>
        /// Gets all DatosLlamada by List<int>
        ///</summary>
        public override List<DatosLlamadaEntity> GetDatosLlamada(List<int> lid)
        {
            List<DatosLlamadaEntity> DatosLlamadaList = new List<DatosLlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        DatosLlamadaList.Add(GetDatosLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return DatosLlamadaList;
        }

        /// <summary>
        /// Gets DatosLlamada by
        ///</summary>
        public override DatosLlamadaEntity GetDatosLlamadaById(int? Id)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaGetById", connection);
                DatosLlamadaEntity entity_DatosLlamada = null;


                AssingParameter(comandoSql, "@Id", Id);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_DatosLlamada = GetDatosLlamadaFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_DatosLlamada;
            }

        }



        /// <summary>
        ///Get DatosLlamada
        ///</summary>
        public override SoftvList<DatosLlamadaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<DatosLlamadaEntity> entities = new SoftvList<DatosLlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetDatosLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetDatosLlamadaCount();
                return entities ?? new SoftvList<DatosLlamadaEntity>();
            }
        }

        /// <summary>
        ///Get DatosLlamada
        ///</summary>
        public override SoftvList<DatosLlamadaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<DatosLlamadaEntity> entities = new SoftvList<DatosLlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetDatosLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetDatosLlamadaCount(xml);
                return entities ?? new SoftvList<DatosLlamadaEntity>();
            }
        }

        /// <summary>
        ///Get Count DatosLlamada
        ///</summary>
        public int GetDatosLlamadaCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count DatosLlamada
        ///</summary>
        public int GetDatosLlamadaCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.DatosLlamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_DatosLlamadaGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data DatosLlamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
