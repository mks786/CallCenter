
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.MotAtenTelData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : MotAtenTel Data Access Object
    /// File                    : MotAtenTelDAO.cs
    /// Creation date           : 27/07/2016
    /// Creation time           : 10:21 a. m.
    ///</summary>
    public class MotAtenTelData : MotAtenTelProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="MotAtenTel"> Object MotAtenTel added to List</param>
        public override int AddMotAtenTel(MotAtenTelEntity entity_MotAtenTel)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelAdd", connection);

                AssingParameter(comandoSql, "@Clv_Motivo", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@Descripcion", entity_MotAtenTel.Descripcion);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@Clv_Motivo"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a MotAtenTel
        ///</summary>
        /// <param name="">  Clv_Motivo to delete </param>
        public override int DeleteMotAtenTel(int? Clv_Motivo)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelDelete", connection);

                AssingParameter(comandoSql, "@Clv_Motivo", Clv_Motivo);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a MotAtenTel
        ///</summary>
        /// <param name="MotAtenTel"> Objeto MotAtenTel a editar </param>
        public override int EditMotAtenTel(MotAtenTelEntity entity_MotAtenTel)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelEdit", connection);

                AssingParameter(comandoSql, "@Clv_Motivo", entity_MotAtenTel.Clv_Motivo);

                AssingParameter(comandoSql, "@Descripcion", entity_MotAtenTel.Descripcion);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all MotAtenTel
        ///</summary>
        public override List<MotAtenTelEntity> GetMotAtenTel()
        {
            List<MotAtenTelEntity> MotAtenTelList = new List<MotAtenTelEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        MotAtenTelList.Add(GetMotAtenTelFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return MotAtenTelList;
        }

        /// <summary>
        /// Gets all MotAtenTel by List<int>
        ///</summary>
        public override List<MotAtenTelEntity> GetMotAtenTel(List<int> lid)
        {
            List<MotAtenTelEntity> MotAtenTelList = new List<MotAtenTelEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        MotAtenTelList.Add(GetMotAtenTelFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return MotAtenTelList;
        }

        /// <summary>
        /// Gets MotAtenTel by
        ///</summary>
        public override MotAtenTelEntity GetMotAtenTelById(int? Clv_Motivo)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelGetById", connection);
                MotAtenTelEntity entity_MotAtenTel = null;


                AssingParameter(comandoSql, "@Clv_Motivo", Clv_Motivo);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_MotAtenTel = GetMotAtenTelFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_MotAtenTel;
            }

        }



        /// <summary>
        ///Get MotAtenTel
        ///</summary>
        public override SoftvList<MotAtenTelEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<MotAtenTelEntity> entities = new SoftvList<MotAtenTelEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetMotAtenTelFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetMotAtenTelCount();
                return entities ?? new SoftvList<MotAtenTelEntity>();
            }
        }

        /// <summary>
        ///Get MotAtenTel
        ///</summary>
        public override SoftvList<MotAtenTelEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<MotAtenTelEntity> entities = new SoftvList<MotAtenTelEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetMotAtenTelFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetMotAtenTelCount(xml);
                return entities ?? new SoftvList<MotAtenTelEntity>();
            }
        }

        /// <summary>
        ///Get Count MotAtenTel
        ///</summary>
        public int GetMotAtenTelCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count MotAtenTel
        ///</summary>
        public int GetMotAtenTelCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.MotAtenTel.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_MotAtenTelGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data MotAtenTel " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
