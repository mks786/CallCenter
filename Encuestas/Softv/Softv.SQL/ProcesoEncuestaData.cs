
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.ProcesoEncuestaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : ProcesoEncuesta Data Access Object
    /// File                    : ProcesoEncuestaDAO.cs
    /// Creation date           : 12/08/2016
    /// Creation time           : 12:44 p. m.
    ///</summary>
    public class ProcesoEncuestaData : ProcesoEncuestaProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="ProcesoEncuesta"> Object ProcesoEncuesta added to List</param>
        public override int AddProcesoEncuesta(ProcesoEncuestaEntity entity_ProcesoEncuesta)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaAdd", connection);

                AssingParameter(comandoSql, "@IdProcesoEnc", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@NombreProceso", entity_ProcesoEncuesta.NombreProceso);

                AssingParameter(comandoSql, "@TipSer", entity_ProcesoEncuesta.TipSer);

                AssingParameter(comandoSql, "@TipoBusqueda", entity_ProcesoEncuesta.TipoBusqueda);

                AssingParameter(comandoSql, "@StatusTipBusq", entity_ProcesoEncuesta.StatusTipBusq);

                AssingParameter(comandoSql, "@TipoFecha", entity_ProcesoEncuesta.TipoFecha);

                AssingParameter(comandoSql, "@FechaInicio", entity_ProcesoEncuesta.FechaInicio);

                AssingParameter(comandoSql, "@FechaFin", entity_ProcesoEncuesta.FechaFin);

                AssingParameter(comandoSql, "@Encuesta", entity_ProcesoEncuesta.Encuesta);

                AssingParameter(comandoSql, "@StatusEncuesta", entity_ProcesoEncuesta.StatusEncuesta);

                AssingParameter(comandoSql, "@Usuario", entity_ProcesoEncuesta.Usuario);
                AssingParameter(comandoSql, "@IdEncuesta", entity_ProcesoEncuesta.IdEncuesta);
                AssingParameter(comandoSql, "@Total", entity_ProcesoEncuesta.Total);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdProcesoEnc"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a ProcesoEncuesta
        ///</summary>
        /// <param name="">  IdProcesoEnc to delete </param>
        public override int DeleteProcesoEncuesta(int? IdProcesoEnc)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaDelete", connection);

                AssingParameter(comandoSql, "@IdProcesoEnc", IdProcesoEnc);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a ProcesoEncuesta
        ///</summary>
        /// <param name="ProcesoEncuesta"> Objeto ProcesoEncuesta a editar </param>
        public override int EditProcesoEncuesta(ProcesoEncuestaEntity entity_ProcesoEncuesta)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaEdit", connection);

                AssingParameter(comandoSql, "@IdProcesoEnc", entity_ProcesoEncuesta.IdProcesoEnc);

                AssingParameter(comandoSql, "@NombreProceso", entity_ProcesoEncuesta.NombreProceso);

                AssingParameter(comandoSql, "@TipSer", entity_ProcesoEncuesta.TipSer);

                AssingParameter(comandoSql, "@TipoBusqueda", entity_ProcesoEncuesta.TipoBusqueda);

                AssingParameter(comandoSql, "@StatusTipBusq", entity_ProcesoEncuesta.StatusTipBusq);

                AssingParameter(comandoSql, "@TipoFecha", entity_ProcesoEncuesta.TipoFecha);

                AssingParameter(comandoSql, "@FechaInicio", entity_ProcesoEncuesta.FechaInicio);

                AssingParameter(comandoSql, "@FechaFin", entity_ProcesoEncuesta.FechaFin);

                AssingParameter(comandoSql, "@Encuesta", entity_ProcesoEncuesta.Encuesta);

                AssingParameter(comandoSql, "@StatusEncuesta", entity_ProcesoEncuesta.StatusEncuesta);

                AssingParameter(comandoSql, "@Usuario", entity_ProcesoEncuesta.Usuario);
                AssingParameter(comandoSql, "@IdEncuesta", entity_ProcesoEncuesta.IdEncuesta);
                AssingParameter(comandoSql, "@Total", entity_ProcesoEncuesta.Total);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all ProcesoEncuesta
        ///</summary>
        public override List<ProcesoEncuestaEntity> GetProcesoEncuesta()
        {
            List<ProcesoEncuestaEntity> ProcesoEncuestaList = new List<ProcesoEncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ProcesoEncuestaList.Add(GetProcesoEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ProcesoEncuestaList;
        }

        /// <summary>
        /// Gets all ProcesoEncuesta by List<int>
        ///</summary>
        public override List<ProcesoEncuestaEntity> GetProcesoEncuesta(List<int> lid)
        {
            List<ProcesoEncuestaEntity> ProcesoEncuestaList = new List<ProcesoEncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ProcesoEncuestaList.Add(GetProcesoEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ProcesoEncuestaList;
        }

        /// <summary>
        /// Gets ProcesoEncuesta by
        ///</summary>
        public override ProcesoEncuestaEntity GetProcesoEncuestaById(int? IdProcesoEnc)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGetById", connection);
                ProcesoEncuestaEntity entity_ProcesoEncuesta = null;


                AssingParameter(comandoSql, "@IdProcesoEnc", IdProcesoEnc);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_ProcesoEncuesta = GetProcesoEncuestaFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_ProcesoEncuesta;
            }

        }


        public override List<ProcesoEncuestaEntity> GetProcesoEncuestaByIdProcesoEnc(int? IdProcesoEnc)
        {
            List<ProcesoEncuestaEntity> ProcesoEncuestaList = new List<ProcesoEncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGetByIdProcesoEnc", connection);

                AssingParameter(comandoSql, "@IdProcesoEnc", IdProcesoEnc);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        ProcesoEncuestaList.Add(GetProcesoEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return ProcesoEncuestaList;
        }


        /// <summary>
        ///Get ProcesoEncuesta
        ///</summary>
        public override SoftvList<ProcesoEncuestaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<ProcesoEncuestaEntity> entities = new SoftvList<ProcesoEncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetProcesoEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetProcesoEncuestaCount();
                return entities ?? new SoftvList<ProcesoEncuestaEntity>();
            }
        }

        /// <summary>
        ///Get ProcesoEncuesta
        ///</summary>
        public override SoftvList<ProcesoEncuestaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<ProcesoEncuestaEntity> entities = new SoftvList<ProcesoEncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetProcesoEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetProcesoEncuestaCount(xml);
                return entities ?? new SoftvList<ProcesoEncuestaEntity>();
            }
        }

        /// <summary>
        ///Get Count ProcesoEncuesta
        ///</summary>
        public int GetProcesoEncuestaCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count ProcesoEncuesta
        ///</summary>
        public int GetProcesoEncuestaCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.ProcesoEncuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_ProcesoEncuestaGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data ProcesoEncuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
