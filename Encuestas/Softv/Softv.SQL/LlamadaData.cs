
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.LlamadaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Llamada Data Access Object
    /// File                    : LlamadaDAO.cs
    /// Creation date           : 20/05/2016
    /// Creation time           : 06:37 p. m.
    ///</summary>
    public class LlamadaData : LlamadaProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="Llamada"> Object Llamada added to List</param>
        public override int AddLlamada(LlamadaEntity entity_Llamada)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaAdd", connection);

                AssingParameter(comandoSql, "@IdLlamada", null, pd: ParameterDirection.Output, IsKey: true);

                AssingParameter(comandoSql, "@IdUsuario", entity_Llamada.IdUsuario);

                AssingParameter(comandoSql, "@Tipo_Llamada", entity_Llamada.Tipo_Llamada);

                AssingParameter(comandoSql, "@Contrato", entity_Llamada.Contrato);

                AssingParameter(comandoSql, "@Detalle", entity_Llamada.Detalle);

                AssingParameter(comandoSql, "@Solucion", entity_Llamada.Solucion);

                AssingParameter(comandoSql, "@Fecha", entity_Llamada.Fecha);

                AssingParameter(comandoSql, "@HoraInicio", entity_Llamada.HoraInicio);

                AssingParameter(comandoSql, "@HoraFin", entity_Llamada.HoraFin);

                AssingParameter(comandoSql, "@IdTurno", entity_Llamada.IdTurno);

                AssingParameter(comandoSql, "@Clv_Queja", entity_Llamada.Clv_Queja);

                AssingParameter(comandoSql, "@IdConexion", entity_Llamada.IdConexion);

                AssingParameter(comandoSql, "@Clv_Trabajo", entity_Llamada.Clv_Trabajo);

                AssingParameter(comandoSql, "@Clv_TipSer", entity_Llamada.Clv_TipSer);

                AssingParameter(comandoSql, "@Clv_Problema", entity_Llamada.Clv_Problema);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Llamada " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdLlamada"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a Llamada
        ///</summary>
        /// <param name="">  IdLlamada to delete </param>
        public override int DeleteLlamada(int? IdLlamada)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaDelete", connection);

                AssingParameter(comandoSql, "@IdLlamada", IdLlamada);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a Llamada
        ///</summary>
        /// <param name="Llamada"> Objeto Llamada a editar </param>
        public override int EditLlamada(LlamadaEntity entity_Llamada)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaEdit", connection);

                AssingParameter(comandoSql, "@IdLlamada", entity_Llamada.IdLlamada);

                AssingParameter(comandoSql, "@IdUsuario", entity_Llamada.IdUsuario);

                AssingParameter(comandoSql, "@Tipo_Llamada", entity_Llamada.Tipo_Llamada);

                AssingParameter(comandoSql, "@Contrato", entity_Llamada.Contrato);

                AssingParameter(comandoSql, "@Detalle", entity_Llamada.Detalle);

                AssingParameter(comandoSql, "@Solucion", entity_Llamada.Solucion);

                AssingParameter(comandoSql, "@Fecha", entity_Llamada.Fecha);

                AssingParameter(comandoSql, "@HoraInicio", entity_Llamada.HoraInicio);

                AssingParameter(comandoSql, "@HoraFin", entity_Llamada.HoraFin);

                AssingParameter(comandoSql, "@IdTurno", entity_Llamada.IdTurno);

                AssingParameter(comandoSql, "@Clv_Queja", entity_Llamada.Clv_Queja);

                AssingParameter(comandoSql, "@IdConexion", entity_Llamada.IdConexion);

                AssingParameter(comandoSql, "@Clv_Trabajo", entity_Llamada.Clv_Trabajo);

                AssingParameter(comandoSql, "@Clv_TipSer", entity_Llamada.Clv_TipSer);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Gets all Llamada
        ///</summary>
        public override List<LlamadaEntity> GetLlamada()
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        /// <summary>
        /// Gets all Llamada by List<int>
        ///</summary>
        public override List<LlamadaEntity> GetLlamada(List<int> lid)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        /// <summary>
        /// Gets Llamada by
        ///</summary>
        public override LlamadaEntity GetLlamadaById(int? IdLlamada)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetById", connection);
                LlamadaEntity entity_Llamada = null;


                AssingParameter(comandoSql, "@IdLlamada", IdLlamada);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Llamada = GetLlamadaFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Llamada;
            }

        }


        public override List<LlamadaEntity> GetLlamadaByIdUsuario(int? IdUsuario)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByIdUsuario", connection);

                AssingParameter(comandoSql, "@IdUsuario", IdUsuario);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        public override List<LlamadaEntity> GetLlamadaByIdTurno(int? IdTurno)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByIdTurno", connection);

                AssingParameter(comandoSql, "@IdTurno", IdTurno);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        public override List<LlamadaEntity> GetLlamadaByIdConexion(int? IdConexion)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByIdConexion", connection);

                AssingParameter(comandoSql, "@IdConexion", IdConexion);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        public override List<LlamadaEntity> GetLlamadaByClv_Trabajo(int? Clv_Trabajo)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByClv_Trabajo", connection);

                AssingParameter(comandoSql, "@Clv_Trabajo", Clv_Trabajo);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        public override List<LlamadaEntity> GetLlamadaByClv_TipSer(int? Clv_TipSer)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByClv_TipSer", connection);

                AssingParameter(comandoSql, "@Clv_TipSer", Clv_TipSer);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        public override List<LlamadaEntity> GetLlamadaByContrato(long? Contrato)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByContrato", connection);

                AssingParameter(comandoSql, "@Contrato", Contrato);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }

        public override List<LlamadaEntity> GetLlamadaByClv_Queja(long? Clv_Queja)
        {
            List<LlamadaEntity> LlamadaList = new List<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetByClv_Queja", connection);

                AssingParameter(comandoSql, "@Clv_Queja", Clv_Queja);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        LlamadaList.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return LlamadaList;
        }


        /// <summary>
        ///Get Llamada
        ///</summary>
        public override SoftvList<LlamadaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<LlamadaEntity> entities = new SoftvList<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetLlamadaCount();
                return entities ?? new SoftvList<LlamadaEntity>();
            }
        }

        /// <summary>
        ///Get Llamada
        ///</summary>
        public override SoftvList<LlamadaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<LlamadaEntity> entities = new SoftvList<LlamadaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetLlamadaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetLlamadaCount(xml);
                return entities ?? new SoftvList<LlamadaEntity>();
            }
        }

        /// <summary>
        ///Get Count Llamada
        ///</summary>
        public int GetLlamadaCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count Llamada
        ///</summary>
        public int GetLlamadaCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Llamada.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_LlamadaGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Llamada " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        #region Customs Methods

        #endregion
    }
}
