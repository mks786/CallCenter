
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using Softv.Entities;
using Softv.Providers;
using SoftvConfiguration;
using Globals;

namespace Softv.DAO
{
    /// <summary>
    /// Class                   : Softv.DAO.EncuestaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : Encuesta Data Access Object
    /// File                    : EncuestaDAO.cs
    /// Creation date           : 29/04/2016
    /// Creation time           : 05:28 p. m.
    ///</summary>
    public class EncuestaData : EncuestaProvider
    {
        /// <summary>
        ///</summary>
        /// <param name="Encuesta"> Object Encuesta added to List</param>
        public override int AddEncuesta(string data)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("SP_AddEncuestaL", connection);

                AssingParameter(comandoSql, "@xml", data);
                AssingParameter(comandoSql, "@IdEncuesta", null, pd: ParameterDirection.Output, IsKey: true);


                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Encuesta " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdEncuesta"].Value;
            }
            return result;
        }

        /// <summary>
        /// Deletes a Encuesta
        ///</summary>
        /// <param name="">  IdEncuesta to delete </param>
        public override int DeleteEncuesta(int? IdEncuesta)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaDelete", connection);

                AssingParameter(comandoSql, "@IdEncuesta", IdEncuesta);

                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error deleting Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }

        /// <summary>
        /// Edits a Encuesta
        ///</summary>
        /// <param name="Encuesta"> Objeto Encuesta a editar </param>
        public override int EditEncuesta(string data)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("SP_UpdateEncuestaL", connection);
                AssingParameter(comandoSql, "@xml", data);


                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();

                    result = int.Parse(ExecuteNonQuery(comandoSql).ToString());

                }
                catch (Exception ex)
                {
                    throw new Exception("Error updating Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        public override List<EstadisticaEncuesta> getestadisticas(int plaza, int idencuesta, DateTime finicio, DateTime ffin)
        {
            List<EstadisticaEncuesta> EncuestaList = new List<EstadisticaEncuesta>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("GraficasPreguntas", connection);
                AssingParameter(comandoSql, "@IdConexion", plaza);
                AssingParameter(comandoSql, "@IdEncuesta", idencuesta);
                AssingParameter(comandoSql, "@FechaInicio", finicio);
                AssingParameter(comandoSql, "@FechaFin", ffin);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        EstadisticaEncuesta a = new EstadisticaEncuesta();
                        a.NombreEncuesta=rd[0].ToString();
                        a.pregunta = rd[1].ToString();
                        a.respuesta = rd[2].ToString();
                        a.cantidad = Int32.Parse(rd[3].ToString());
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return EncuestaList;
        }



        /// <summary>
        /// Gets all Encuesta
        ///</summary>
        public override List<EncuestaEntity> GetEncuesta()
        {
            List<EncuestaEntity> EncuestaList = new List<EncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGet", connection);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        EncuestaList.Add(GetEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return EncuestaList;
        }

        /// <summary>
        /// Gets all Encuesta by List<int>
        ///</summary>
        public override List<EncuestaEntity> GetEncuesta(List<int> lid)
        {
            List<EncuestaEntity> EncuestaList = new List<EncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {
                DataTable IdDT = BuildTableID(lid);

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetByIds", connection);
                AssingParameter(comandoSql, "@IdTable", IdDT);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        EncuestaList.Add(GetEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return EncuestaList;
        }

        /// <summary>
        /// Gets Encuesta by
        ///</summary>
        public override EncuestaEntity GetEncuestaById(int? IdEncuesta)
        {
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetById", connection);
                EncuestaEntity entity_Encuesta = null;


                AssingParameter(comandoSql, "@IdEncuesta", IdEncuesta);

                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
                    if (rd.Read())
                        entity_Encuesta = GetEncuestaFromReader(rd);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                return entity_Encuesta;
            }

        }


        public override List<EncuestaEntity> GetEncuestaByIdUsuario(int? IdUsuario)
        {
            List<EncuestaEntity> EncuestaList = new List<EncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetByIdUsuario", connection);

                AssingParameter(comandoSql, "@IdUsuario", IdUsuario);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        EncuestaList.Add(GetEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return EncuestaList;
        }

        public override List<EncuestaEntity> GetEncuestaByIdEncuesta(int? IdEncuesta)
        {
            List<EncuestaEntity> EncuestaList = new List<EncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetByIdEncuesta", connection);

                AssingParameter(comandoSql, "@IdEncuesta", IdEncuesta);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);

                    while (rd.Read())
                    {
                        EncuestaList.Add(GetEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
            }
            return EncuestaList;
        }


        /// <summary>
        ///Get Encuesta
        ///</summary>
        public override SoftvList<EncuestaEntity> GetPagedList(int pageIndex, int pageSize)
        {
            SoftvList<EncuestaEntity> entities = new SoftvList<EncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetPaged", connection);

                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@pageSize", pageSize);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetEncuestaCount();
                return entities ?? new SoftvList<EncuestaEntity>();
            }
        }

        /// <summary>
        ///Get Encuesta
        ///</summary>
        public override SoftvList<EncuestaEntity> GetPagedList(int pageIndex, int pageSize, String xml)
        {
            SoftvList<EncuestaEntity> entities = new SoftvList<EncuestaEntity>();
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetPagedXml", connection);

                AssingParameter(comandoSql, "@pageSize", pageSize);
                AssingParameter(comandoSql, "@pageIndex", pageIndex);
                AssingParameter(comandoSql, "@xml", xml);
                IDataReader rd = null;
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    rd = ExecuteReader(comandoSql);
                    while (rd.Read())
                    {
                        entities.Add(GetEncuestaFromReader(rd));
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                    if (rd != null)
                        rd.Close();
                }
                entities.totalCount = GetEncuestaCount(xml);
                return entities ?? new SoftvList<EncuestaEntity>();
            }
        }

        /// <summary>
        ///Get Count Encuesta
        ///</summary>
        public int GetEncuestaCount()
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetCount", connection);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        /// <summary>
        ///Get Count Encuesta
        ///</summary>
        public int GetEncuestaCount(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {

                SqlCommand comandoSql = CreateCommand("Softv_EncuestaGetCountXml", connection);

                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = (int)ExecuteScalar(comandoSql);


                }
                catch (Exception ex)
                {
                    throw new Exception("Error getting data Encuesta " + ex.Message, ex);
                }
                finally
                {
                    if (connection != null)
                        connection.Close();
                }
            }
            return result;
        }


        public override int AddEncuestaRel(String xml)
        {
            int result = 0;
            using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.Encuesta.ConnectionString))
            {
                SqlCommand comandoSql = CreateCommand("SP_EncuestaRel", connection);

                AssingParameter(comandoSql, "@IdEncuesta", null, pd: ParameterDirection.Output, IsKey: true);
                AssingParameter(comandoSql, "@xml", xml);
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    result = ExecuteNonQuery(comandoSql);
                }
                catch (Exception ex)
                {
                    throw new Exception("Error adding Encuesta " + ex.Message, ex);
                }
                finally
                {
                    connection.Close();
                }
                result = (int)comandoSql.Parameters["@IdEncuesta"].Value;
            }
            return result;
        }




        #region Customs Methods

        #endregion
    }
}
