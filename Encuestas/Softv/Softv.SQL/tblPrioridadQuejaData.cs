
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using Softv.Entities;
    using Softv.Providers;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.DAO
    {
    /// <summary>
    /// Class                   : Softv.DAO.tblPrioridadQuejaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : tblPrioridadQueja Data Access Object
    /// File                    : tblPrioridadQuejaDAO.cs
    /// Creation date           : 08/06/2016
    /// Creation time           : 10:53 a. m.
    ///</summary>
    public class tblPrioridadQuejaData : tblPrioridadQuejaProvider
    {
    /// <summary>
    ///</summary>
    /// <param name="tblPrioridadQueja"> Object tblPrioridadQueja added to List</param>
    public override int AddtblPrioridadQueja(tblPrioridadQuejaEntity entity_tblPrioridadQueja)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaAdd", connection);
    
        AssingParameter(comandoSql, "@clvPrioridadQueja", null, pd: ParameterDirection.Output, IsKey: true);
      
            AssingParameter(comandoSql,"@Descripcion",entity_tblPrioridadQueja.Descripcion);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error adding tblPrioridadQueja " + ex.Message, ex);
    }
    finally
    {
    connection.Close();
    }
    result = (int)comandoSql.Parameters["@IdtblPrioridadQueja"].Value;
    }
    return result;
    }

    /// <summary>
    /// Deletes a tblPrioridadQueja
    ///</summary>
    /// <param name="">  clvPrioridadQueja to delete </param>
    public override int DeletetblPrioridadQueja(int? clvPrioridadQueja)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaDelete", connection);
    
            AssingParameter(comandoSql,"@clvPrioridadQueja",clvPrioridadQueja);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error deleting tblPrioridadQueja " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Edits a tblPrioridadQueja
    ///</summary>
    /// <param name="tblPrioridadQueja"> Objeto tblPrioridadQueja a editar </param>
    public override int EdittblPrioridadQueja(tblPrioridadQuejaEntity entity_tblPrioridadQueja)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaEdit", connection);
    
            AssingParameter(comandoSql,"@clvPrioridadQueja",entity_tblPrioridadQueja.clvPrioridadQueja);
          
            AssingParameter(comandoSql,"@Descripcion",entity_tblPrioridadQueja.Descripcion);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    
        result = int.Parse(ExecuteNonQuery(comandoSql).ToString());
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error updating tblPrioridadQueja " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Gets all tblPrioridadQueja
    ///</summary>
    public override List<tblPrioridadQuejaEntity> GettblPrioridadQueja()
    {
    List<tblPrioridadQuejaEntity> tblPrioridadQuejaList = new List<tblPrioridadQuejaEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaGet", connection);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    tblPrioridadQuejaList.Add(GettblPrioridadQuejaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblPrioridadQueja "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return tblPrioridadQuejaList;
    }

    /// <summary>
    /// Gets all tblPrioridadQueja by List<int>
    ///</summary>
    public override List<tblPrioridadQuejaEntity> GettblPrioridadQueja(List<int> lid)
    {
    List<tblPrioridadQuejaEntity> tblPrioridadQuejaList = new List<tblPrioridadQuejaEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    DataTable IdDT = BuildTableID(lid);
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaGetByIds", connection);
    AssingParameter(comandoSql, "@IdTable", IdDT);
    
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    tblPrioridadQuejaList.Add(GettblPrioridadQuejaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblPrioridadQueja "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return tblPrioridadQuejaList;
    }

    /// <summary>
    /// Gets tblPrioridadQueja by
    ///</summary>
    public override tblPrioridadQuejaEntity GettblPrioridadQuejaById(int? clvPrioridadQueja)
    {
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaGetById", connection);
    tblPrioridadQuejaEntity entity_tblPrioridadQueja = null;

    
            AssingParameter(comandoSql,"@clvPrioridadQueja", clvPrioridadQueja);
          
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
    if (rd.Read())
    entity_tblPrioridadQueja = GettblPrioridadQuejaFromReader(rd);
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblPrioridadQueja "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    return entity_tblPrioridadQueja;
    }

    }

    

    /// <summary>
    ///Get tblPrioridadQueja
    ///</summary>
    public override SoftvList<tblPrioridadQuejaEntity> GetPagedList(int pageIndex, int pageSize)
    {
    SoftvList<tblPrioridadQuejaEntity> entities = new SoftvList<tblPrioridadQuejaEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaGetPaged", connection);
    
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@pageSize", pageSize);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GettblPrioridadQuejaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblPrioridadQueja " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GettblPrioridadQuejaCount();
    return entities ?? new SoftvList<tblPrioridadQuejaEntity>();
    }
    }

    /// <summary>
    ///Get tblPrioridadQueja
    ///</summary>
    public override SoftvList<tblPrioridadQuejaEntity> GetPagedList(int pageIndex, int pageSize,String xml)
    {
    SoftvList<tblPrioridadQuejaEntity> entities = new SoftvList<tblPrioridadQuejaEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaGetPagedXml", connection);
    
    AssingParameter(comandoSql,"@pageSize", pageSize);
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@xml", xml);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GettblPrioridadQuejaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblPrioridadQueja " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GettblPrioridadQuejaCount(xml);
    return entities ?? new SoftvList<tblPrioridadQuejaEntity>();
    }
    }

    /// <summary>
    ///Get Count tblPrioridadQueja
    ///</summary>
    public int GettblPrioridadQuejaCount()
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaGetCount", connection);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblPrioridadQueja " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }


    /// <summary>
    ///Get Count tblPrioridadQueja
    ///</summary>
    public int GettblPrioridadQuejaCount(String xml)
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.tblPrioridadQueja.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_tblPrioridadQuejaGetCountXml", connection);
    
    AssingParameter(comandoSql,"@xml", xml);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data tblPrioridadQueja " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }

    #region Customs Methods
    
    #endregion
    }
    }
  