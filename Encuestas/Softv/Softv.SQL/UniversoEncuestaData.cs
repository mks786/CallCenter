
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using Softv.Entities;
    using Softv.Providers;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.DAO
    {
    /// <summary>
    /// Class                   : Softv.DAO.UniversoEncuestaData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : UniversoEncuesta Data Access Object
    /// File                    : UniversoEncuestaDAO.cs
    /// Creation date           : 12/08/2016
    /// Creation time           : 12:44 p. m.
    ///</summary>
    public class UniversoEncuestaData : UniversoEncuestaProvider
    {
    /// <summary>
    ///</summary>
    /// <param name="UniversoEncuesta"> Object UniversoEncuesta added to List</param>
    public override int AddUniversoEncuesta(UniversoEncuestaEntity entity_UniversoEncuesta)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaAdd", connection);
    
        AssingParameter(comandoSql, "@Id", null, pd: ParameterDirection.Output, IsKey: true);
      
            AssingParameter(comandoSql,"@IdProcesoEnc",entity_UniversoEncuesta.IdProcesoEnc);
          
            AssingParameter(comandoSql,"@Contrato",entity_UniversoEncuesta.Contrato);
          
            AssingParameter(comandoSql,"@Nombre",entity_UniversoEncuesta.Nombre);
          
            AssingParameter(comandoSql,"@Tel",entity_UniversoEncuesta.Tel);
          
            AssingParameter(comandoSql,"@Cel",entity_UniversoEncuesta.Cel);
          
            AssingParameter(comandoSql,"@Aplicada",entity_UniversoEncuesta.Aplicada);
            AssingParameter(comandoSql, "@IdPlaza", entity_UniversoEncuesta.IdPlaza);
            AssingParameter(comandoSql, "@Ciudad", entity_UniversoEncuesta.Ciudad);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error adding UniversoEncuesta " + ex.Message, ex);
    }
    finally
    {
    connection.Close();
    }
    result = (int)comandoSql.Parameters["@Id"].Value;
    }
    return result;
    }

    /// <summary>
    /// Deletes a UniversoEncuesta
    ///</summary>
    /// <param name="">  Id to delete </param>
    public override int DeleteUniversoEncuesta(int? Id)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaDelete", connection);
    
            AssingParameter(comandoSql,"@Id",Id);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error deleting UniversoEncuesta " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Edits a UniversoEncuesta
    ///</summary>
    /// <param name="UniversoEncuesta"> Objeto UniversoEncuesta a editar </param>
    public override int EditUniversoEncuesta(UniversoEncuestaEntity entity_UniversoEncuesta)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaEdit", connection);
    
            AssingParameter(comandoSql,"@Id",entity_UniversoEncuesta.Id);
          
            AssingParameter(comandoSql,"@IdProcesoEnc",entity_UniversoEncuesta.IdProcesoEnc);
          
            AssingParameter(comandoSql,"@Contrato",entity_UniversoEncuesta.Contrato);
          
            AssingParameter(comandoSql,"@Nombre",entity_UniversoEncuesta.Nombre);
          
            AssingParameter(comandoSql,"@Tel",entity_UniversoEncuesta.Tel);
          
            AssingParameter(comandoSql,"@Cel",entity_UniversoEncuesta.Cel);
          
            AssingParameter(comandoSql,"@Aplicada",entity_UniversoEncuesta.Aplicada);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    
        result = int.Parse(ExecuteNonQuery(comandoSql).ToString());
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error updating UniversoEncuesta " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Gets all UniversoEncuesta
    ///</summary>
    public override List<UniversoEncuestaEntity> GetUniversoEncuesta()
    {
    List<UniversoEncuestaEntity> UniversoEncuestaList = new List<UniversoEncuestaEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGet", connection);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    UniversoEncuestaList.Add(GetUniversoEncuestaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data UniversoEncuesta "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return UniversoEncuestaList;
    }

    /// <summary>
    /// Gets all UniversoEncuesta by List<int>
    ///</summary>
    public override List<UniversoEncuestaEntity> GetUniversoEncuesta(List<int> lid)
    {
    List<UniversoEncuestaEntity> UniversoEncuestaList = new List<UniversoEncuestaEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    DataTable IdDT = BuildTableID(lid);
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGetByIds", connection);
    AssingParameter(comandoSql, "@IdTable", IdDT);
    
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    UniversoEncuestaList.Add(GetUniversoEncuestaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data UniversoEncuesta "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return UniversoEncuestaList;
    }

    /// <summary>
    /// Gets UniversoEncuesta by
    ///</summary>
    public override UniversoEncuestaEntity GetUniversoEncuestaById(int? Id)
    {
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGetById", connection);
    UniversoEncuestaEntity entity_UniversoEncuesta = null;

    
            AssingParameter(comandoSql,"@Id", Id);
          
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
    if (rd.Read())
    entity_UniversoEncuesta = GetUniversoEncuestaFromReader(rd);
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data UniversoEncuesta "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    return entity_UniversoEncuesta;
    }

    }

    
          public override List<UniversoEncuestaEntity> GetUniversoEncuestaByIdProcesoEnc(int? IdProcesoEnc)
          {
          List<UniversoEncuestaEntity> UniversoEncuestaList = new List<UniversoEncuestaEntity>();
          using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
          {
          
          SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGetByIdProcesoEnc", connection);
          
          AssingParameter(comandoSql, "@IdProcesoEnc", IdProcesoEnc);
          IDataReader rd = null;
          try
          {
          if (connection.State == ConnectionState.Closed)
          connection.Open();
          rd = ExecuteReader(comandoSql);

          while (rd.Read())
          {
          UniversoEncuestaList.Add(GetUniversoEncuestaFromReader(rd));
          }
          }
          catch (Exception ex)
          {
          throw new Exception("Error getting data UniversoEncuesta "  + ex.Message, ex);
          }
          finally
          {
          if(connection!=null)
          connection.Close();
          if(rd != null)
          rd.Close();
          }
          }
          return UniversoEncuestaList;
          }
        

    /// <summary>
    ///Get UniversoEncuesta
    ///</summary>
    public override SoftvList<UniversoEncuestaEntity> GetPagedList(int pageIndex, int pageSize)
    {
    SoftvList<UniversoEncuestaEntity> entities = new SoftvList<UniversoEncuestaEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGetPaged", connection);
    
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@pageSize", pageSize);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetUniversoEncuestaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data UniversoEncuesta " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetUniversoEncuestaCount();
    return entities ?? new SoftvList<UniversoEncuestaEntity>();
    }
    }

    /// <summary>
    ///Get UniversoEncuesta
    ///</summary>
    public override SoftvList<UniversoEncuestaEntity> GetPagedList(int pageIndex, int pageSize,String xml)
    {
    SoftvList<UniversoEncuestaEntity> entities = new SoftvList<UniversoEncuestaEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGetPagedXml", connection);
    
    AssingParameter(comandoSql,"@pageSize", pageSize);
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@xml", xml);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetUniversoEncuestaFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data UniversoEncuesta " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetUniversoEncuestaCount(xml);
    return entities ?? new SoftvList<UniversoEncuestaEntity>();
    }
    }

    /// <summary>
    ///Get Count UniversoEncuesta
    ///</summary>
    public int GetUniversoEncuestaCount()
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGetCount", connection);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data UniversoEncuesta " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }


    /// <summary>
    ///Get Count UniversoEncuesta
    ///</summary>
    public int GetUniversoEncuestaCount(String xml)
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.UniversoEncuesta.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_UniversoEncuestaGetCountXml", connection);
    
    AssingParameter(comandoSql,"@xml", xml);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data UniversoEncuesta " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }

    #region Customs Methods
    
    #endregion
    }
    }
  