
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Data;
    using System.Linq;
    using System.Data.SqlClient;
    using Softv.Entities;
    using Softv.Providers;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.DAO
    {
    /// <summary>
    /// Class                   : Softv.DAO.CiudadServidorData
    /// Generated by            : Class Generator (c) 2014
    /// Description             : CiudadServidor Data Access Object
    /// File                    : CiudadServidorDAO.cs
    /// Creation date           : 02/08/2016
    /// Creation time           : 12:53 p. m.
    ///</summary>
    public class CiudadServidorData : CiudadServidorProvider
    {
    /// <summary>
    ///</summary>
    /// <param name="CiudadServidor"> Object CiudadServidor added to List</param>
    public override int AddCiudadServidor(CiudadServidorEntity entity_CiudadServidor)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorAdd", connection);
    
        AssingParameter(comandoSql, "@Id", null, pd: ParameterDirection.Output, IsKey: true);
      
            AssingParameter(comandoSql,"@Ciudad",entity_CiudadServidor.Ciudad);
          
            AssingParameter(comandoSql,"@IdPlaza",entity_CiudadServidor.IdPlaza);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error adding CiudadServidor " + ex.Message, ex);
    }
    finally
    {
    connection.Close();
    }
    result = (int)comandoSql.Parameters["@IdCiudadServidor"].Value;
    }
    return result;
    }

    /// <summary>
    /// Deletes a CiudadServidor
    ///</summary>
    /// <param name="">  Id to delete </param>
    public override int DeleteCiudadServidor(int? Id)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorDelete", connection);
    
            AssingParameter(comandoSql,"@Id",Id);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = ExecuteNonQuery(comandoSql);
    }
    catch (Exception ex)
    {
    throw new Exception("Error deleting CiudadServidor " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Edits a CiudadServidor
    ///</summary>
    /// <param name="CiudadServidor"> Objeto CiudadServidor a editar </param>
    public override int EditCiudadServidor(CiudadServidorEntity entity_CiudadServidor)
    {
    int result=0;
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorEdit", connection);
    
            AssingParameter(comandoSql,"@Id",entity_CiudadServidor.Id);
          
            AssingParameter(comandoSql,"@Ciudad",entity_CiudadServidor.Ciudad);
          
            AssingParameter(comandoSql,"@IdPlaza",entity_CiudadServidor.IdPlaza);
          
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    
        result = int.Parse(ExecuteNonQuery(comandoSql).ToString());
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error updating CiudadServidor " + ex.Message, ex);
    }
    finally
    {
    if(connection != null)
    connection.Close();
    }
    }
    return result;
    }

    /// <summary>
    /// Gets all CiudadServidor
    ///</summary>
    public override List<CiudadServidorEntity> GetCiudadServidor()
    {
    List<CiudadServidorEntity> CiudadServidorList = new List<CiudadServidorEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGet", connection);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    CiudadServidorList.Add(GetCiudadServidorFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data CiudadServidor "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return CiudadServidorList;
    }

    /// <summary>
    /// Gets all CiudadServidor by List<int>
    ///</summary>
    public override List<CiudadServidorEntity> GetCiudadServidor(List<int> lid)
    {
    List<CiudadServidorEntity> CiudadServidorList = new List<CiudadServidorEntity>();
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    DataTable IdDT = BuildTableID(lid);
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGetByIds", connection);
    AssingParameter(comandoSql, "@IdTable", IdDT);
    
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);

    while (rd.Read())
    {
    CiudadServidorList.Add(GetCiudadServidorFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data CiudadServidor "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    }
    return CiudadServidorList;
    }

    /// <summary>
    /// Gets CiudadServidor by
    ///</summary>
    public override CiudadServidorEntity GetCiudadServidorById(int? Id)
    {
    using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGetById", connection);
    CiudadServidorEntity entity_CiudadServidor = null;

    
            AssingParameter(comandoSql,"@Id", Id);
          
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql, CommandBehavior.SingleRow);
    if (rd.Read())
    entity_CiudadServidor = GetCiudadServidorFromReader(rd);
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data CiudadServidor "  + ex.Message, ex);
    }
    finally
    {
    if(connection!=null)
    connection.Close();
    if(rd != null)
    rd.Close();
    }
    return entity_CiudadServidor;
    }

    }

    
          public override List<CiudadServidorEntity> GetCiudadServidorByIdConexion(int? IdPlaza)
          {
          List<CiudadServidorEntity> CiudadServidorList = new List<CiudadServidorEntity>();
          using(SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
          {
          
          SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGetByIdConexion", connection);
          
          AssingParameter(comandoSql, "@IdPlaza", IdPlaza);
          IDataReader rd = null;
          try
          {
          if (connection.State == ConnectionState.Closed)
          connection.Open();
          rd = ExecuteReader(comandoSql);

          while (rd.Read())
          {
          CiudadServidorList.Add(GetCiudadServidorFromReader(rd));
          }
          }
          catch (Exception ex)
          {
          throw new Exception("Error getting data CiudadServidor "  + ex.Message, ex);
          }
          finally
          {
          if(connection!=null)
          connection.Close();
          if(rd != null)
          rd.Close();
          }
          }
          return CiudadServidorList;
          }
        

    /// <summary>
    ///Get CiudadServidor
    ///</summary>
    public override SoftvList<CiudadServidorEntity> GetPagedList(int pageIndex, int pageSize)
    {
    SoftvList<CiudadServidorEntity> entities = new SoftvList<CiudadServidorEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGetPaged", connection);
    
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@pageSize", pageSize);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetCiudadServidorFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data CiudadServidor " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetCiudadServidorCount();
    return entities ?? new SoftvList<CiudadServidorEntity>();
    }
    }

    /// <summary>
    ///Get CiudadServidor
    ///</summary>
    public override SoftvList<CiudadServidorEntity> GetPagedList(int pageIndex, int pageSize,String xml)
    {
    SoftvList<CiudadServidorEntity> entities = new SoftvList<CiudadServidorEntity>();
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGetPagedXml", connection);
    
    AssingParameter(comandoSql,"@pageSize", pageSize);
    AssingParameter(comandoSql,"@pageIndex", pageIndex);
    AssingParameter(comandoSql,"@xml", xml);
    IDataReader rd = null;
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    rd = ExecuteReader(comandoSql);
    while (rd.Read())
    {
    entities.Add(GetCiudadServidorFromReader(rd));
    }
    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data CiudadServidor " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    if (rd != null)
    rd.Close();
    }
    entities.totalCount = GetCiudadServidorCount(xml);
    return entities ?? new SoftvList<CiudadServidorEntity>();
    }
    }

    /// <summary>
    ///Get Count CiudadServidor
    ///</summary>
    public int GetCiudadServidorCount()
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGetCount", connection);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data CiudadServidor " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }


    /// <summary>
    ///Get Count CiudadServidor
    ///</summary>
    public int GetCiudadServidorCount(String xml)
    {
    int result = 0;
    using (SqlConnection connection = new SqlConnection(SoftvSettings.Settings.CiudadServidor.ConnectionString))
    {
    
    SqlCommand comandoSql = CreateCommand("Softv_CiudadServidorGetCountXml", connection);
    
    AssingParameter(comandoSql,"@xml", xml);
    try
    {
    if (connection.State == ConnectionState.Closed)
    connection.Open();
    result = (int)ExecuteScalar(comandoSql);


    }
    catch (Exception ex)
    {
    throw new Exception("Error getting data CiudadServidor " + ex.Message, ex);
    }
    finally
    {
    if (connection != null)
    connection.Close();
    }
    }
    return result;
    }

    #region Customs Methods
    
    #endregion
    }
    }
  