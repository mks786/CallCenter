
    using System;
    using System.Text;
    using System.Data;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Runtime.Remoting;
    using Softv.Entities;
    using SoftvConfiguration;
    using Globals;

    namespace Softv.Providers
    {
    /// <summary>
    /// Class                   : Softv.Providers.CiudadServidorProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : CiudadServidor Provider
    /// File                    : CiudadServidorProvider.cs
    /// Creation date           : 02/08/2016
    /// Creation time           : 12:53 p. m.
    /// </summary>
    public abstract class CiudadServidorProvider : Globals.DataAccess
    {

    /// <summary>
    /// Instance of CiudadServidor from DB
    /// </summary>
    private static CiudadServidorProvider _Instance = null;

    private static ObjectHandle obj;
    /// <summary>
    /// Generates a CiudadServidor instance
    /// </summary>
    public static CiudadServidorProvider Instance
    {
    get
    {
    if (_Instance == null)
    {
    obj = Activator.CreateInstance(
    SoftvSettings.Settings.CiudadServidor.Assembly,
    SoftvSettings.Settings.CiudadServidor.DataClass);
    _Instance = (CiudadServidorProvider)obj.Unwrap();
    }
    return _Instance;
    }
    }

    /// <summary>
    /// Provider's default constructor
    /// </summary>
    public CiudadServidorProvider()
    {
    }
    /// <summary>
    /// Abstract method to add CiudadServidor
    ///  /summary>
    /// <param name="CiudadServidor"></param>
    /// <returns></returns>
    public abstract int AddCiudadServidor(CiudadServidorEntity entity_CiudadServidor);

    /// <summary>
    /// Abstract method to delete CiudadServidor
    /// </summary>
    public abstract int DeleteCiudadServidor(int? Id);

    /// <summary>
    /// Abstract method to update CiudadServidor
    /// </summary>
    public abstract int EditCiudadServidor(CiudadServidorEntity entity_CiudadServidor);

    /// <summary>
    /// Abstract method to get all CiudadServidor
    /// </summary>
    public abstract List<CiudadServidorEntity> GetCiudadServidor();

    /// <summary>
    /// Abstract method to get all CiudadServidor List<int> lid
    /// </summary>
    public abstract List<CiudadServidorEntity> GetCiudadServidor(List<int> lid);

    /// <summary>
    /// Abstract method to get by id
    /// </summary>
    public abstract CiudadServidorEntity GetCiudadServidorById(int? Id);

    
          public abstract List<CiudadServidorEntity> GetCiudadServidorByIdConexion(int? IdPlaza);          
        

    /// <summary>
    ///Get CiudadServidor
    ///</summary>
    public abstract SoftvList<CiudadServidorEntity> GetPagedList(int pageIndex, int pageSize);

    /// <summary>
    ///Get CiudadServidor
    ///</summary>
    public abstract SoftvList<CiudadServidorEntity> GetPagedList(int pageIndex, int pageSize,String xml);

    /// <summary>
    /// Converts data from reader to entity
    /// </summary>
    protected virtual CiudadServidorEntity GetCiudadServidorFromReader(IDataReader reader)
    {
    CiudadServidorEntity entity_CiudadServidor = null;
    try
    {
      entity_CiudadServidor = new CiudadServidorEntity();
    entity_CiudadServidor.Id = (int?)(GetFromReader(reader,"Id"));
          entity_CiudadServidor.Ciudad = (String)(GetFromReader(reader,"Ciudad", IsString : true));
        entity_CiudadServidor.IdPlaza = (int?)(GetFromReader(reader,"IdPlaza"));
          
    }
    catch (Exception ex)
    {
    throw new Exception("Error converting CiudadServidor data to entity", ex);
    }
    return entity_CiudadServidor;
    }
    
    }

    #region Customs Methods
    
    #endregion
    }

  