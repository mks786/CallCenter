
using System;
using System.Text;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Runtime.Remoting;
using Softv.Entities;
using SoftvConfiguration;
using Globals;

namespace Softv.Providers
{
    /// <summary>
    /// Class                   : Softv.Providers.RelEnProcesosProvider
    /// Generated by            : Class Generator (c) 2014
    /// Description             : RelEnProcesos Provider
    /// File                    : RelEnProcesosProvider.cs
    /// Creation date           : 27/04/2016
    /// Creation time           : 05:19 p. m.
    /// </summary>
    public abstract class RelEnProcesosProvider : Globals.DataAccess
    {

        /// <summary>
        /// Instance of RelEnProcesos from DB
        /// </summary>
        private static RelEnProcesosProvider _Instance = null;

        private static ObjectHandle obj;
        /// <summary>
        /// Generates a RelEnProcesos instance
        /// </summary>
        public static RelEnProcesosProvider Instance
        {
            get
            {
                if (_Instance == null)
                {
                    obj = Activator.CreateInstance(
                    SoftvSettings.Settings.RelEnProcesos.Assembly,
                    SoftvSettings.Settings.RelEnProcesos.DataClass);
                    _Instance = (RelEnProcesosProvider)obj.Unwrap();
                }
                return _Instance;
            }
        }

        /// <summary>
        /// Provider's default constructor
        /// </summary>
        public RelEnProcesosProvider()
        {
        }
        /// <summary>
        /// Abstract method to add RelEnProcesos
        ///  /summary>
        /// <param name="RelEnProcesos"></param>
        /// <returns></returns>
        public abstract int AddRelEnProcesos(RelEnProcesosEntity entity_RelEnProcesos);

        /// <summary>
        /// Abstract method to delete RelEnProcesos
        /// </summary>
        public abstract int DeleteRelEnProcesos(int? IdProceso);

        /// <summary>
        /// Abstract method to update RelEnProcesos
        /// </summary>
        public abstract int EditRelEnProcesos(RelEnProcesosEntity entity_RelEnProcesos);

        /// <summary>
        /// Abstract method to get all RelEnProcesos
        /// </summary>
        public abstract List<RelEnProcesosEntity> GetRelEnProcesos();

        /// <summary>
        /// Abstract method to get all RelEnProcesos List<int> lid
        /// </summary>
        public abstract List<RelEnProcesosEntity> GetRelEnProcesos(List<int> lid);

        /// <summary>
        /// Abstract method to get by id
        /// </summary>
        public abstract RelEnProcesosEntity GetRelEnProcesosById(int? IdProceso);


        public abstract List<RelEnProcesosEntity> GetRelEnProcesosByIdPregunta(int? IdPregunta);

        public abstract List<RelEnProcesosEntity> GetRelEnProcesosById_ResOpcMult(int? Id_ResOpcMult);

        public abstract List<RelEnProcesosEntity> GetRelEnProcesosByIdProceso(int? IdProceso);


        /// <summary>
        ///Get RelEnProcesos
        ///</summary>
        public abstract SoftvList<RelEnProcesosEntity> GetPagedList(int pageIndex, int pageSize);

        /// <summary>
        ///Get RelEnProcesos
        ///</summary>
        public abstract SoftvList<RelEnProcesosEntity> GetPagedList(int pageIndex, int pageSize, String xml);

        /// <summary>
        /// Converts data from reader to entity
        /// </summary>
        protected virtual RelEnProcesosEntity GetRelEnProcesosFromReader(IDataReader reader)
        {
            RelEnProcesosEntity entity_RelEnProcesos = null;
            try
            {
                entity_RelEnProcesos = new RelEnProcesosEntity();
                entity_RelEnProcesos.IdProceso = (int?)(GetFromReader(reader, "IdProceso"));
                entity_RelEnProcesos.IdPregunta = (int?)(GetFromReader(reader, "IdPregunta"));
                entity_RelEnProcesos.Id_ResOpcMult = (int?)(GetFromReader(reader, "Id_ResOpcMult"));
                entity_RelEnProcesos.RespAbi = (String)(GetFromReader(reader, "RespAbi", IsString: true));
                entity_RelEnProcesos.RespCerrada = (bool?)(GetFromReader(reader, "RespCerrada"));
                entity_RelEnProcesos.IdUniverso = (int?)(GetFromReader(reader, "IdUniverso"));

            }
            catch (Exception ex)
            {
                throw new Exception("Error converting RelEnProcesos data to entity", ex);
            }
            return entity_RelEnProcesos;
        }

    }

    #region Customs Methods

    #endregion
}

